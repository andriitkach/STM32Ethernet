
STM32Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b6c  0800d36c  0800d36c  0001d36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fed8  0800fed8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800fed8  0800fed8  0001fed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fee0  0800fee0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fee0  0800fee0  0001fee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fee4  0800fee4  0001fee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800fee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006830  20000078  0800ff60  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200068a8  0800ff60  000268a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025397  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000498e  00000000  00000000  0004543f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00049dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef8  00000000  00000000  0004ad60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b471  00000000  00000000  0004bc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001907d  00000000  00000000  000770c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7b21  00000000  00000000  00090146  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000431c  00000000  00000000  00167ce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d354 	.word	0x0800d354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800d354 	.word	0x0800d354

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fa0c 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f806 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f86e 	bl	800065c <MX_GPIO_Init>
  MX_LWIP_Init();
 8000580:	f002 f87e 	bl	8002680 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	e7fe      	b.n	8000584 <main+0x14>
	...

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f00b ffb4 	bl	800c504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <SystemClock_Config+0xcc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xd0>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f8:	2308      	movs	r3, #8
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005fc:	2332      	movs	r3, #50	; 0x32
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000600:	2304      	movs	r3, #4
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000604:	2307      	movs	r3, #7
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fbfd 	bl	8001e0c <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000618:	f000 f880 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fe56 	bl	80022ec <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000646:	f000 f869 	bl	800071c <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <MX_GPIO_Init+0xb8>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a26      	ldr	r2, [pc, #152]	; (8000714 <MX_GPIO_Init+0xb8>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_GPIO_Init+0xb8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_GPIO_Init+0xb8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a1f      	ldr	r2, [pc, #124]	; (8000714 <MX_GPIO_Init+0xb8>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a11      	ldr	r2, [pc, #68]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <MX_GPIO_Init+0xbc>)
 80006ea:	f001 fb75 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80006ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0xbc>)
 8000708:	f001 f9cc 	bl	8001aa4 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020c00 	.word	0x40020c00

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <HAL_MspInit+0x4c>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6453      	str	r3, [r2, #68]	; 0x44
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_MspInit+0x4c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800076a:	2007      	movs	r0, #7
 800076c:	f000 fa56 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f930 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	e00a      	b.n	8000800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ea:	f3af 8000 	nop.w
 80007ee:	4601      	mov	r1, r0
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	60ba      	str	r2, [r7, #8]
 80007f6:	b2ca      	uxtb	r2, r1
 80007f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	dbf0      	blt.n	80007ea <_read+0x12>
	}

return len;
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	e009      	b.n	8000838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3301      	adds	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbf1      	blt.n	8000824 <_write+0x12>
	}
	return len;
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <_close>:

int _close(int file)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
	return -1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000872:	605a      	str	r2, [r3, #4]
	return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_isatty>:

int _isatty(int file)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	return 1;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <_sbrk+0x50>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <_sbrk+0x16>
		heap_end = &end;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <_sbrk+0x50>)
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <_sbrk+0x54>)
 80008c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <_sbrk+0x50>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <_sbrk+0x50>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	466a      	mov	r2, sp
 80008da:	4293      	cmp	r3, r2
 80008dc:	d905      	bls.n	80008ea <_sbrk+0x36>
	{
		errno = ENOMEM;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <_sbrk+0x58>)
 80008e0:	220c      	movs	r2, #12
 80008e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e8:	e006      	b.n	80008f8 <_sbrk+0x44>
	}

	heap_end += incr;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <_sbrk+0x50>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <_sbrk+0x50>)
 80008f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	20000094 	.word	0x20000094
 8000908:	200068a8 	.word	0x200068a8
 800090c:	200068a4 	.word	0x200068a4

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <SystemInit+0x28>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <SystemInit+0x28>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <SystemInit+0x28>)
 8000926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800092a:	609a      	str	r2, [r3, #8]
#endif
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800093c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000974 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000940:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000942:	e003      	b.n	800094c <LoopCopyDataInit>

08000944 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000946:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000948:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800094a:	3104      	adds	r1, #4

0800094c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000950:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000952:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000954:	d3f6      	bcc.n	8000944 <CopyDataInit>
  ldr  r2, =_sbss
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000958:	e002      	b.n	8000960 <LoopFillZerobss>

0800095a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800095a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800095c:	f842 3b04 	str.w	r3, [r2], #4

08000960 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000962:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000964:	d3f9      	bcc.n	800095a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000966:	f7ff ffd3 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096a:	f00b fd8d 	bl	800c488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096e:	f7ff fdff 	bl	8000570 <main>
  bx  lr    
 8000972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000974:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000978:	0800fee8 	.word	0x0800fee8
  ldr  r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000980:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000984:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000988:	200068a8 	.word	0x200068a8

0800098c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC_IRQHandler>
	...

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <HAL_Init+0x40>)
 800099a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_Init+0x40>)
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x40>)
 80009b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f92f 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff feb2 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023c00 	.word	0x40023c00

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f939 	bl	8000c6a <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a10:	f000 f90f 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000210 	.word	0x20000210

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000210 	.word	0x20000210

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff ffee 	bl	8000a5c <HAL_GetTick>
 8000a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_Delay+0x40>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff ffde 	bl	8000a5c <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000008 	.word	0x20000008

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	; (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff47 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff5c 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffb0 	bl	8000bd8 <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000c94:	4baa      	ldr	r3, [pc, #680]	; (8000f40 <HAL_ETH_Init+0x2bc>)
 8000c96:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e185      	b.n	8000fb6 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d106      	bne.n	8000cc4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f001 fde6 	bl	8002890 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	4b9e      	ldr	r3, [pc, #632]	; (8000f44 <HAL_ETH_Init+0x2c0>)
 8000cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ccc:	4a9d      	ldr	r2, [pc, #628]	; (8000f44 <HAL_ETH_Init+0x2c0>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd4:	4b9b      	ldr	r3, [pc, #620]	; (8000f44 <HAL_ETH_Init+0x2c0>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ce0:	4b99      	ldr	r3, [pc, #612]	; (8000f48 <HAL_ETH_Init+0x2c4>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a98      	ldr	r2, [pc, #608]	; (8000f48 <HAL_ETH_Init+0x2c4>)
 8000ce6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000cea:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000cec:	4b96      	ldr	r3, [pc, #600]	; (8000f48 <HAL_ETH_Init+0x2c4>)
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	4994      	ldr	r1, [pc, #592]	; (8000f48 <HAL_ETH_Init+0x2c4>)
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f042 0201 	orr.w	r2, r2, #1
 8000d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d10:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d12:	f7ff fea3 	bl	8000a5c <HAL_GetTick>
 8000d16:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d18:	e011      	b.n	8000d3e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000d1a:	f7ff fe9f 	bl	8000a5c <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d28:	d909      	bls.n	8000d3e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e13b      	b.n	8000fb6 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1e4      	bne.n	8000d1a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f023 031c 	bic.w	r3, r3, #28
 8000d5e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000d60:	f001 fc82 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8000d64:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4a78      	ldr	r2, [pc, #480]	; (8000f4c <HAL_ETH_Init+0x2c8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d908      	bls.n	8000d80 <HAL_ETH_Init+0xfc>
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4a77      	ldr	r2, [pc, #476]	; (8000f50 <HAL_ETH_Init+0x2cc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d804      	bhi.n	8000d80 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e027      	b.n	8000dd0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	4a73      	ldr	r2, [pc, #460]	; (8000f50 <HAL_ETH_Init+0x2cc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d908      	bls.n	8000d9a <HAL_ETH_Init+0x116>
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	4a72      	ldr	r2, [pc, #456]	; (8000f54 <HAL_ETH_Init+0x2d0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d804      	bhi.n	8000d9a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f043 030c 	orr.w	r3, r3, #12
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e01a      	b.n	8000dd0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4a6d      	ldr	r2, [pc, #436]	; (8000f54 <HAL_ETH_Init+0x2d0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d903      	bls.n	8000daa <HAL_ETH_Init+0x126>
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4a6c      	ldr	r2, [pc, #432]	; (8000f58 <HAL_ETH_Init+0x2d4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d911      	bls.n	8000dce <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4a6a      	ldr	r2, [pc, #424]	; (8000f58 <HAL_ETH_Init+0x2d4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d908      	bls.n	8000dc4 <HAL_ETH_Init+0x140>
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4a69      	ldr	r2, [pc, #420]	; (8000f5c <HAL_ETH_Init+0x2d8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d804      	bhi.n	8000dc4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	e005      	b.n	8000dd0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f043 0310 	orr.w	r3, r3, #16
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	e000      	b.n	8000dd0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000dce:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000dd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ddc:	2100      	movs	r1, #0
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 fb16 	bl	8001410 <HAL_ETH_WritePHYRegister>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00b      	beq.n	8000e02 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000dee:	6939      	ldr	r1, [r7, #16]
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 fba3 	bl	800153c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e0d9      	b.n	8000fb6 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000e02:	20ff      	movs	r0, #255	; 0xff
 8000e04:	f7ff fe36 	bl	8000a74 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 80a7 	beq.w	8000f60 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e12:	f7ff fe23 	bl	8000a5c <HAL_GetTick>
 8000e16:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2101      	movs	r1, #1
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 fa8d 	bl	8001340 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000e26:	f7ff fe19 	bl	8000a5c <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d90f      	bls.n	8000e58 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e3c:	6939      	ldr	r1, [r7, #16]
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 fb7c 	bl	800153c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e0ae      	b.n	8000fb6 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0da      	beq.n	8000e18 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000e62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e66:	2100      	movs	r1, #0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fad1 	bl	8001410 <HAL_ETH_WritePHYRegister>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00b      	beq.n	8000e8c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000e78:	6939      	ldr	r1, [r7, #16]
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fb5e 	bl	800153c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e094      	b.n	8000fb6 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e8c:	f7ff fde6 	bl	8000a5c <HAL_GetTick>
 8000e90:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	461a      	mov	r2, r3
 8000e98:	2101      	movs	r1, #1
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 fa50 	bl	8001340 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000ea0:	f7ff fddc 	bl	8000a5c <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d90f      	bls.n	8000ed2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000eb6:	6939      	ldr	r1, [r7, #16]
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 fb3f 	bl	800153c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e071      	b.n	8000fb6 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0da      	beq.n	8000e92 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	211f      	movs	r1, #31
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fa2b 	bl	8001340 <HAL_ETH_ReadPHYRegister>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00b      	beq.n	8000f08 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ef4:	6939      	ldr	r1, [r7, #16]
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fb20 	bl	800153c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f04:	2301      	movs	r3, #1
 8000f06:	e056      	b.n	8000fb6 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	e002      	b.n	8000f22 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	e037      	b.n	8000fa4 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	e032      	b.n	8000fa4 <HAL_ETH_Init+0x320>
 8000f3e:	bf00      	nop
 8000f40:	03938700 	.word	0x03938700
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	01312cff 	.word	0x01312cff
 8000f50:	02160ebf 	.word	0x02160ebf
 8000f54:	039386ff 	.word	0x039386ff
 8000f58:	05f5e0ff 	.word	0x05f5e0ff
 8000f5c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	08db      	lsrs	r3, r3, #3
 8000f66:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	085b      	lsrs	r3, r3, #1
 8000f6e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 fa49 	bl	8001410 <HAL_ETH_WritePHYRegister>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f88:	6939      	ldr	r1, [r7, #16]
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 fad6 	bl	800153c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e00c      	b.n	8000fb6 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000f9c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000fa0:	f7ff fd68 	bl	8000a74 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fac8 	bl	800153c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop

08000fc0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <HAL_ETH_DMATxDescListInit+0x20>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e052      	b.n	8001086 <HAL_ETH_DMATxDescListInit+0xc6>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2202      	movs	r2, #2
 8000fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e030      	b.n	800105e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	015b      	lsls	r3, r3, #5
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	4413      	add	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800100c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001014:	fb02 f303 	mul.w	r3, r2, r3
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	461a      	mov	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	d208      	bcs.n	8001052 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	015b      	lsls	r3, r3, #5
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	4413      	add	r3, r2
 800104a:	461a      	mov	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	e002      	b.n	8001058 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d3ca      	bcc.n	8000ffc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001070:	3310      	adds	r3, #16
 8001072:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001092:	b480      	push	{r7}
 8001094:	b087      	sub	sp, #28
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ETH_DMARxDescListInit+0x20>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e056      	b.n	8001160 <HAL_ETH_DMARxDescListInit+0xce>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2202      	movs	r2, #2
 80010be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e034      	b.n	8001138 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	015b      	lsls	r3, r3, #5
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	4413      	add	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010de:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80010e6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	461a      	mov	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	429a      	cmp	r2, r3
 8001118:	d208      	bcs.n	800112c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	015b      	lsls	r3, r3, #5
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	461a      	mov	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	e002      	b.n	8001132 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3c6      	bcc.n	80010ce <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800114a:	330c      	adds	r3, #12
 800114c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_ETH_TransmitFrame+0x24>
 800118c:	2302      	movs	r3, #2
 800118e:	e0cd      	b.n	800132c <HAL_ETH_TransmitFrame+0x1c0>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2202      	movs	r2, #2
 800119c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d109      	bne.n	80011ba <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80011b6:	2301      	movs	r3, #1
 80011b8:	e0b8      	b.n	800132c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da09      	bge.n	80011d8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2212      	movs	r2, #18
 80011c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0a9      	b.n	800132c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011de:	4293      	cmp	r3, r2
 80011e0:	d915      	bls.n	800120e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	4a54      	ldr	r2, [pc, #336]	; (8001338 <HAL_ETH_TransmitFrame+0x1cc>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0a9b      	lsrs	r3, r3, #10
 80011ec:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	4b51      	ldr	r3, [pc, #324]	; (8001338 <HAL_ETH_TransmitFrame+0x1cc>)
 80011f2:	fba3 1302 	umull	r1, r3, r3, r2
 80011f6:	0a9b      	lsrs	r3, r3, #10
 80011f8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e001      	b.n	8001212 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800120e:	2301      	movs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d11c      	bne.n	8001252 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001226:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001232:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001242:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001250:	e04b      	b.n	80012ea <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	e044      	b.n	80012e2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001266:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d107      	bne.n	800127e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800127c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001286:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3b01      	subs	r3, #1
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	429a      	cmp	r2, r3
 8001290:	d116      	bne.n	80012c0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012a0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	4a25      	ldr	r2, [pc, #148]	; (800133c <HAL_ETH_TransmitFrame+0x1d0>)
 80012a6:	fb02 f203 	mul.w	r2, r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80012b2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80012be:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012ce:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	3301      	adds	r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3b6      	bcc.n	8001258 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f2:	3314      	adds	r3, #20
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00d      	beq.n	800131a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001306:	3314      	adds	r3, #20
 8001308:	2204      	movs	r2, #4
 800130a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001314:	3304      	adds	r3, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	ac02b00b 	.word	0xac02b00b
 800133c:	fffffa0c 	.word	0xfffffa0c

08001340 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	460b      	mov	r3, r1
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b82      	cmp	r3, #130	; 0x82
 8001360:	d101      	bne.n	8001366 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001362:	2302      	movs	r3, #2
 8001364:	e050      	b.n	8001408 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2282      	movs	r2, #130	; 0x82
 800136a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 031c 	and.w	r3, r3, #28
 800137c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8a1b      	ldrh	r3, [r3, #16]
 8001382:	02db      	lsls	r3, r3, #11
 8001384:	b29b      	uxth	r3, r3
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4313      	orrs	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	4313      	orrs	r3, r2
 8001398:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f023 0302 	bic.w	r3, r3, #2
 80013a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013b2:	f7ff fb53 	bl	8000a5c <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013b8:	e015      	b.n	80013e6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80013ba:	f7ff fb4f 	bl	8000a5c <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d309      	bcc.n	80013de <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e014      	b.n	8001408 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e4      	bne.n	80013ba <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	460b      	mov	r3, r1
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b42      	cmp	r3, #66	; 0x42
 8001430:	d101      	bne.n	8001436 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001432:	2302      	movs	r3, #2
 8001434:	e04e      	b.n	80014d4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2242      	movs	r2, #66	; 0x42
 800143a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 031c 	and.w	r3, r3, #28
 800144c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8a1b      	ldrh	r3, [r3, #16]
 8001452:	02db      	lsls	r3, r3, #11
 8001454:	b29b      	uxth	r3, r3
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800145c:	897b      	ldrh	r3, [r7, #10]
 800145e:	019b      	lsls	r3, r3, #6
 8001460:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	4313      	orrs	r3, r2
 8001468:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	b29a      	uxth	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800148c:	f7ff fae6 	bl	8000a5c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001492:	e015      	b.n	80014c0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001494:	f7ff fae2 	bl	8000a5c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d309      	bcc.n	80014b8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e00d      	b.n	80014d4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1e4      	bne.n	8001494 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_ETH_Start+0x16>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e01f      	b.n	8001532 <HAL_ETH_Start+0x56>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2202      	movs	r2, #2
 80014fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fa1c 	bl	8001940 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fa36 	bl	800197a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fa80 	bl	8001a14 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fa4d 	bl	80019b4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 fa62 	bl	80019e4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0b0      	sub	sp, #192	; 0xc0
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001558:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001560:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800156a:	2300      	movs	r3, #0
 800156c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d103      	bne.n	800158a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001586:	663b      	str	r3, [r7, #96]	; 0x60
 8001588:	e001      	b.n	800158e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800158e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001592:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001598:	2300      	movs	r3, #0
 800159a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80015a8:	2340      	movs	r3, #64	; 0x40
 80015aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001610:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001614:	4bac      	ldr	r3, [pc, #688]	; (80018c8 <ETH_MACDMAConfig+0x38c>)
 8001616:	4013      	ands	r3, r2
 8001618:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800161c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800161e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001620:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001624:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001628:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800162e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001632:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001636:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800163c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800163e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001640:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001644:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001648:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800164a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800164c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800164e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001650:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001652:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001656:	4313      	orrs	r3, r2
 8001658:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001664:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff f9ff 	bl	8000a74 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800167e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001680:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001684:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001688:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800168a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800168e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001694:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001696:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800169a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800169c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80016a0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80016a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80016ac:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016ae:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff f9da 	bl	8000a74 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016c8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016d2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80016dc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80016e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016ec:	f64f 7341 	movw	r3, #65345	; 0xff41
 80016f0:	4013      	ands	r3, r2
 80016f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80016f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016fa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80016fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001700:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001706:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800170c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800170e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001712:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001714:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001718:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800171a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800171e:	4313      	orrs	r3, r2
 8001720:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800172c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff f99b 	bl	8000a74 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001746:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001748:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800174c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001762:	2001      	movs	r0, #1
 8001764:	f7ff f986 	bl	8000a74 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001770:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800177a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001780:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001784:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001796:	2304      	movs	r3, #4
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800179a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80017a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c6:	3318      	adds	r3, #24
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <ETH_MACDMAConfig+0x390>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017da:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80017dc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017de:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80017e0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80017e2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80017e4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80017e6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80017e8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80017ea:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80017ec:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80017ee:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80017f0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80017f2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80017f6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80017fa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001800:	4313      	orrs	r3, r2
 8001802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180e:	3318      	adds	r3, #24
 8001810:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001814:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800181e:	3318      	adds	r3, #24
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff f924 	bl	8000a74 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001834:	3318      	adds	r3, #24
 8001836:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800183a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800183c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001840:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001844:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001848:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800184a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800184c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800184e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001850:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001852:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001856:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001864:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff f8fd 	bl	8000a74 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001882:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001886:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10f      	bne.n	80018b0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001898:	331c      	adds	r3, #28
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ac:	331c      	adds	r3, #28
 80018ae:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	461a      	mov	r2, r3
 80018b6:	2100      	movs	r1, #0
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f809 	bl	80018d0 <ETH_MACAddressConfig>
}
 80018be:	bf00      	nop
 80018c0:	37c0      	adds	r7, #192	; 0xc0
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	ff20810f 	.word	0xff20810f
 80018cc:	f8de3f23 	.word	0xf8de3f23

080018d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3305      	adds	r3, #5
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	3204      	adds	r2, #4
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <ETH_MACAddressConfig+0x68>)
 80018f2:	4413      	add	r3, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3303      	adds	r3, #3
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	061a      	lsls	r2, r3, #24
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3302      	adds	r3, #2
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	041b      	lsls	r3, r3, #16
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3301      	adds	r3, #1
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	4313      	orrs	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <ETH_MACAddressConfig+0x6c>)
 8001922:	4413      	add	r3, r2
 8001924:	461a      	mov	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	6013      	str	r3, [r2, #0]
}
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40028040 	.word	0x40028040
 800193c:	40028044 	.word	0x40028044

08001940 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001964:	2001      	movs	r0, #1
 8001966:	f000 f87f 	bl	8001a68 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0204 	orr.w	r2, r2, #4
 8001994:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800199e:	2001      	movs	r0, #1
 80019a0:	f000 f862 	bl	8001a68 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c4:	3318      	adds	r3, #24
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d4:	3318      	adds	r3, #24
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f4:	3318      	adds	r3, #24
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0202 	orr.w	r2, r2, #2
 8001a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a04:	3318      	adds	r3, #24
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a28:	3318      	adds	r3, #24
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a38:	3318      	adds	r3, #24
 8001a3a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	3318      	adds	r3, #24
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 f80c 	bl	8001a68 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	601a      	str	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <ETH_Delay+0x34>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <ETH_Delay+0x38>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a5b      	lsrs	r3, r3, #9
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001a84:	bf00      	nop
  } 
  while (Delay --);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	60fa      	str	r2, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f9      	bne.n	8001a84 <ETH_Delay+0x1c>
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	10624dd3 	.word	0x10624dd3

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e16b      	b.n	8001d98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 815a 	bne.w	8001d92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d00b      	beq.n	8001afe <HAL_GPIO_Init+0x5a>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af2:	2b11      	cmp	r3, #17
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	d130      	bne.n	8001b60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0201 	and.w	r2, r3, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0xfc>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b12      	cmp	r3, #18
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80b4 	beq.w	8001d92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b5f      	ldr	r3, [pc, #380]	; (8001dac <HAL_GPIO_Init+0x308>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a5e      	ldr	r2, [pc, #376]	; (8001dac <HAL_GPIO_Init+0x308>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <HAL_GPIO_Init+0x308>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a5a      	ldr	r2, [pc, #360]	; (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a51      	ldr	r2, [pc, #324]	; (8001db4 <HAL_GPIO_Init+0x310>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d02b      	beq.n	8001cca <HAL_GPIO_Init+0x226>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <HAL_GPIO_Init+0x314>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d025      	beq.n	8001cc6 <HAL_GPIO_Init+0x222>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4f      	ldr	r2, [pc, #316]	; (8001dbc <HAL_GPIO_Init+0x318>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01f      	beq.n	8001cc2 <HAL_GPIO_Init+0x21e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4e      	ldr	r2, [pc, #312]	; (8001dc0 <HAL_GPIO_Init+0x31c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d019      	beq.n	8001cbe <HAL_GPIO_Init+0x21a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4d      	ldr	r2, [pc, #308]	; (8001dc4 <HAL_GPIO_Init+0x320>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x216>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4c      	ldr	r2, [pc, #304]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00d      	beq.n	8001cb6 <HAL_GPIO_Init+0x212>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4b      	ldr	r2, [pc, #300]	; (8001dcc <HAL_GPIO_Init+0x328>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4a      	ldr	r2, [pc, #296]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_GPIO_Init+0x20a>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00e      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cae:	2308      	movs	r3, #8
 8001cb0:	e00c      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	e00a      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cdc:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_GPIO_Init+0x30c>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cea:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0e:	4a31      	ldr	r2, [pc, #196]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d14:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d38:	4a26      	ldr	r2, [pc, #152]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3e:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d8c:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	f67f ae90 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	3724      	adds	r7, #36	; 0x24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40021400 	.word	0x40021400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40021c00 	.word	0x40021c00
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e25b      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d075      	beq.n	8001f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2a:	4ba3      	ldr	r3, [pc, #652]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d00c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4ba0      	ldr	r3, [pc, #640]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d112      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e42:	4b9d      	ldr	r3, [pc, #628]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4b99      	ldr	r3, [pc, #612]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d157      	bne.n	8001f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e236      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x74>
 8001e72:	4b91      	ldr	r3, [pc, #580]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a90      	ldr	r2, [pc, #576]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x98>
 8001e8a:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a8a      	ldr	r2, [pc, #552]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a87      	ldr	r2, [pc, #540]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001ea4:	4b84      	ldr	r3, [pc, #528]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a83      	ldr	r2, [pc, #524]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a80      	ldr	r2, [pc, #512]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fdca 	bl	8000a5c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7fe fdc6 	bl	8000a5c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1fb      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0xc0>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7fe fdb6 	bl	8000a5c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fdb2 	bl	8000a5c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1e7      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xe8>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f22:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d11c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1bb      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4952      	ldr	r1, [pc, #328]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCC_OscConfig+0x2b0>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7fe fd6b 	bl	8000a5c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7fe fd67 	bl	8000a5c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e19c      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4940      	ldr	r1, [pc, #256]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCC_OscConfig+0x2b0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fd4a 	bl	8000a5c <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fd46 	bl	8000a5c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e17b      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d030      	beq.n	8002058 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_RCC_OscConfig+0x2b4>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe fd2a 	bl	8000a5c <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200c:	f7fe fd26 	bl	8000a5c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e15b      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x200>
 800202a:	e015      	b.n	8002058 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_RCC_OscConfig+0x2b4>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7fe fd13 	bl	8000a5c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203a:	f7fe fd0f 	bl	8000a5c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e144      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a0 	beq.w	80021a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_OscConfig+0x2b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d121      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_RCC_OscConfig+0x2b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_RCC_OscConfig+0x2b8>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ae:	f7fe fcd5 	bl	8000a5c <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	e011      	b.n	80020da <HAL_RCC_OscConfig+0x2ce>
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470000 	.word	0x42470000
 80020c0:	42470e80 	.word	0x42470e80
 80020c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7fe fcc8 	bl	8000a5c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0fd      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_OscConfig+0x4d4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x2f0>
 80020ee:	4b7d      	ldr	r3, [pc, #500]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a7c      	ldr	r2, [pc, #496]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	e01c      	b.n	8002136 <HAL_RCC_OscConfig+0x32a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x312>
 8002104:	4b77      	ldr	r3, [pc, #476]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a76      	ldr	r2, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
 8002110:	4b74      	ldr	r3, [pc, #464]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a73      	ldr	r2, [pc, #460]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
 800211c:	e00b      	b.n	8002136 <HAL_RCC_OscConfig+0x32a>
 800211e:	4b71      	ldr	r3, [pc, #452]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a70      	ldr	r2, [pc, #448]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6713      	str	r3, [r2, #112]	; 0x70
 800212a:	4b6e      	ldr	r3, [pc, #440]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	4a6d      	ldr	r2, [pc, #436]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d015      	beq.n	800216a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7fe fc8d 	bl	8000a5c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fc89 	bl	8000a5c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0bc      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ee      	beq.n	8002146 <HAL_RCC_OscConfig+0x33a>
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe fc77 	bl	8000a5c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fc73 	bl	8000a5c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0a6      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a51      	ldr	r2, [pc, #324]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8092 	beq.w	80022d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b0:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d05c      	beq.n	8002276 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d141      	bne.n	8002248 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_RCC_OscConfig+0x4dc>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7fe fc47 	bl	8000a5c <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe fc43 	bl	8000a5c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e078      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e4:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69da      	ldr	r2, [r3, #28]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	019b      	lsls	r3, r3, #6
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	085b      	lsrs	r3, r3, #1
 8002208:	3b01      	subs	r3, #1
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	4933      	ldr	r1, [pc, #204]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_RCC_OscConfig+0x4dc>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe fc1c 	bl	8000a5c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe fc18 	bl	8000a5c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e04d      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x41c>
 8002246:	e045      	b.n	80022d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x4dc>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fc05 	bl	8000a5c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fc01 	bl	8000a5c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e036      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x44a>
 8002274:	e02e      	b.n	80022d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e029      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_RCC_OscConfig+0x4d8>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	429a      	cmp	r2, r3
 8002294:	d11c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d115      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022aa:	4013      	ands	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d10d      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40007000 	.word	0x40007000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	42470060 	.word	0x42470060

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0cc      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b68      	ldr	r3, [pc, #416]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d90c      	bls.n	8002328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b65      	ldr	r3, [pc, #404]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b8      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002340:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002358:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	494d      	ldr	r1, [pc, #308]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d044      	beq.n	800240c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d119      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e067      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4934      	ldr	r1, [pc, #208]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fb3e 	bl	8000a5c <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fb3a 	bl	8000a5c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e04f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d20c      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e032      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4916      	ldr	r1, [pc, #88]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002472:	f000 f821 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 8002476:	4601      	mov	r1, r0
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	5cd3      	ldrb	r3, [r2, r3]
 8002486:	fa21 f303 	lsr.w	r3, r1, r3
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fa9e 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023c00 	.word	0x40023c00
 80024a8:	40023800 	.word	0x40023800
 80024ac:	0800fd4c 	.word	0x0800fd4c
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000004 	.word	0x20000004

080024b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	2300      	movs	r3, #0
 80024c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d007      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x32>
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d008      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x38>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80b4 	bne.w	800264c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024e6:	60bb      	str	r3, [r7, #8]
       break;
 80024e8:	e0b3      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ea:	4b5e      	ldr	r3, [pc, #376]	; (8002664 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80024ec:	60bb      	str	r3, [r7, #8]
      break;
 80024ee:	e0b0      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f0:	4b5a      	ldr	r3, [pc, #360]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fa:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d04a      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002506:	4b55      	ldr	r3, [pc, #340]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	f04f 0400 	mov.w	r4, #0
 8002510:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	ea03 0501 	and.w	r5, r3, r1
 800251c:	ea04 0602 	and.w	r6, r4, r2
 8002520:	4629      	mov	r1, r5
 8002522:	4632      	mov	r2, r6
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	f04f 0400 	mov.w	r4, #0
 800252c:	0154      	lsls	r4, r2, #5
 800252e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002532:	014b      	lsls	r3, r1, #5
 8002534:	4619      	mov	r1, r3
 8002536:	4622      	mov	r2, r4
 8002538:	1b49      	subs	r1, r1, r5
 800253a:	eb62 0206 	sbc.w	r2, r2, r6
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	f04f 0400 	mov.w	r4, #0
 8002546:	0194      	lsls	r4, r2, #6
 8002548:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800254c:	018b      	lsls	r3, r1, #6
 800254e:	1a5b      	subs	r3, r3, r1
 8002550:	eb64 0402 	sbc.w	r4, r4, r2
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	00e2      	lsls	r2, r4, #3
 800255e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002562:	00d9      	lsls	r1, r3, #3
 8002564:	460b      	mov	r3, r1
 8002566:	4614      	mov	r4, r2
 8002568:	195b      	adds	r3, r3, r5
 800256a:	eb44 0406 	adc.w	r4, r4, r6
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	0262      	lsls	r2, r4, #9
 8002578:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800257c:	0259      	lsls	r1, r3, #9
 800257e:	460b      	mov	r3, r1
 8002580:	4614      	mov	r4, r2
 8002582:	4618      	mov	r0, r3
 8002584:	4621      	mov	r1, r4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f04f 0400 	mov.w	r4, #0
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	f7fd fe6e 	bl	8000270 <__aeabi_uldivmod>
 8002594:	4603      	mov	r3, r0
 8002596:	460c      	mov	r4, r1
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	e049      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	f04f 0400 	mov.w	r4, #0
 80025a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	ea03 0501 	and.w	r5, r3, r1
 80025b2:	ea04 0602 	and.w	r6, r4, r2
 80025b6:	4629      	mov	r1, r5
 80025b8:	4632      	mov	r2, r6
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	f04f 0400 	mov.w	r4, #0
 80025c2:	0154      	lsls	r4, r2, #5
 80025c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025c8:	014b      	lsls	r3, r1, #5
 80025ca:	4619      	mov	r1, r3
 80025cc:	4622      	mov	r2, r4
 80025ce:	1b49      	subs	r1, r1, r5
 80025d0:	eb62 0206 	sbc.w	r2, r2, r6
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	f04f 0400 	mov.w	r4, #0
 80025dc:	0194      	lsls	r4, r2, #6
 80025de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025e2:	018b      	lsls	r3, r1, #6
 80025e4:	1a5b      	subs	r3, r3, r1
 80025e6:	eb64 0402 	sbc.w	r4, r4, r2
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	00e2      	lsls	r2, r4, #3
 80025f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025f8:	00d9      	lsls	r1, r3, #3
 80025fa:	460b      	mov	r3, r1
 80025fc:	4614      	mov	r4, r2
 80025fe:	195b      	adds	r3, r3, r5
 8002600:	eb44 0406 	adc.w	r4, r4, r6
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	02a2      	lsls	r2, r4, #10
 800260e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002612:	0299      	lsls	r1, r3, #10
 8002614:	460b      	mov	r3, r1
 8002616:	4614      	mov	r4, r2
 8002618:	4618      	mov	r0, r3
 800261a:	4621      	mov	r1, r4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f04f 0400 	mov.w	r4, #0
 8002622:	461a      	mov	r2, r3
 8002624:	4623      	mov	r3, r4
 8002626:	f7fd fe23 	bl	8000270 <__aeabi_uldivmod>
 800262a:	4603      	mov	r3, r0
 800262c:	460c      	mov	r4, r1
 800262e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	60bb      	str	r3, [r7, #8]
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800264e:	60bb      	str	r3, [r7, #8]
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	68bb      	ldr	r3, [r7, #8]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	00f42400 	.word	0x00f42400
 8002664:	007a1200 	.word	0x007a1200

08002668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCC_GetHCLKFreq+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002686:	f000 fb50 	bl	8002d2a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800268a:	4b78      	ldr	r3, [pc, #480]	; (800286c <MX_LWIP_Init+0x1ec>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	061a      	lsls	r2, r3, #24
 8002690:	4b76      	ldr	r3, [pc, #472]	; (800286c <MX_LWIP_Init+0x1ec>)
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	431a      	orrs	r2, r3
 8002698:	4b74      	ldr	r3, [pc, #464]	; (800286c <MX_LWIP_Init+0x1ec>)
 800269a:	789b      	ldrb	r3, [r3, #2]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	4313      	orrs	r3, r2
 80026a0:	4a72      	ldr	r2, [pc, #456]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026a2:	78d2      	ldrb	r2, [r2, #3]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	061a      	lsls	r2, r3, #24
 80026a8:	4b70      	ldr	r3, [pc, #448]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	0619      	lsls	r1, r3, #24
 80026ae:	4b6f      	ldr	r3, [pc, #444]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026b0:	785b      	ldrb	r3, [r3, #1]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	4319      	orrs	r1, r3
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	430b      	orrs	r3, r1
 80026be:	496b      	ldr	r1, [pc, #428]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026c0:	78c9      	ldrb	r1, [r1, #3]
 80026c2:	430b      	orrs	r3, r1
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026ca:	431a      	orrs	r2, r3
 80026cc:	4b67      	ldr	r3, [pc, #412]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	0619      	lsls	r1, r3, #24
 80026d2:	4b66      	ldr	r3, [pc, #408]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026d4:	785b      	ldrb	r3, [r3, #1]
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	4319      	orrs	r1, r3
 80026da:	4b64      	ldr	r3, [pc, #400]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026dc:	789b      	ldrb	r3, [r3, #2]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	430b      	orrs	r3, r1
 80026e2:	4962      	ldr	r1, [pc, #392]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026e4:	78c9      	ldrb	r1, [r1, #3]
 80026e6:	430b      	orrs	r3, r1
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80026ee:	431a      	orrs	r2, r3
 80026f0:	4b5e      	ldr	r3, [pc, #376]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	0619      	lsls	r1, r3, #24
 80026f6:	4b5d      	ldr	r3, [pc, #372]	; (800286c <MX_LWIP_Init+0x1ec>)
 80026f8:	785b      	ldrb	r3, [r3, #1]
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	4319      	orrs	r1, r3
 80026fe:	4b5b      	ldr	r3, [pc, #364]	; (800286c <MX_LWIP_Init+0x1ec>)
 8002700:	789b      	ldrb	r3, [r3, #2]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	430b      	orrs	r3, r1
 8002706:	4959      	ldr	r1, [pc, #356]	; (800286c <MX_LWIP_Init+0x1ec>)
 8002708:	78c9      	ldrb	r1, [r1, #3]
 800270a:	430b      	orrs	r3, r1
 800270c:	0e1b      	lsrs	r3, r3, #24
 800270e:	4313      	orrs	r3, r2
 8002710:	4a57      	ldr	r2, [pc, #348]	; (8002870 <MX_LWIP_Init+0x1f0>)
 8002712:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002714:	4b57      	ldr	r3, [pc, #348]	; (8002874 <MX_LWIP_Init+0x1f4>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	061a      	lsls	r2, r3, #24
 800271a:	4b56      	ldr	r3, [pc, #344]	; (8002874 <MX_LWIP_Init+0x1f4>)
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	431a      	orrs	r2, r3
 8002722:	4b54      	ldr	r3, [pc, #336]	; (8002874 <MX_LWIP_Init+0x1f4>)
 8002724:	789b      	ldrb	r3, [r3, #2]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	4313      	orrs	r3, r2
 800272a:	4a52      	ldr	r2, [pc, #328]	; (8002874 <MX_LWIP_Init+0x1f4>)
 800272c:	78d2      	ldrb	r2, [r2, #3]
 800272e:	4313      	orrs	r3, r2
 8002730:	061a      	lsls	r2, r3, #24
 8002732:	4b50      	ldr	r3, [pc, #320]	; (8002874 <MX_LWIP_Init+0x1f4>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	0619      	lsls	r1, r3, #24
 8002738:	4b4e      	ldr	r3, [pc, #312]	; (8002874 <MX_LWIP_Init+0x1f4>)
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	4319      	orrs	r1, r3
 8002740:	4b4c      	ldr	r3, [pc, #304]	; (8002874 <MX_LWIP_Init+0x1f4>)
 8002742:	789b      	ldrb	r3, [r3, #2]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	430b      	orrs	r3, r1
 8002748:	494a      	ldr	r1, [pc, #296]	; (8002874 <MX_LWIP_Init+0x1f4>)
 800274a:	78c9      	ldrb	r1, [r1, #3]
 800274c:	430b      	orrs	r3, r1
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002754:	431a      	orrs	r2, r3
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <MX_LWIP_Init+0x1f4>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	0619      	lsls	r1, r3, #24
 800275c:	4b45      	ldr	r3, [pc, #276]	; (8002874 <MX_LWIP_Init+0x1f4>)
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	4319      	orrs	r1, r3
 8002764:	4b43      	ldr	r3, [pc, #268]	; (8002874 <MX_LWIP_Init+0x1f4>)
 8002766:	789b      	ldrb	r3, [r3, #2]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	430b      	orrs	r3, r1
 800276c:	4941      	ldr	r1, [pc, #260]	; (8002874 <MX_LWIP_Init+0x1f4>)
 800276e:	78c9      	ldrb	r1, [r1, #3]
 8002770:	430b      	orrs	r3, r1
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002778:	431a      	orrs	r2, r3
 800277a:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <MX_LWIP_Init+0x1f4>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	0619      	lsls	r1, r3, #24
 8002780:	4b3c      	ldr	r3, [pc, #240]	; (8002874 <MX_LWIP_Init+0x1f4>)
 8002782:	785b      	ldrb	r3, [r3, #1]
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	4319      	orrs	r1, r3
 8002788:	4b3a      	ldr	r3, [pc, #232]	; (8002874 <MX_LWIP_Init+0x1f4>)
 800278a:	789b      	ldrb	r3, [r3, #2]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	430b      	orrs	r3, r1
 8002790:	4938      	ldr	r1, [pc, #224]	; (8002874 <MX_LWIP_Init+0x1f4>)
 8002792:	78c9      	ldrb	r1, [r1, #3]
 8002794:	430b      	orrs	r3, r1
 8002796:	0e1b      	lsrs	r3, r3, #24
 8002798:	4313      	orrs	r3, r2
 800279a:	4a37      	ldr	r2, [pc, #220]	; (8002878 <MX_LWIP_Init+0x1f8>)
 800279c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800279e:	4b37      	ldr	r3, [pc, #220]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	061a      	lsls	r2, r3, #24
 80027a4:	4b35      	ldr	r3, [pc, #212]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	431a      	orrs	r2, r3
 80027ac:	4b33      	ldr	r3, [pc, #204]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027ae:	789b      	ldrb	r3, [r3, #2]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	4313      	orrs	r3, r2
 80027b4:	4a31      	ldr	r2, [pc, #196]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027b6:	78d2      	ldrb	r2, [r2, #3]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	061a      	lsls	r2, r3, #24
 80027bc:	4b2f      	ldr	r3, [pc, #188]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	0619      	lsls	r1, r3, #24
 80027c2:	4b2e      	ldr	r3, [pc, #184]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	4319      	orrs	r1, r3
 80027ca:	4b2c      	ldr	r3, [pc, #176]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027cc:	789b      	ldrb	r3, [r3, #2]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	430b      	orrs	r3, r1
 80027d2:	492a      	ldr	r1, [pc, #168]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027d4:	78c9      	ldrb	r1, [r1, #3]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80027de:	431a      	orrs	r2, r3
 80027e0:	4b26      	ldr	r3, [pc, #152]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	0619      	lsls	r1, r3, #24
 80027e6:	4b25      	ldr	r3, [pc, #148]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	4319      	orrs	r1, r3
 80027ee:	4b23      	ldr	r3, [pc, #140]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027f0:	789b      	ldrb	r3, [r3, #2]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	430b      	orrs	r3, r1
 80027f6:	4921      	ldr	r1, [pc, #132]	; (800287c <MX_LWIP_Init+0x1fc>)
 80027f8:	78c9      	ldrb	r1, [r1, #3]
 80027fa:	430b      	orrs	r3, r1
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002802:	431a      	orrs	r2, r3
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <MX_LWIP_Init+0x1fc>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	0619      	lsls	r1, r3, #24
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <MX_LWIP_Init+0x1fc>)
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	4319      	orrs	r1, r3
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <MX_LWIP_Init+0x1fc>)
 8002814:	789b      	ldrb	r3, [r3, #2]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	430b      	orrs	r3, r1
 800281a:	4918      	ldr	r1, [pc, #96]	; (800287c <MX_LWIP_Init+0x1fc>)
 800281c:	78c9      	ldrb	r1, [r1, #3]
 800281e:	430b      	orrs	r3, r1
 8002820:	0e1b      	lsrs	r3, r3, #24
 8002822:	4313      	orrs	r3, r2
 8002824:	4a16      	ldr	r2, [pc, #88]	; (8002880 <MX_LWIP_Init+0x200>)
 8002826:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <MX_LWIP_Init+0x204>)
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <MX_LWIP_Init+0x208>)
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <MX_LWIP_Init+0x200>)
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <MX_LWIP_Init+0x1f8>)
 8002838:	490d      	ldr	r1, [pc, #52]	; (8002870 <MX_LWIP_Init+0x1f0>)
 800283a:	4814      	ldr	r0, [pc, #80]	; (800288c <MX_LWIP_Init+0x20c>)
 800283c:	f000 ff1a 	bl	8003674 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002840:	4812      	ldr	r0, [pc, #72]	; (800288c <MX_LWIP_Init+0x20c>)
 8002842:	f001 f8c7 	bl	80039d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_LWIP_Init+0x20c>)
 8002848:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <MX_LWIP_Init+0x1e0>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002858:	480c      	ldr	r0, [pc, #48]	; (800288c <MX_LWIP_Init+0x20c>)
 800285a:	f001 f8cb 	bl	80039f4 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800285e:	e002      	b.n	8002866 <MX_LWIP_Init+0x1e6>
    netif_set_down(&gnetif);
 8002860:	480a      	ldr	r0, [pc, #40]	; (800288c <MX_LWIP_Init+0x20c>)
 8002862:	f001 f933 	bl	8003acc <netif_set_down>
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000250 	.word	0x20000250
 8002870:	20000248 	.word	0x20000248
 8002874:	2000024c 	.word	0x2000024c
 8002878:	20000254 	.word	0x20000254
 800287c:	20000214 	.word	0x20000214
 8002880:	20000258 	.word	0x20000258
 8002884:	0800c2dd 	.word	0x0800c2dd
 8002888:	08002c65 	.word	0x08002c65
 800288c:	20000218 	.word	0x20000218

08002890 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08e      	sub	sp, #56	; 0x38
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a46      	ldr	r2, [pc, #280]	; (80029c8 <HAL_ETH_MspInit+0x138>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	f040 8085 	bne.w	80029be <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
 80028b8:	4b44      	ldr	r3, [pc, #272]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	4a43      	ldr	r2, [pc, #268]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 80028be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c2:	6313      	str	r3, [r2, #48]	; 0x30
 80028c4:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4a3c      	ldr	r2, [pc, #240]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 80028da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028de:	6313      	str	r3, [r2, #48]	; 0x30
 80028e0:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
 80028f0:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	4a35      	ldr	r2, [pc, #212]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 80028f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028fa:	6313      	str	r3, [r2, #48]	; 0x30
 80028fc:	4b33      	ldr	r3, [pc, #204]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4a2e      	ldr	r2, [pc, #184]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6313      	str	r3, [r2, #48]	; 0x30
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4a27      	ldr	r2, [pc, #156]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6313      	str	r3, [r2, #48]	; 0x30
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	6313      	str	r3, [r2, #48]	; 0x30
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_ETH_MspInit+0x13c>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800295c:	2332      	movs	r3, #50	; 0x32
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002968:	2303      	movs	r3, #3
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800296c:	230b      	movs	r3, #11
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002974:	4619      	mov	r1, r3
 8002976:	4816      	ldr	r0, [pc, #88]	; (80029d0 <HAL_ETH_MspInit+0x140>)
 8002978:	f7ff f894 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800297c:	2386      	movs	r3, #134	; 0x86
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800298c:	230b      	movs	r3, #11
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	4619      	mov	r1, r3
 8002996:	480f      	ldr	r0, [pc, #60]	; (80029d4 <HAL_ETH_MspInit+0x144>)
 8002998:	f7ff f884 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800299c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029ae:	230b      	movs	r3, #11
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b6:	4619      	mov	r1, r3
 80029b8:	4807      	ldr	r0, [pc, #28]	; (80029d8 <HAL_ETH_MspInit+0x148>)
 80029ba:	f7ff f873 	bl	8001aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80029be:	bf00      	nop
 80029c0:	3738      	adds	r7, #56	; 0x38
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40028000 	.word	0x40028000
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020800 	.word	0x40020800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400

080029dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80029e8:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <low_level_init+0x134>)
 80029ea:	4a4a      	ldr	r2, [pc, #296]	; (8002b14 <low_level_init+0x138>)
 80029ec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80029ee:	4b48      	ldr	r3, [pc, #288]	; (8002b10 <low_level_init+0x134>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80029f4:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <low_level_init+0x134>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80029fa:	2300      	movs	r3, #0
 80029fc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002a02:	23e1      	movs	r3, #225	; 0xe1
 8002a04:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002a06:	2300      	movs	r3, #0
 8002a08:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002a12:	4a3f      	ldr	r2, [pc, #252]	; (8002b10 <low_level_init+0x134>)
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <low_level_init+0x134>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <low_level_init+0x134>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002a26:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <low_level_init+0x134>)
 8002a28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a2c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002a2e:	4838      	ldr	r0, [pc, #224]	; (8002b10 <low_level_init+0x134>)
 8002a30:	f7fe f928 	bl	8000c84 <HAL_ETH_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d108      	bne.n	8002a50 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002a50:	2304      	movs	r3, #4
 8002a52:	4a31      	ldr	r2, [pc, #196]	; (8002b18 <low_level_init+0x13c>)
 8002a54:	4931      	ldr	r1, [pc, #196]	; (8002b1c <low_level_init+0x140>)
 8002a56:	482e      	ldr	r0, [pc, #184]	; (8002b10 <low_level_init+0x134>)
 8002a58:	f7fe fab2 	bl	8000fc0 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	4a30      	ldr	r2, [pc, #192]	; (8002b20 <low_level_init+0x144>)
 8002a60:	4930      	ldr	r1, [pc, #192]	; (8002b24 <low_level_init+0x148>)
 8002a62:	482b      	ldr	r0, [pc, #172]	; (8002b10 <low_level_init+0x134>)
 8002a64:	f7fe fb15 	bl	8001092 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2206      	movs	r2, #6
 8002a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <low_level_init+0x134>)
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <low_level_init+0x134>)
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	785a      	ldrb	r2, [r3, #1]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002a88:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <low_level_init+0x134>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	789a      	ldrb	r2, [r3, #2]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002a94:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <low_level_init+0x134>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	78da      	ldrb	r2, [r3, #3]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <low_level_init+0x134>)
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	791a      	ldrb	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002aac:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <low_level_init+0x134>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	795a      	ldrb	r2, [r3, #5]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002abe:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ac6:	f043 030a 	orr.w	r3, r3, #10
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8002ad2:	480f      	ldr	r0, [pc, #60]	; (8002b10 <low_level_init+0x134>)
 8002ad4:	f7fe fd02 	bl	80014dc <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	461a      	mov	r2, r3
 8002ade:	211d      	movs	r1, #29
 8002ae0:	480b      	ldr	r0, [pc, #44]	; (8002b10 <low_level_init+0x134>)
 8002ae2:	f7fe fc2d 	bl	8001340 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f043 030b 	orr.w	r3, r3, #11
 8002aec:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	461a      	mov	r2, r3
 8002af2:	211d      	movs	r1, #29
 8002af4:	4806      	ldr	r0, [pc, #24]	; (8002b10 <low_level_init+0x134>)
 8002af6:	f7fe fc8b 	bl	8001410 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	461a      	mov	r2, r3
 8002b00:	211d      	movs	r1, #29
 8002b02:	4803      	ldr	r0, [pc, #12]	; (8002b10 <low_level_init+0x134>)
 8002b04:	f7fe fc1c 	bl	8001340 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8002b08:	bf00      	nop
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20001b2c 	.word	0x20001b2c
 8002b14:	40028000 	.word	0x40028000
 8002b18:	20001b74 	.word	0x20001b74
 8002b1c:	2000025c 	.word	0x2000025c
 8002b20:	200002dc 	.word	0x200002dc
 8002b24:	20001aac 	.word	0x20001aac

08002b28 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8002b32:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <low_level_output+0x138>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8002b4a:	4b45      	ldr	r3, [pc, #276]	; (8002c60 <low_level_output+0x138>)
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	e05a      	b.n	8002c10 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da03      	bge.n	8002b6a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8002b62:	23f8      	movs	r3, #248	; 0xf8
 8002b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8002b68:	e05c      	b.n	8002c24 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	895b      	ldrh	r3, [r3, #10]
 8002b6e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002b74:	e02f      	b.n	8002bd6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	18d0      	adds	r0, r2, r3
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	18d1      	adds	r1, r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f009 fcae 	bl	800c4ee <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da03      	bge.n	8002ba8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8002ba0:	23f8      	movs	r3, #248	; 0xf8
 8002ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8002ba6:	e03d      	b.n	8002c24 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8002bb8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002bc4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002bd0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d8c8      	bhi.n	8002b76 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	18d0      	adds	r0, r2, r3
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f009 fc7a 	bl	800c4ee <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1a1      	bne.n	8002b5a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8002c16:	6979      	ldr	r1, [r7, #20]
 8002c18:	4811      	ldr	r0, [pc, #68]	; (8002c60 <low_level_output+0x138>)
 8002c1a:	f7fe faa7 	bl	800116c <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <low_level_output+0x138>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c2c:	3314      	adds	r3, #20
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00d      	beq.n	8002c54 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <low_level_output+0x138>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c40:	3314      	adds	r3, #20
 8002c42:	2220      	movs	r2, #32
 8002c44:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <low_level_output+0x138>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4e:	3304      	adds	r3, #4
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8002c54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20001b2c 	.word	0x20001b2c

08002c64 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <ethernetif_init+0x1c>
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <ethernetif_init+0x48>)
 8002c74:	f240 2207 	movw	r2, #519	; 0x207
 8002c78:	490d      	ldr	r1, [pc, #52]	; (8002cb0 <ethernetif_init+0x4c>)
 8002c7a:	480e      	ldr	r0, [pc, #56]	; (8002cb4 <ethernetif_init+0x50>)
 8002c7c:	f009 fc4a 	bl	800c514 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2273      	movs	r2, #115	; 0x73
 8002c84:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2274      	movs	r2, #116	; 0x74
 8002c8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <ethernetif_init+0x54>)
 8002c94:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <ethernetif_init+0x58>)
 8002c9a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fe9d 	bl	80029dc <low_level_init>

  return ERR_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	0800d36c 	.word	0x0800d36c
 8002cb0:	0800d388 	.word	0x0800d388
 8002cb4:	0800d398 	.word	0x0800d398
 8002cb8:	0800a7ad 	.word	0x0800a7ad
 8002cbc:	08002b29 	.word	0x08002b29

08002cc0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002cc4:	f7fd feca 	bl	8000a5c <HAL_GetTick>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	b21a      	sxth	r2, r3
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	b29b      	uxth	r3, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	061a      	lsls	r2, r3, #24
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0e1b      	lsrs	r3, r3, #24
 8002d1c:	4313      	orrs	r3, r2
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8002d34:	f000 f8d4 	bl	8002ee0 <mem_init>
  memp_init();
 8002d38:	f000 fbda 	bl	80034f0 <memp_init>
  pbuf_init();
  netif_init();
 8002d3c:	f000 fc92 	bl	8003664 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8002d40:	f006 ff2e 	bl	8009ba0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8002d44:	f001 fccc 	bl	80046e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8002d48:	f006 fee4 	bl	8009b14 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <ptr_to_mem+0x20>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	4413      	add	r3, r2
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000098 	.word	0x20000098

08002d78 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <mem_to_ptr+0x20>)
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	b29b      	uxth	r3, r3
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000098 	.word	0x20000098

08002d9c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8002da4:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <plug_holes+0x120>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d206      	bcs.n	8002dbc <plug_holes+0x20>
 8002dae:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <plug_holes+0x124>)
 8002db0:	f240 12df 	movw	r2, #479	; 0x1df
 8002db4:	4943      	ldr	r1, [pc, #268]	; (8002ec4 <plug_holes+0x128>)
 8002db6:	4844      	ldr	r0, [pc, #272]	; (8002ec8 <plug_holes+0x12c>)
 8002db8:	f009 fbac 	bl	800c514 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8002dbc:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <plug_holes+0x130>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d306      	bcc.n	8002dd4 <plug_holes+0x38>
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <plug_holes+0x124>)
 8002dc8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002dcc:	4940      	ldr	r1, [pc, #256]	; (8002ed0 <plug_holes+0x134>)
 8002dce:	483e      	ldr	r0, [pc, #248]	; (8002ec8 <plug_holes+0x12c>)
 8002dd0:	f009 fba0 	bl	800c514 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	791b      	ldrb	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d006      	beq.n	8002dea <plug_holes+0x4e>
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <plug_holes+0x124>)
 8002dde:	f240 12e1 	movw	r2, #481	; 0x1e1
 8002de2:	493c      	ldr	r1, [pc, #240]	; (8002ed4 <plug_holes+0x138>)
 8002de4:	4838      	ldr	r0, [pc, #224]	; (8002ec8 <plug_holes+0x12c>)
 8002de6:	f009 fb95 	bl	800c514 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002df2:	d906      	bls.n	8002e02 <plug_holes+0x66>
 8002df4:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <plug_holes+0x124>)
 8002df6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8002dfa:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <plug_holes+0x13c>)
 8002dfc:	4832      	ldr	r0, [pc, #200]	; (8002ec8 <plug_holes+0x12c>)
 8002dfe:	f009 fb89 	bl	800c514 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ffa4 	bl	8002d54 <ptr_to_mem>
 8002e0c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d024      	beq.n	8002e60 <plug_holes+0xc4>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d120      	bne.n	8002e60 <plug_holes+0xc4>
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <plug_holes+0x130>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d01b      	beq.n	8002e60 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8002e28:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <plug_holes+0x140>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d102      	bne.n	8002e38 <plug_holes+0x9c>
      lfree = mem;
 8002e32:	4a2a      	ldr	r2, [pc, #168]	; (8002edc <plug_holes+0x140>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002e48:	d00a      	beq.n	8002e60 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff80 	bl	8002d54 <ptr_to_mem>
 8002e54:	4604      	mov	r4, r0
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ff8e 	bl	8002d78 <mem_to_ptr>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	885b      	ldrh	r3, [r3, #2]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff75 	bl	8002d54 <ptr_to_mem>
 8002e6a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d01f      	beq.n	8002eb4 <plug_holes+0x118>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	791b      	ldrb	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11b      	bne.n	8002eb4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <plug_holes+0x140>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d102      	bne.n	8002e8c <plug_holes+0xf0>
      lfree = pmem;
 8002e86:	4a15      	ldr	r2, [pc, #84]	; (8002edc <plug_holes+0x140>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	881a      	ldrh	r2, [r3, #0]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002e9c:	d00a      	beq.n	8002eb4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff56 	bl	8002d54 <ptr_to_mem>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	68b8      	ldr	r0, [r7, #8]
 8002eac:	f7ff ff64 	bl	8002d78 <mem_to_ptr>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd90      	pop	{r4, r7, pc}
 8002ebc:	20000098 	.word	0x20000098
 8002ec0:	0800d3c0 	.word	0x0800d3c0
 8002ec4:	0800d3f0 	.word	0x0800d3f0
 8002ec8:	0800d408 	.word	0x0800d408
 8002ecc:	2000009c 	.word	0x2000009c
 8002ed0:	0800d430 	.word	0x0800d430
 8002ed4:	0800d44c 	.word	0x0800d44c
 8002ed8:	0800d468 	.word	0x0800d468
 8002edc:	200000a0 	.word	0x200000a0

08002ee0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <mem_init+0x68>)
 8002ee8:	3303      	adds	r3, #3
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <mem_init+0x6c>)
 8002ef2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8002ef4:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <mem_init+0x6c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002f00:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8002f0e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8002f12:	f7ff ff1f 	bl	8002d54 <ptr_to_mem>
 8002f16:	4602      	mov	r2, r0
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <mem_init+0x70>)
 8002f1a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <mem_init+0x70>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2201      	movs	r2, #1
 8002f22:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <mem_init+0x70>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002f2c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <mem_init+0x70>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002f36:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <mem_init+0x6c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <mem_init+0x74>)
 8002f3e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	2000335c 	.word	0x2000335c
 8002f4c:	20000098 	.word	0x20000098
 8002f50:	2000009c 	.word	0x2000009c
 8002f54:	200000a0 	.word	0x200000a0

08002f58 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ff09 	bl	8002d78 <mem_to_ptr>
 8002f66:	4603      	mov	r3, r0
 8002f68:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fef0 	bl	8002d54 <ptr_to_mem>
 8002f74:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	885b      	ldrh	r3, [r3, #2]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff feea 	bl	8002d54 <ptr_to_mem>
 8002f80:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002f8a:	d818      	bhi.n	8002fbe <mem_link_valid+0x66>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	885b      	ldrh	r3, [r3, #2]
 8002f90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002f94:	d813      	bhi.n	8002fbe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8002f9a:	8afa      	ldrh	r2, [r7, #22]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d004      	beq.n	8002faa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	8afa      	ldrh	r2, [r7, #22]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d109      	bne.n	8002fbe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <mem_link_valid+0x74>)
 8002fac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d006      	beq.n	8002fc2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	885b      	ldrh	r3, [r3, #2]
 8002fb8:	8afa      	ldrh	r2, [r7, #22]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <mem_link_valid+0x6a>
    return 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <mem_link_valid+0x6c>
  }
  return 1;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	2000009c 	.word	0x2000009c

08002fd0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d04c      	beq.n	8003078 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <mem_free+0xb0>)
 8002fea:	f240 2273 	movw	r2, #627	; 0x273
 8002fee:	4925      	ldr	r1, [pc, #148]	; (8003084 <mem_free+0xb4>)
 8002ff0:	4825      	ldr	r0, [pc, #148]	; (8003088 <mem_free+0xb8>)
 8002ff2:	f009 fa8f 	bl	800c514 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8002ff6:	e040      	b.n	800307a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b08      	subs	r3, #8
 8002ffc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <mem_free+0xbc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d306      	bcc.n	8003016 <mem_free+0x46>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f103 020c 	add.w	r2, r3, #12
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <mem_free+0xc0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d907      	bls.n	8003026 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <mem_free+0xb0>)
 8003018:	f240 227f 	movw	r2, #639	; 0x27f
 800301c:	491d      	ldr	r1, [pc, #116]	; (8003094 <mem_free+0xc4>)
 800301e:	481a      	ldr	r0, [pc, #104]	; (8003088 <mem_free+0xb8>)
 8003020:	f009 fa78 	bl	800c514 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003024:	e029      	b.n	800307a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	791b      	ldrb	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <mem_free+0xb0>)
 8003030:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003034:	4918      	ldr	r1, [pc, #96]	; (8003098 <mem_free+0xc8>)
 8003036:	4814      	ldr	r0, [pc, #80]	; (8003088 <mem_free+0xb8>)
 8003038:	f009 fa6c 	bl	800c514 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800303c:	e01d      	b.n	800307a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff ff8a 	bl	8002f58 <mem_link_valid>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <mem_free+0xb0>)
 800304c:	f240 2295 	movw	r2, #661	; 0x295
 8003050:	4912      	ldr	r1, [pc, #72]	; (800309c <mem_free+0xcc>)
 8003052:	480d      	ldr	r0, [pc, #52]	; (8003088 <mem_free+0xb8>)
 8003054:	f009 fa5e 	bl	800c514 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003058:	e00f      	b.n	800307a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <mem_free+0xd0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	429a      	cmp	r2, r3
 8003068:	d202      	bcs.n	8003070 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800306a:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <mem_free+0xd0>)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff fe93 	bl	8002d9c <plug_holes>
 8003076:	e000      	b.n	800307a <mem_free+0xaa>
    return;
 8003078:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	0800d3c0 	.word	0x0800d3c0
 8003084:	0800d494 	.word	0x0800d494
 8003088:	0800d408 	.word	0x0800d408
 800308c:	20000098 	.word	0x20000098
 8003090:	2000009c 	.word	0x2000009c
 8003094:	0800d4b8 	.word	0x0800d4b8
 8003098:	0800d4d4 	.word	0x0800d4d4
 800309c:	0800d4fc 	.word	0x0800d4fc
 80030a0:	200000a0 	.word	0x200000a0

080030a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80030b0:	887b      	ldrh	r3, [r7, #2]
 80030b2:	3303      	adds	r3, #3
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80030bc:	8bfb      	ldrh	r3, [r7, #30]
 80030be:	2b0b      	cmp	r3, #11
 80030c0:	d801      	bhi.n	80030c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80030c2:	230c      	movs	r3, #12
 80030c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80030c6:	8bfb      	ldrh	r3, [r7, #30]
 80030c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80030cc:	d803      	bhi.n	80030d6 <mem_trim+0x32>
 80030ce:	8bfa      	ldrh	r2, [r7, #30]
 80030d0:	887b      	ldrh	r3, [r7, #2]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d201      	bcs.n	80030da <mem_trim+0x36>
    return NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e0cc      	b.n	8003274 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80030da:	4b68      	ldr	r3, [pc, #416]	; (800327c <mem_trim+0x1d8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d304      	bcc.n	80030ee <mem_trim+0x4a>
 80030e4:	4b66      	ldr	r3, [pc, #408]	; (8003280 <mem_trim+0x1dc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d306      	bcc.n	80030fc <mem_trim+0x58>
 80030ee:	4b65      	ldr	r3, [pc, #404]	; (8003284 <mem_trim+0x1e0>)
 80030f0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80030f4:	4964      	ldr	r1, [pc, #400]	; (8003288 <mem_trim+0x1e4>)
 80030f6:	4865      	ldr	r0, [pc, #404]	; (800328c <mem_trim+0x1e8>)
 80030f8:	f009 fa0c 	bl	800c514 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80030fc:	4b5f      	ldr	r3, [pc, #380]	; (800327c <mem_trim+0x1d8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d304      	bcc.n	8003110 <mem_trim+0x6c>
 8003106:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <mem_trim+0x1dc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d301      	bcc.n	8003114 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	e0af      	b.n	8003274 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b08      	subs	r3, #8
 8003118:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800311a:	69b8      	ldr	r0, [r7, #24]
 800311c:	f7ff fe2c 	bl	8002d78 <mem_to_ptr>
 8003120:	4603      	mov	r3, r0
 8003122:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	881a      	ldrh	r2, [r3, #0]
 8003128:	8afb      	ldrh	r3, [r7, #22]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b08      	subs	r3, #8
 8003130:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003132:	8bfa      	ldrh	r2, [r7, #30]
 8003134:	8abb      	ldrh	r3, [r7, #20]
 8003136:	429a      	cmp	r2, r3
 8003138:	d906      	bls.n	8003148 <mem_trim+0xa4>
 800313a:	4b52      	ldr	r3, [pc, #328]	; (8003284 <mem_trim+0x1e0>)
 800313c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003140:	4953      	ldr	r1, [pc, #332]	; (8003290 <mem_trim+0x1ec>)
 8003142:	4852      	ldr	r0, [pc, #328]	; (800328c <mem_trim+0x1e8>)
 8003144:	f009 f9e6 	bl	800c514 <iprintf>
  if (newsize > size) {
 8003148:	8bfa      	ldrh	r2, [r7, #30]
 800314a:	8abb      	ldrh	r3, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	d901      	bls.n	8003154 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	e08f      	b.n	8003274 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003154:	8bfa      	ldrh	r2, [r7, #30]
 8003156:	8abb      	ldrh	r3, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	d101      	bne.n	8003160 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	e089      	b.n	8003274 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fdf5 	bl	8002d54 <ptr_to_mem>
 800316a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	791b      	ldrb	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d13f      	bne.n	80031f4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800317c:	d106      	bne.n	800318c <mem_trim+0xe8>
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <mem_trim+0x1e0>)
 8003180:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003184:	4943      	ldr	r1, [pc, #268]	; (8003294 <mem_trim+0x1f0>)
 8003186:	4841      	ldr	r0, [pc, #260]	; (800328c <mem_trim+0x1e8>)
 8003188:	f009 f9c4 	bl	800c514 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003192:	8afa      	ldrh	r2, [r7, #22]
 8003194:	8bfb      	ldrh	r3, [r7, #30]
 8003196:	4413      	add	r3, r2
 8003198:	b29b      	uxth	r3, r3
 800319a:	3308      	adds	r3, #8
 800319c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800319e:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <mem_trim+0x1f4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d106      	bne.n	80031b6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80031a8:	89fb      	ldrh	r3, [r7, #14]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fdd2 	bl	8002d54 <ptr_to_mem>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <mem_trim+0x1f4>)
 80031b4:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fdcb 	bl	8002d54 <ptr_to_mem>
 80031be:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2200      	movs	r2, #0
 80031c4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	89ba      	ldrh	r2, [r7, #12]
 80031ca:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	8afa      	ldrh	r2, [r7, #22]
 80031d0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	89fa      	ldrh	r2, [r7, #14]
 80031d6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80031e0:	d047      	beq.n	8003272 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fdb4 	bl	8002d54 <ptr_to_mem>
 80031ec:	4602      	mov	r2, r0
 80031ee:	89fb      	ldrh	r3, [r7, #14]
 80031f0:	8053      	strh	r3, [r2, #2]
 80031f2:	e03e      	b.n	8003272 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80031f4:	8bfb      	ldrh	r3, [r7, #30]
 80031f6:	f103 0214 	add.w	r2, r3, #20
 80031fa:	8abb      	ldrh	r3, [r7, #20]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d838      	bhi.n	8003272 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003200:	8afa      	ldrh	r2, [r7, #22]
 8003202:	8bfb      	ldrh	r3, [r7, #30]
 8003204:	4413      	add	r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	3308      	adds	r3, #8
 800320a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003214:	d106      	bne.n	8003224 <mem_trim+0x180>
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <mem_trim+0x1e0>)
 8003218:	f240 3216 	movw	r2, #790	; 0x316
 800321c:	491d      	ldr	r1, [pc, #116]	; (8003294 <mem_trim+0x1f0>)
 800321e:	481b      	ldr	r0, [pc, #108]	; (800328c <mem_trim+0x1e8>)
 8003220:	f009 f978 	bl	800c514 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003224:	89fb      	ldrh	r3, [r7, #14]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fd94 	bl	8002d54 <ptr_to_mem>
 800322c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <mem_trim+0x1f4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	429a      	cmp	r2, r3
 8003236:	d202      	bcs.n	800323e <mem_trim+0x19a>
      lfree = mem2;
 8003238:	4a17      	ldr	r2, [pc, #92]	; (8003298 <mem_trim+0x1f4>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2200      	movs	r2, #0
 8003242:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	881a      	ldrh	r2, [r3, #0]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	8afa      	ldrh	r2, [r7, #22]
 8003250:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	89fa      	ldrh	r2, [r7, #14]
 8003256:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003260:	d007      	beq.n	8003272 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fd74 	bl	8002d54 <ptr_to_mem>
 800326c:	4602      	mov	r2, r0
 800326e:	89fb      	ldrh	r3, [r7, #14]
 8003270:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003272:	687b      	ldr	r3, [r7, #4]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000098 	.word	0x20000098
 8003280:	2000009c 	.word	0x2000009c
 8003284:	0800d3c0 	.word	0x0800d3c0
 8003288:	0800d530 	.word	0x0800d530
 800328c:	0800d408 	.word	0x0800d408
 8003290:	0800d548 	.word	0x0800d548
 8003294:	0800d568 	.word	0x0800d568
 8003298:	200000a0 	.word	0x200000a0

0800329c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <mem_malloc+0x14>
    return NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e0d9      	b.n	8003464 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	3303      	adds	r3, #3
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80032bc:	8bbb      	ldrh	r3, [r7, #28]
 80032be:	2b0b      	cmp	r3, #11
 80032c0:	d801      	bhi.n	80032c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80032c2:	230c      	movs	r3, #12
 80032c4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80032c6:	8bbb      	ldrh	r3, [r7, #28]
 80032c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80032cc:	d803      	bhi.n	80032d6 <mem_malloc+0x3a>
 80032ce:	8bba      	ldrh	r2, [r7, #28]
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d201      	bcs.n	80032da <mem_malloc+0x3e>
    return NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e0c4      	b.n	8003464 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80032da:	4b64      	ldr	r3, [pc, #400]	; (800346c <mem_malloc+0x1d0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fd4a 	bl	8002d78 <mem_to_ptr>
 80032e4:	4603      	mov	r3, r0
 80032e6:	83fb      	strh	r3, [r7, #30]
 80032e8:	e0b4      	b.n	8003454 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80032ea:	8bfb      	ldrh	r3, [r7, #30]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fd31 	bl	8002d54 <ptr_to_mem>
 80032f2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	791b      	ldrb	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 80a4 	bne.w	8003446 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	8bfb      	ldrh	r3, [r7, #30]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f1a3 0208 	sub.w	r2, r3, #8
 800330c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800330e:	429a      	cmp	r2, r3
 8003310:	f0c0 8099 	bcc.w	8003446 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	8bfb      	ldrh	r3, [r7, #30]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f1a3 0208 	sub.w	r2, r3, #8
 8003322:	8bbb      	ldrh	r3, [r7, #28]
 8003324:	3314      	adds	r3, #20
 8003326:	429a      	cmp	r2, r3
 8003328:	d333      	bcc.n	8003392 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800332a:	8bfa      	ldrh	r2, [r7, #30]
 800332c:	8bbb      	ldrh	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	3308      	adds	r3, #8
 8003334:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003336:	8a7b      	ldrh	r3, [r7, #18]
 8003338:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800333c:	d106      	bne.n	800334c <mem_malloc+0xb0>
 800333e:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <mem_malloc+0x1d4>)
 8003340:	f240 3287 	movw	r2, #903	; 0x387
 8003344:	494b      	ldr	r1, [pc, #300]	; (8003474 <mem_malloc+0x1d8>)
 8003346:	484c      	ldr	r0, [pc, #304]	; (8003478 <mem_malloc+0x1dc>)
 8003348:	f009 f8e4 	bl	800c514 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800334c:	8a7b      	ldrh	r3, [r7, #18]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fd00 	bl	8002d54 <ptr_to_mem>
 8003354:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	881a      	ldrh	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8bfa      	ldrh	r2, [r7, #30]
 8003368:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	8a7a      	ldrh	r2, [r7, #18]
 800336e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2201      	movs	r2, #1
 8003374:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800337e:	d00b      	beq.n	8003398 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fce5 	bl	8002d54 <ptr_to_mem>
 800338a:	4602      	mov	r2, r0
 800338c:	8a7b      	ldrh	r3, [r7, #18]
 800338e:	8053      	strh	r3, [r2, #2]
 8003390:	e002      	b.n	8003398 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2201      	movs	r2, #1
 8003396:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <mem_malloc+0x1d0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d127      	bne.n	80033f2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80033a2:	4b32      	ldr	r3, [pc, #200]	; (800346c <mem_malloc+0x1d0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80033a8:	e005      	b.n	80033b6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fcd0 	bl	8002d54 <ptr_to_mem>
 80033b4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	791b      	ldrb	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <mem_malloc+0x12c>
 80033be:	4b2f      	ldr	r3, [pc, #188]	; (800347c <mem_malloc+0x1e0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1f0      	bne.n	80033aa <mem_malloc+0x10e>
          }
          lfree = cur;
 80033c8:	4a28      	ldr	r2, [pc, #160]	; (800346c <mem_malloc+0x1d0>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80033ce:	4b27      	ldr	r3, [pc, #156]	; (800346c <mem_malloc+0x1d0>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b2a      	ldr	r3, [pc, #168]	; (800347c <mem_malloc+0x1e0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d00b      	beq.n	80033f2 <mem_malloc+0x156>
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <mem_malloc+0x1d0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	791b      	ldrb	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d006      	beq.n	80033f2 <mem_malloc+0x156>
 80033e4:	4b22      	ldr	r3, [pc, #136]	; (8003470 <mem_malloc+0x1d4>)
 80033e6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80033ea:	4925      	ldr	r1, [pc, #148]	; (8003480 <mem_malloc+0x1e4>)
 80033ec:	4822      	ldr	r0, [pc, #136]	; (8003478 <mem_malloc+0x1dc>)
 80033ee:	f009 f891 	bl	800c514 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80033f2:	8bba      	ldrh	r2, [r7, #28]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	4413      	add	r3, r2
 80033f8:	3308      	adds	r3, #8
 80033fa:	4a20      	ldr	r2, [pc, #128]	; (800347c <mem_malloc+0x1e0>)
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	4293      	cmp	r3, r2
 8003400:	d906      	bls.n	8003410 <mem_malloc+0x174>
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <mem_malloc+0x1d4>)
 8003404:	f240 32ba 	movw	r2, #954	; 0x3ba
 8003408:	491e      	ldr	r1, [pc, #120]	; (8003484 <mem_malloc+0x1e8>)
 800340a:	481b      	ldr	r0, [pc, #108]	; (8003478 <mem_malloc+0x1dc>)
 800340c:	f009 f882 	bl	800c514 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <mem_malloc+0x18c>
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <mem_malloc+0x1d4>)
 800341c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8003420:	4919      	ldr	r1, [pc, #100]	; (8003488 <mem_malloc+0x1ec>)
 8003422:	4815      	ldr	r0, [pc, #84]	; (8003478 <mem_malloc+0x1dc>)
 8003424:	f009 f876 	bl	800c514 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <mem_malloc+0x1a4>
 8003432:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <mem_malloc+0x1d4>)
 8003434:	f240 32be 	movw	r2, #958	; 0x3be
 8003438:	4914      	ldr	r1, [pc, #80]	; (800348c <mem_malloc+0x1f0>)
 800343a:	480f      	ldr	r0, [pc, #60]	; (8003478 <mem_malloc+0x1dc>)
 800343c:	f009 f86a 	bl	800c514 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3308      	adds	r3, #8
 8003444:	e00e      	b.n	8003464 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003446:	8bfb      	ldrh	r3, [r7, #30]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fc83 	bl	8002d54 <ptr_to_mem>
 800344e:	4603      	mov	r3, r0
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003454:	8bfa      	ldrh	r2, [r7, #30]
 8003456:	8bbb      	ldrh	r3, [r7, #28]
 8003458:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800345c:	429a      	cmp	r2, r3
 800345e:	f4ff af44 	bcc.w	80032ea <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	200000a0 	.word	0x200000a0
 8003470:	0800d3c0 	.word	0x0800d3c0
 8003474:	0800d568 	.word	0x0800d568
 8003478:	0800d408 	.word	0x0800d408
 800347c:	2000009c 	.word	0x2000009c
 8003480:	0800d57c 	.word	0x0800d57c
 8003484:	0800d598 	.word	0x0800d598
 8003488:	0800d5c8 	.word	0x0800d5c8
 800348c:	0800d5f8 	.word	0x0800d5f8

08003490 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	3303      	adds	r3, #3
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e011      	b.n	80034d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4413      	add	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	885b      	ldrh	r3, [r3, #2]
 80034da:	461a      	mov	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4293      	cmp	r3, r2
 80034e0:	dbe7      	blt.n	80034b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80034f6:	2300      	movs	r3, #0
 80034f8:	80fb      	strh	r3, [r7, #6]
 80034fa:	e009      	b.n	8003510 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <memp_init+0x30>)
 8003500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ffc3 	bl	8003490 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	3301      	adds	r3, #1
 800350e:	80fb      	strh	r3, [r7, #6]
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d9f2      	bls.n	80034fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	0800fdc8 	.word	0x0800fdc8

08003524 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <do_memp_malloc_pool+0x38>
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <do_memp_malloc_pool+0x48>)
 8003550:	f240 1219 	movw	r2, #281	; 0x119
 8003554:	4906      	ldr	r1, [pc, #24]	; (8003570 <do_memp_malloc_pool+0x4c>)
 8003556:	4807      	ldr	r0, [pc, #28]	; (8003574 <do_memp_malloc_pool+0x50>)
 8003558:	f008 ffdc 	bl	800c514 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	e000      	b.n	8003562 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	0800d61c 	.word	0x0800d61c
 8003570:	0800d64c 	.word	0x0800d64c
 8003574:	0800d670 	.word	0x0800d670

08003578 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	2b08      	cmp	r3, #8
 8003586:	d908      	bls.n	800359a <memp_malloc+0x22>
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <memp_malloc+0x3c>)
 800358a:	f240 1257 	movw	r2, #343	; 0x157
 800358e:	490a      	ldr	r1, [pc, #40]	; (80035b8 <memp_malloc+0x40>)
 8003590:	480a      	ldr	r0, [pc, #40]	; (80035bc <memp_malloc+0x44>)
 8003592:	f008 ffbf 	bl	800c514 <iprintf>
 8003596:	2300      	movs	r3, #0
 8003598:	e008      	b.n	80035ac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <memp_malloc+0x48>)
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ffbe 	bl	8003524 <do_memp_malloc_pool>
 80035a8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	0800d61c 	.word	0x0800d61c
 80035b8:	0800d6ac 	.word	0x0800d6ac
 80035bc:	0800d670 	.word	0x0800d670
 80035c0:	0800fdc8 	.word	0x0800fdc8

080035c4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <do_memp_free_pool+0x22>
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <do_memp_free_pool+0x40>)
 80035da:	f240 126d 	movw	r2, #365	; 0x16d
 80035de:	490a      	ldr	r1, [pc, #40]	; (8003608 <do_memp_free_pool+0x44>)
 80035e0:	480a      	ldr	r0, [pc, #40]	; (800360c <do_memp_free_pool+0x48>)
 80035e2:	f008 ff97 	bl	800c514 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	0800d61c 	.word	0x0800d61c
 8003608:	0800d6cc 	.word	0x0800d6cc
 800360c:	0800d670 	.word	0x0800d670

08003610 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	2b08      	cmp	r3, #8
 8003620:	d907      	bls.n	8003632 <memp_free+0x22>
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <memp_free+0x44>)
 8003624:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003628:	490b      	ldr	r1, [pc, #44]	; (8003658 <memp_free+0x48>)
 800362a:	480c      	ldr	r0, [pc, #48]	; (800365c <memp_free+0x4c>)
 800362c:	f008 ff72 	bl	800c514 <iprintf>
 8003630:	e00c      	b.n	800364c <memp_free+0x3c>

  if (mem == NULL) {
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <memp_free+0x50>)
 800363c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ffbe 	bl	80035c4 <do_memp_free_pool>
 8003648:	e000      	b.n	800364c <memp_free+0x3c>
    return;
 800364a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	0800d61c 	.word	0x0800d61c
 8003658:	0800d6ec 	.word	0x0800d6ec
 800365c:	0800d670 	.word	0x0800d670
 8003660:	0800fdc8 	.word	0x0800fdc8

08003664 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <netif_add+0x26>
 8003688:	4b56      	ldr	r3, [pc, #344]	; (80037e4 <netif_add+0x170>)
 800368a:	f240 1227 	movw	r2, #295	; 0x127
 800368e:	4956      	ldr	r1, [pc, #344]	; (80037e8 <netif_add+0x174>)
 8003690:	4856      	ldr	r0, [pc, #344]	; (80037ec <netif_add+0x178>)
 8003692:	f008 ff3f 	bl	800c514 <iprintf>
 8003696:	2300      	movs	r3, #0
 8003698:	e09f      	b.n	80037da <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d108      	bne.n	80036b2 <netif_add+0x3e>
 80036a0:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <netif_add+0x170>)
 80036a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80036a6:	4952      	ldr	r1, [pc, #328]	; (80037f0 <netif_add+0x17c>)
 80036a8:	4850      	ldr	r0, [pc, #320]	; (80037ec <netif_add+0x178>)
 80036aa:	f008 ff33 	bl	800c514 <iprintf>
 80036ae:	2300      	movs	r3, #0
 80036b0:	e093      	b.n	80037da <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80036b8:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <netif_add+0x180>)
 80036ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80036c2:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <netif_add+0x180>)
 80036c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80036cc:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <netif_add+0x180>)
 80036ce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a44      	ldr	r2, [pc, #272]	; (80037f8 <netif_add+0x184>)
 80036e6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a3a      	ldr	r2, [r7, #32]
 80036fa:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80036fc:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <netif_add+0x188>)
 80036fe:	781a      	ldrb	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f914 	bl	8003940 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	4798      	blx	r3
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <netif_add+0xb4>
    return NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	e058      	b.n	80037da <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800372e:	2bff      	cmp	r3, #255	; 0xff
 8003730:	d103      	bne.n	800373a <netif_add+0xc6>
        netif->num = 0;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800373e:	4b30      	ldr	r3, [pc, #192]	; (8003800 <netif_add+0x18c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e02b      	b.n	800379e <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	429a      	cmp	r2, r3
 800374c:	d106      	bne.n	800375c <netif_add+0xe8>
 800374e:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <netif_add+0x170>)
 8003750:	f240 128b 	movw	r2, #395	; 0x18b
 8003754:	492b      	ldr	r1, [pc, #172]	; (8003804 <netif_add+0x190>)
 8003756:	4825      	ldr	r0, [pc, #148]	; (80037ec <netif_add+0x178>)
 8003758:	f008 fedc 	bl	800c514 <iprintf>
        num_netifs++;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3301      	adds	r3, #1
 8003760:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2bff      	cmp	r3, #255	; 0xff
 8003766:	dd06      	ble.n	8003776 <netif_add+0x102>
 8003768:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <netif_add+0x170>)
 800376a:	f240 128d 	movw	r2, #397	; 0x18d
 800376e:	4926      	ldr	r1, [pc, #152]	; (8003808 <netif_add+0x194>)
 8003770:	481e      	ldr	r0, [pc, #120]	; (80037ec <netif_add+0x178>)
 8003772:	f008 fecf 	bl	800c514 <iprintf>
        if (netif2->num == netif->num) {
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003782:	429a      	cmp	r2, r3
 8003784:	d108      	bne.n	8003798 <netif_add+0x124>
          netif->num++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800378c:	3301      	adds	r3, #1
 800378e:	b2da      	uxtb	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8003796:	e005      	b.n	80037a4 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1d0      	bne.n	8003746 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1be      	bne.n	8003728 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80037b0:	2bfe      	cmp	r3, #254	; 0xfe
 80037b2:	d103      	bne.n	80037bc <netif_add+0x148>
    netif_num = 0;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <netif_add+0x188>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e006      	b.n	80037ca <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80037c2:	3301      	adds	r3, #1
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <netif_add+0x188>)
 80037c8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <netif_add+0x18c>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80037d2:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <netif_add+0x18c>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80037d8:	68fb      	ldr	r3, [r7, #12]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	0800d708 	.word	0x0800d708
 80037e8:	0800d79c 	.word	0x0800d79c
 80037ec:	0800d758 	.word	0x0800d758
 80037f0:	0800d7b8 	.word	0x0800d7b8
 80037f4:	0800fe2c 	.word	0x0800fe2c
 80037f8:	08003b31 	.word	0x08003b31
 80037fc:	200000c8 	.word	0x200000c8
 8003800:	20006878 	.word	0x20006878
 8003804:	0800d7dc 	.word	0x0800d7dc
 8003808:	0800d7f0 	.word	0x0800d7f0

0800380c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f002 fa9d 	bl	8005d58 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f006 fb47 	bl	8009eb4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <netif_do_set_ipaddr+0x20>
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <netif_do_set_ipaddr+0x88>)
 8003844:	f240 12cb 	movw	r2, #459	; 0x1cb
 8003848:	491c      	ldr	r1, [pc, #112]	; (80038bc <netif_do_set_ipaddr+0x8c>)
 800384a:	481d      	ldr	r0, [pc, #116]	; (80038c0 <netif_do_set_ipaddr+0x90>)
 800384c:	f008 fe62 	bl	800c514 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <netif_do_set_ipaddr+0x34>
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <netif_do_set_ipaddr+0x88>)
 8003858:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800385c:	4917      	ldr	r1, [pc, #92]	; (80038bc <netif_do_set_ipaddr+0x8c>)
 800385e:	4818      	ldr	r0, [pc, #96]	; (80038c0 <netif_do_set_ipaddr+0x90>)
 8003860:	f008 fe58 	bl	800c514 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3304      	adds	r3, #4
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d01c      	beq.n	80038ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3304      	adds	r3, #4
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8003882:	f107 0314 	add.w	r3, r7, #20
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ffbf 	bl	800380c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <netif_do_set_ipaddr+0x6a>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	e000      	b.n	800389c <netif_do_set_ipaddr+0x6c>
 800389a:	2300      	movs	r3, #0
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80038a0:	2101      	movs	r1, #1
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f8d2 	bl	8003a4c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	0800d708 	.word	0x0800d708
 80038bc:	0800d820 	.word	0x0800d820
 80038c0:	0800d758 	.word	0x0800d758

080038c4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3308      	adds	r3, #8
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d00a      	beq.n	80038f4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <netif_do_set_netmask+0x26>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	e000      	b.n	80038ec <netif_do_set_netmask+0x28>
 80038ea:	2300      	movs	r3, #0
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	330c      	adds	r3, #12
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d00a      	beq.n	8003932 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <netif_do_set_gw+0x26>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e000      	b.n	800392a <netif_do_set_gw+0x28>
 8003928:	2300      	movs	r3, #0
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800395c:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <netif_set_addr+0x90>)
 800395e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8003966:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <netif_set_addr+0x90>)
 8003968:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8003970:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <netif_set_addr+0x90>)
 8003972:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <netif_set_addr+0x42>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <netif_set_addr+0x46>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <netif_set_addr+0x48>
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  if (remove) {
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003990:	f107 0310 	add.w	r3, r7, #16
 8003994:	461a      	mov	r2, r3
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff ff49 	bl	8003830 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff ff8e 	bl	80038c4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	6839      	ldr	r1, [r7, #0]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff ffa8 	bl	8003902 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	461a      	mov	r2, r3
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff ff35 	bl	8003830 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80039c6:	bf00      	nop
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	0800fe2c 	.word	0x0800fe2c

080039d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <netif_set_default+0x1c>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	2000687c 	.word	0x2000687c

080039f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <netif_set_up+0x1e>
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <netif_set_up+0x4c>)
 8003a04:	f44f 7254 	mov.w	r2, #848	; 0x350
 8003a08:	490e      	ldr	r1, [pc, #56]	; (8003a44 <netif_set_up+0x50>)
 8003a0a:	480f      	ldr	r0, [pc, #60]	; (8003a48 <netif_set_up+0x54>)
 8003a0c:	f008 fd82 	bl	800c514 <iprintf>
 8003a10:	e013      	b.n	8003a3a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10c      	bne.n	8003a3a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8003a32:	2103      	movs	r1, #3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f809 	bl	8003a4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	0800d708 	.word	0x0800d708
 8003a44:	0800d890 	.word	0x0800d890
 8003a48:	0800d758 	.word	0x0800d758

08003a4c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <netif_issue_reports+0x20>
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <netif_issue_reports+0x74>)
 8003a60:	f240 326d 	movw	r2, #877	; 0x36d
 8003a64:	4917      	ldr	r1, [pc, #92]	; (8003ac4 <netif_issue_reports+0x78>)
 8003a66:	4818      	ldr	r0, [pc, #96]	; (8003ac8 <netif_issue_reports+0x7c>)
 8003a68:	f008 fd54 	bl	800c514 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01e      	beq.n	8003ab8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a80:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d017      	beq.n	8003ab8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d013      	beq.n	8003aba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f007 f969 	bl	800ad88 <etharp_request>
 8003ab6:	e000      	b.n	8003aba <netif_issue_reports+0x6e>
    return;
 8003ab8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	0800d708 	.word	0x0800d708
 8003ac4:	0800d8ac 	.word	0x0800d8ac
 8003ac8:	0800d758 	.word	0x0800d758

08003acc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <netif_set_down+0x1e>
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <netif_set_down+0x58>)
 8003adc:	f240 329b 	movw	r2, #923	; 0x39b
 8003ae0:	4911      	ldr	r1, [pc, #68]	; (8003b28 <netif_set_down+0x5c>)
 8003ae2:	4812      	ldr	r0, [pc, #72]	; (8003b2c <netif_set_down+0x60>)
 8003ae4:	f008 fd16 	bl	800c514 <iprintf>
 8003ae8:	e019      	b.n	8003b1e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d012      	beq.n	8003b1e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f006 fcf3 	bl	800a504 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0800d708 	.word	0x0800d708
 8003b28:	0800d8d0 	.word	0x0800d8d0
 8003b2c:	0800d758 	.word	0x0800d758

08003b30 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8003b3c:	f06f 030b 	mvn.w	r3, #11
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <netif_get_by_index+0x48>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e00c      	b.n	8003b7e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	79fa      	ldrb	r2, [r7, #7]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d101      	bne.n	8003b78 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	e006      	b.n	8003b86 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ef      	bne.n	8003b64 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20006878 	.word	0x20006878

08003b98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <pbuf_pool_is_empty+0x14>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	20006880 	.word	0x20006880

08003bb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	80fb      	strh	r3, [r7, #6]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	88fa      	ldrh	r2, [r7, #6]
 8003bd6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	88ba      	ldrh	r2, [r7, #4]
 8003bdc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8003bde:	8b3b      	ldrh	r3, [r7, #24]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	7f3a      	ldrb	r2, [r7, #28]
 8003bea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	73da      	strb	r2, [r3, #15]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08c      	sub	sp, #48	; 0x30
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	80bb      	strh	r3, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	2b41      	cmp	r3, #65	; 0x41
 8003c1e:	d00b      	beq.n	8003c38 <pbuf_alloc+0x34>
 8003c20:	2b41      	cmp	r3, #65	; 0x41
 8003c22:	dc02      	bgt.n	8003c2a <pbuf_alloc+0x26>
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d007      	beq.n	8003c38 <pbuf_alloc+0x34>
 8003c28:	e0c2      	b.n	8003db0 <pbuf_alloc+0x1ac>
 8003c2a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8003c2e:	d00b      	beq.n	8003c48 <pbuf_alloc+0x44>
 8003c30:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8003c34:	d070      	beq.n	8003d18 <pbuf_alloc+0x114>
 8003c36:	e0bb      	b.n	8003db0 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8003c38:	887a      	ldrh	r2, [r7, #2]
 8003c3a:	88bb      	ldrh	r3, [r7, #4]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f000 f8d2 	bl	8003de8 <pbuf_alloc_reference>
 8003c44:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8003c46:	e0bd      	b.n	8003dc4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8003c50:	88bb      	ldrh	r3, [r7, #4]
 8003c52:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003c54:	2008      	movs	r0, #8
 8003c56:	f7ff fc8f 	bl	8003578 <memp_malloc>
 8003c5a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8003c62:	f7ff ff99 	bl	8003b98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8003c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c6e:	f000 faa9 	bl	80041c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e0a7      	b.n	8003dc6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8003c76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c78:	3303      	adds	r3, #3
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f023 0303 	bic.w	r3, r3, #3
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	8b7a      	ldrh	r2, [r7, #26]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	bf28      	it	cs
 8003c8e:	4613      	movcs	r3, r2
 8003c90:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8003c92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c94:	3310      	adds	r3, #16
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	3303      	adds	r3, #3
 8003c9c:	f023 0303 	bic.w	r3, r3, #3
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	89f9      	ldrh	r1, [r7, #14]
 8003ca4:	8b7a      	ldrh	r2, [r7, #26]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4601      	mov	r1, r0
 8003cb2:	6938      	ldr	r0, [r7, #16]
 8003cb4:	f7ff ff7c 	bl	8003bb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d006      	beq.n	8003cd2 <pbuf_alloc+0xce>
 8003cc4:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <pbuf_alloc+0x1cc>)
 8003cc6:	f240 1201 	movw	r2, #257	; 0x101
 8003cca:	4942      	ldr	r1, [pc, #264]	; (8003dd4 <pbuf_alloc+0x1d0>)
 8003ccc:	4842      	ldr	r0, [pc, #264]	; (8003dd8 <pbuf_alloc+0x1d4>)
 8003cce:	f008 fc21 	bl	800c514 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8003cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cd4:	3303      	adds	r3, #3
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8003cde:	d106      	bne.n	8003cee <pbuf_alloc+0xea>
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <pbuf_alloc+0x1cc>)
 8003ce2:	f240 1203 	movw	r2, #259	; 0x103
 8003ce6:	493d      	ldr	r1, [pc, #244]	; (8003ddc <pbuf_alloc+0x1d8>)
 8003ce8:	483b      	ldr	r0, [pc, #236]	; (8003dd8 <pbuf_alloc+0x1d4>)
 8003cea:	f008 fc13 	bl	800c514 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	e002      	b.n	8003d00 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8003d04:	8b7a      	ldrh	r2, [r7, #26]
 8003d06:	89fb      	ldrh	r3, [r7, #14]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8003d10:	8b7b      	ldrh	r3, [r7, #26]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d19e      	bne.n	8003c54 <pbuf_alloc+0x50>
      break;
 8003d16:	e055      	b.n	8003dc4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8003d18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d1a:	3303      	adds	r3, #3
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	88bb      	ldrh	r3, [r7, #4]
 8003d26:	3303      	adds	r3, #3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8003d34:	8b3b      	ldrh	r3, [r7, #24]
 8003d36:	3310      	adds	r3, #16
 8003d38:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8003d3a:	8b3a      	ldrh	r2, [r7, #24]
 8003d3c:	88bb      	ldrh	r3, [r7, #4]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	f023 0303 	bic.w	r3, r3, #3
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d306      	bcc.n	8003d56 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8003d48:	8afa      	ldrh	r2, [r7, #22]
 8003d4a:	88bb      	ldrh	r3, [r7, #4]
 8003d4c:	3303      	adds	r3, #3
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d201      	bcs.n	8003d5a <pbuf_alloc+0x156>
        return NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e035      	b.n	8003dc6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8003d5a:	8afb      	ldrh	r3, [r7, #22]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fa9d 	bl	800329c <mem_malloc>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <pbuf_alloc+0x16a>
        return NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e02b      	b.n	8003dc6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8003d6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d70:	3310      	adds	r3, #16
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	4413      	add	r3, r2
 8003d76:	3303      	adds	r3, #3
 8003d78:	f023 0303 	bic.w	r3, r3, #3
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	88b9      	ldrh	r1, [r7, #4]
 8003d80:	88ba      	ldrh	r2, [r7, #4]
 8003d82:	2300      	movs	r3, #0
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d90:	f7ff ff0e 	bl	8003bb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <pbuf_alloc+0x1be>
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <pbuf_alloc+0x1cc>)
 8003da2:	f240 1223 	movw	r2, #291	; 0x123
 8003da6:	490e      	ldr	r1, [pc, #56]	; (8003de0 <pbuf_alloc+0x1dc>)
 8003da8:	480b      	ldr	r0, [pc, #44]	; (8003dd8 <pbuf_alloc+0x1d4>)
 8003daa:	f008 fbb3 	bl	800c514 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8003dae:	e008      	b.n	8003dc2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <pbuf_alloc+0x1cc>)
 8003db2:	f240 1227 	movw	r2, #295	; 0x127
 8003db6:	490b      	ldr	r1, [pc, #44]	; (8003de4 <pbuf_alloc+0x1e0>)
 8003db8:	4807      	ldr	r0, [pc, #28]	; (8003dd8 <pbuf_alloc+0x1d4>)
 8003dba:	f008 fbab 	bl	800c514 <iprintf>
      return NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e001      	b.n	8003dc6 <pbuf_alloc+0x1c2>
      break;
 8003dc2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3728      	adds	r7, #40	; 0x28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	0800d938 	.word	0x0800d938
 8003dd4:	0800d968 	.word	0x0800d968
 8003dd8:	0800d998 	.word	0x0800d998
 8003ddc:	0800d9c0 	.word	0x0800d9c0
 8003de0:	0800d9f4 	.word	0x0800d9f4
 8003de4:	0800da20 	.word	0x0800da20

08003de8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
 8003df4:	4613      	mov	r3, r2
 8003df6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8003df8:	883b      	ldrh	r3, [r7, #0]
 8003dfa:	2b41      	cmp	r3, #65	; 0x41
 8003dfc:	d009      	beq.n	8003e12 <pbuf_alloc_reference+0x2a>
 8003dfe:	883b      	ldrh	r3, [r7, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d006      	beq.n	8003e12 <pbuf_alloc_reference+0x2a>
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <pbuf_alloc_reference+0x5c>)
 8003e06:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8003e0a:	490f      	ldr	r1, [pc, #60]	; (8003e48 <pbuf_alloc_reference+0x60>)
 8003e0c:	480f      	ldr	r0, [pc, #60]	; (8003e4c <pbuf_alloc_reference+0x64>)
 8003e0e:	f008 fb81 	bl	800c514 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8003e12:	2007      	movs	r0, #7
 8003e14:	f7ff fbb0 	bl	8003578 <memp_malloc>
 8003e18:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e00b      	b.n	8003e3c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8003e24:	8879      	ldrh	r1, [r7, #2]
 8003e26:	887a      	ldrh	r2, [r7, #2]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	883b      	ldrh	r3, [r7, #0]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	460b      	mov	r3, r1
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff febb 	bl	8003bb0 <pbuf_init_alloced_pbuf>
  return p;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	0800d938 	.word	0x0800d938
 8003e48:	0800da3c 	.word	0x0800da3c
 8003e4c:	0800d998 	.word	0x0800d998

08003e50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	81bb      	strh	r3, [r7, #12]
 8003e60:	4613      	mov	r3, r2
 8003e62:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8003e68:	8a7b      	ldrh	r3, [r7, #18]
 8003e6a:	3303      	adds	r3, #3
 8003e6c:	f023 0203 	bic.w	r2, r3, #3
 8003e70:	89bb      	ldrh	r3, [r7, #12]
 8003e72:	441a      	add	r2, r3
 8003e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d901      	bls.n	8003e7e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e018      	b.n	8003eb0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8003e84:	8a7b      	ldrh	r3, [r7, #18]
 8003e86:	3303      	adds	r3, #3
 8003e88:	f023 0303 	bic.w	r3, r3, #3
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	4413      	add	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e001      	b.n	8003e98 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	89b9      	ldrh	r1, [r7, #12]
 8003e9c:	89ba      	ldrh	r2, [r7, #12]
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	6979      	ldr	r1, [r7, #20]
 8003eaa:	f7ff fe81 	bl	8003bb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8003eae:	687b      	ldr	r3, [r7, #4]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <pbuf_realloc+0x20>
 8003eca:	4b3a      	ldr	r3, [pc, #232]	; (8003fb4 <pbuf_realloc+0xfc>)
 8003ecc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8003ed0:	4939      	ldr	r1, [pc, #228]	; (8003fb8 <pbuf_realloc+0x100>)
 8003ed2:	483a      	ldr	r0, [pc, #232]	; (8003fbc <pbuf_realloc+0x104>)
 8003ed4:	f008 fb1e 	bl	800c514 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	891b      	ldrh	r3, [r3, #8]
 8003edc:	887a      	ldrh	r2, [r7, #2]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d264      	bcs.n	8003fac <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	891a      	ldrh	r2, [r3, #8]
 8003ee6:	887b      	ldrh	r3, [r7, #2]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	817b      	strh	r3, [r7, #10]
  q = p;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8003ef4:	e018      	b.n	8003f28 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	895b      	ldrh	r3, [r3, #10]
 8003efa:	897a      	ldrh	r2, [r7, #10]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	891a      	ldrh	r2, [r3, #8]
 8003f04:	893b      	ldrh	r3, [r7, #8]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <pbuf_realloc+0x70>
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <pbuf_realloc+0xfc>)
 8003f1c:	f240 12af 	movw	r2, #431	; 0x1af
 8003f20:	4927      	ldr	r1, [pc, #156]	; (8003fc0 <pbuf_realloc+0x108>)
 8003f22:	4826      	ldr	r0, [pc, #152]	; (8003fbc <pbuf_realloc+0x104>)
 8003f24:	f008 faf6 	bl	800c514 <iprintf>
  while (rem_len > q->len) {
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	895b      	ldrh	r3, [r3, #10]
 8003f2c:	897a      	ldrh	r2, [r7, #10]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d8e1      	bhi.n	8003ef6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	7b1b      	ldrb	r3, [r3, #12]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d122      	bne.n	8003f84 <pbuf_realloc+0xcc>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	895b      	ldrh	r3, [r3, #10]
 8003f42:	897a      	ldrh	r2, [r7, #10]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d01d      	beq.n	8003f84 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	7b5b      	ldrb	r3, [r3, #13]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d117      	bne.n	8003f84 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	897b      	ldrh	r3, [r7, #10]
 8003f62:	4413      	add	r3, r2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4619      	mov	r1, r3
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff f89b 	bl	80030a4 <mem_trim>
 8003f6e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <pbuf_realloc+0xcc>
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <pbuf_realloc+0xfc>)
 8003f78:	f240 12bd 	movw	r2, #445	; 0x1bd
 8003f7c:	4911      	ldr	r1, [pc, #68]	; (8003fc4 <pbuf_realloc+0x10c>)
 8003f7e:	480f      	ldr	r0, [pc, #60]	; (8003fbc <pbuf_realloc+0x104>)
 8003f80:	f008 fac8 	bl	800c514 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	897a      	ldrh	r2, [r7, #10]
 8003f88:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	895a      	ldrh	r2, [r3, #10]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f910 	bl	80041c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e000      	b.n	8003fae <pbuf_realloc+0xf6>
    return;
 8003fac:	bf00      	nop

}
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	0800d938 	.word	0x0800d938
 8003fb8:	0800da50 	.word	0x0800da50
 8003fbc:	0800d998 	.word	0x0800d998
 8003fc0:	0800da68 	.word	0x0800da68
 8003fc4:	0800da80 	.word	0x0800da80

08003fc8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <pbuf_add_header_impl+0x22>
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <pbuf_add_header_impl+0xc4>)
 8003fde:	f240 12df 	movw	r2, #479	; 0x1df
 8003fe2:	492b      	ldr	r1, [pc, #172]	; (8004090 <pbuf_add_header_impl+0xc8>)
 8003fe4:	482b      	ldr	r0, [pc, #172]	; (8004094 <pbuf_add_header_impl+0xcc>)
 8003fe6:	f008 fa95 	bl	800c514 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <pbuf_add_header_impl+0x30>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff6:	d301      	bcc.n	8003ffc <pbuf_add_header_impl+0x34>
    return 1;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e043      	b.n	8004084 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <pbuf_add_header_impl+0x3e>
    return 0;
 8004002:	2300      	movs	r3, #0
 8004004:	e03e      	b.n	8004084 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	891a      	ldrh	r2, [r3, #8]
 800400e:	8a7b      	ldrh	r3, [r7, #18]
 8004010:	4413      	add	r3, r2
 8004012:	b29b      	uxth	r3, r3
 8004014:	8a7a      	ldrh	r2, [r7, #18]
 8004016:	429a      	cmp	r2, r3
 8004018:	d901      	bls.n	800401e <pbuf_add_header_impl+0x56>
    return 1;
 800401a:	2301      	movs	r3, #1
 800401c:	e032      	b.n	8004084 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	7b1b      	ldrb	r3, [r3, #12]
 8004022:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004024:	8a3b      	ldrh	r3, [r7, #16]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	425b      	negs	r3, r3
 8004036:	4413      	add	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3310      	adds	r3, #16
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	429a      	cmp	r2, r3
 8004042:	d20d      	bcs.n	8004060 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004044:	2301      	movs	r3, #1
 8004046:	e01d      	b.n	8004084 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	425b      	negs	r3, r3
 8004056:	4413      	add	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e001      	b.n	8004060 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800405c:	2301      	movs	r3, #1
 800405e:	e011      	b.n	8004084 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	895a      	ldrh	r2, [r3, #10]
 800406a:	8a7b      	ldrh	r3, [r7, #18]
 800406c:	4413      	add	r3, r2
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	891a      	ldrh	r2, [r3, #8]
 8004078:	8a7b      	ldrh	r3, [r7, #18]
 800407a:	4413      	add	r3, r2
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	811a      	strh	r2, [r3, #8]


  return 0;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	0800d938 	.word	0x0800d938
 8004090:	0800da9c 	.word	0x0800da9c
 8004094:	0800d998 	.word	0x0800d998

08004098 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80040a2:	2200      	movs	r2, #0
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff8e 	bl	8003fc8 <pbuf_add_header_impl>
 80040ac:	4603      	mov	r3, r0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <pbuf_remove_header+0x1e>
 80040c8:	4b20      	ldr	r3, [pc, #128]	; (800414c <pbuf_remove_header+0x94>)
 80040ca:	f240 224b 	movw	r2, #587	; 0x24b
 80040ce:	4920      	ldr	r1, [pc, #128]	; (8004150 <pbuf_remove_header+0x98>)
 80040d0:	4820      	ldr	r0, [pc, #128]	; (8004154 <pbuf_remove_header+0x9c>)
 80040d2:	f008 fa1f 	bl	800c514 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <pbuf_remove_header+0x2c>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e2:	d301      	bcc.n	80040e8 <pbuf_remove_header+0x30>
    return 1;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e02c      	b.n	8004142 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <pbuf_remove_header+0x3a>
    return 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e027      	b.n	8004142 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	895b      	ldrh	r3, [r3, #10]
 80040fa:	89fa      	ldrh	r2, [r7, #14]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d908      	bls.n	8004112 <pbuf_remove_header+0x5a>
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <pbuf_remove_header+0x94>)
 8004102:	f240 2255 	movw	r2, #597	; 0x255
 8004106:	4914      	ldr	r1, [pc, #80]	; (8004158 <pbuf_remove_header+0xa0>)
 8004108:	4812      	ldr	r0, [pc, #72]	; (8004154 <pbuf_remove_header+0x9c>)
 800410a:	f008 fa03 	bl	800c514 <iprintf>
 800410e:	2301      	movs	r3, #1
 8004110:	e017      	b.n	8004142 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	441a      	add	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	895a      	ldrh	r2, [r3, #10]
 8004128:	89fb      	ldrh	r3, [r7, #14]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	891a      	ldrh	r2, [r3, #8]
 8004136:	89fb      	ldrh	r3, [r7, #14]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	0800d938 	.word	0x0800d938
 8004150:	0800da9c 	.word	0x0800da9c
 8004154:	0800d998 	.word	0x0800d998
 8004158:	0800daa8 	.word	0x0800daa8

0800415c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800416c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004170:	2b00      	cmp	r3, #0
 8004172:	da08      	bge.n	8004186 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004174:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004178:	425b      	negs	r3, r3
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff9b 	bl	80040b8 <pbuf_remove_header>
 8004182:	4603      	mov	r3, r0
 8004184:	e007      	b.n	8004196 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800418a:	787a      	ldrb	r2, [r7, #1]
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ff1a 	bl	8003fc8 <pbuf_add_header_impl>
 8004194:	4603      	mov	r3, r0
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80041aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041ae:	2201      	movs	r2, #1
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff ffd2 	bl	800415c <pbuf_header_impl>
 80041b8:	4603      	mov	r3, r0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <pbuf_free+0x22>
 80041d8:	4b38      	ldr	r3, [pc, #224]	; (80042bc <pbuf_free+0xf8>)
 80041da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80041de:	4938      	ldr	r1, [pc, #224]	; (80042c0 <pbuf_free+0xfc>)
 80041e0:	4838      	ldr	r0, [pc, #224]	; (80042c4 <pbuf_free+0x100>)
 80041e2:	f008 f997 	bl	800c514 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e063      	b.n	80042b2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80041ee:	e05c      	b.n	80042aa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7b9b      	ldrb	r3, [r3, #14]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <pbuf_free+0x42>
 80041f8:	4b30      	ldr	r3, [pc, #192]	; (80042bc <pbuf_free+0xf8>)
 80041fa:	f240 22f1 	movw	r2, #753	; 0x2f1
 80041fe:	4932      	ldr	r1, [pc, #200]	; (80042c8 <pbuf_free+0x104>)
 8004200:	4830      	ldr	r0, [pc, #192]	; (80042c4 <pbuf_free+0x100>)
 8004202:	f008 f987 	bl	800c514 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	7b9b      	ldrb	r3, [r3, #14]
 800420a:	3b01      	subs	r3, #1
 800420c:	b2da      	uxtb	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	739a      	strb	r2, [r3, #14]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7b9b      	ldrb	r3, [r3, #14]
 8004216:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004218:	7dbb      	ldrb	r3, [r7, #22]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d143      	bne.n	80042a6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	7b1b      	ldrb	r3, [r3, #12]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7b5b      	ldrb	r3, [r3, #13]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d011      	beq.n	800425e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <pbuf_free+0x90>
 8004246:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <pbuf_free+0xf8>)
 8004248:	f240 22ff 	movw	r2, #767	; 0x2ff
 800424c:	491f      	ldr	r1, [pc, #124]	; (80042cc <pbuf_free+0x108>)
 800424e:	481d      	ldr	r0, [pc, #116]	; (80042c4 <pbuf_free+0x100>)
 8004250:	f008 f960 	bl	800c514 <iprintf>
        pc->custom_free_function(p);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
 800425c:	e01d      	b.n	800429a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d104      	bne.n	800426e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	2008      	movs	r0, #8
 8004268:	f7ff f9d2 	bl	8003610 <memp_free>
 800426c:	e015      	b.n	800429a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d104      	bne.n	800427e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	2007      	movs	r0, #7
 8004278:	f7ff f9ca 	bl	8003610 <memp_free>
 800427c:	e00d      	b.n	800429a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <pbuf_free+0xc8>
          mem_free(p);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fe fea3 	bl	8002fd0 <mem_free>
 800428a:	e006      	b.n	800429a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <pbuf_free+0xf8>)
 800428e:	f240 320f 	movw	r2, #783	; 0x30f
 8004292:	490f      	ldr	r1, [pc, #60]	; (80042d0 <pbuf_free+0x10c>)
 8004294:	480b      	ldr	r0, [pc, #44]	; (80042c4 <pbuf_free+0x100>)
 8004296:	f008 f93d 	bl	800c514 <iprintf>
        }
      }
      count++;
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	3301      	adds	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	e001      	b.n	80042aa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d19f      	bne.n	80041f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	0800d938 	.word	0x0800d938
 80042c0:	0800da9c 	.word	0x0800da9c
 80042c4:	0800d998 	.word	0x0800d998
 80042c8:	0800dac8 	.word	0x0800dac8
 80042cc:	0800dae0 	.word	0x0800dae0
 80042d0:	0800db04 	.word	0x0800db04

080042d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80042e0:	e005      	b.n	80042ee <pbuf_clen+0x1a>
    ++len;
 80042e2:	89fb      	ldrh	r3, [r7, #14]
 80042e4:	3301      	adds	r3, #1
 80042e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f6      	bne.n	80042e2 <pbuf_clen+0xe>
  }
  return len;
 80042f4:	89fb      	ldrh	r3, [r7, #14]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d010      	beq.n	8004334 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7b9b      	ldrb	r3, [r3, #14]
 8004316:	3301      	adds	r3, #1
 8004318:	b2da      	uxtb	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	7b9b      	ldrb	r3, [r3, #14]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <pbuf_ref+0x30>
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <pbuf_ref+0x38>)
 8004328:	f240 3242 	movw	r2, #834	; 0x342
 800432c:	4904      	ldr	r1, [pc, #16]	; (8004340 <pbuf_ref+0x3c>)
 800432e:	4805      	ldr	r0, [pc, #20]	; (8004344 <pbuf_ref+0x40>)
 8004330:	f008 f8f0 	bl	800c514 <iprintf>
  }
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	0800d938 	.word	0x0800d938
 8004340:	0800db18 	.word	0x0800db18
 8004344:	0800d998 	.word	0x0800d998

08004348 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <pbuf_cat+0x16>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d107      	bne.n	800436e <pbuf_cat+0x26>
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <pbuf_cat+0x98>)
 8004360:	f240 325a 	movw	r2, #858	; 0x35a
 8004364:	491f      	ldr	r1, [pc, #124]	; (80043e4 <pbuf_cat+0x9c>)
 8004366:	4820      	ldr	r0, [pc, #128]	; (80043e8 <pbuf_cat+0xa0>)
 8004368:	f008 f8d4 	bl	800c514 <iprintf>
 800436c:	e034      	b.n	80043d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e00a      	b.n	800438a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	891a      	ldrh	r2, [r3, #8]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	891b      	ldrh	r3, [r3, #8]
 800437c:	4413      	add	r3, r2
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	891a      	ldrh	r2, [r3, #8]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	895b      	ldrh	r3, [r3, #10]
 800439a:	429a      	cmp	r2, r3
 800439c:	d006      	beq.n	80043ac <pbuf_cat+0x64>
 800439e:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <pbuf_cat+0x98>)
 80043a0:	f240 3262 	movw	r2, #866	; 0x362
 80043a4:	4911      	ldr	r1, [pc, #68]	; (80043ec <pbuf_cat+0xa4>)
 80043a6:	4810      	ldr	r0, [pc, #64]	; (80043e8 <pbuf_cat+0xa0>)
 80043a8:	f008 f8b4 	bl	800c514 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d006      	beq.n	80043c2 <pbuf_cat+0x7a>
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <pbuf_cat+0x98>)
 80043b6:	f240 3263 	movw	r2, #867	; 0x363
 80043ba:	490d      	ldr	r1, [pc, #52]	; (80043f0 <pbuf_cat+0xa8>)
 80043bc:	480a      	ldr	r0, [pc, #40]	; (80043e8 <pbuf_cat+0xa0>)
 80043be:	f008 f8a9 	bl	800c514 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	891a      	ldrh	r2, [r3, #8]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	891b      	ldrh	r3, [r3, #8]
 80043ca:	4413      	add	r3, r2
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	0800d938 	.word	0x0800d938
 80043e4:	0800db2c 	.word	0x0800db2c
 80043e8:	0800d998 	.word	0x0800d998
 80043ec:	0800db64 	.word	0x0800db64
 80043f0:	0800db94 	.word	0x0800db94

080043f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <pbuf_copy+0x2a>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <pbuf_copy+0x2a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	891a      	ldrh	r2, [r3, #8]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	891b      	ldrh	r3, [r3, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d209      	bcs.n	8004432 <pbuf_copy+0x3e>
 800441e:	4b57      	ldr	r3, [pc, #348]	; (800457c <pbuf_copy+0x188>)
 8004420:	f240 32ca 	movw	r2, #970	; 0x3ca
 8004424:	4956      	ldr	r1, [pc, #344]	; (8004580 <pbuf_copy+0x18c>)
 8004426:	4857      	ldr	r0, [pc, #348]	; (8004584 <pbuf_copy+0x190>)
 8004428:	f008 f874 	bl	800c514 <iprintf>
 800442c:	f06f 030f 	mvn.w	r3, #15
 8004430:	e09f      	b.n	8004572 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	895b      	ldrh	r3, [r3, #10]
 8004436:	461a      	mov	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	895b      	ldrh	r3, [r3, #10]
 8004440:	4619      	mov	r1, r3
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1acb      	subs	r3, r1, r3
 8004446:	429a      	cmp	r2, r3
 8004448:	d306      	bcc.n	8004458 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	895b      	ldrh	r3, [r3, #10]
 800444e:	461a      	mov	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e005      	b.n	8004464 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	895b      	ldrh	r3, [r3, #10]
 800445c:	461a      	mov	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	18d0      	adds	r0, r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4413      	add	r3, r2
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4619      	mov	r1, r3
 8004478:	f008 f839 	bl	800c4ee <memcpy>
    offset_to += len;
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4413      	add	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	895b      	ldrh	r3, [r3, #10]
 8004490:	461a      	mov	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4293      	cmp	r3, r2
 8004496:	d906      	bls.n	80044a6 <pbuf_copy+0xb2>
 8004498:	4b38      	ldr	r3, [pc, #224]	; (800457c <pbuf_copy+0x188>)
 800449a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800449e:	493a      	ldr	r1, [pc, #232]	; (8004588 <pbuf_copy+0x194>)
 80044a0:	4838      	ldr	r0, [pc, #224]	; (8004584 <pbuf_copy+0x190>)
 80044a2:	f008 f837 	bl	800c514 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	895b      	ldrh	r3, [r3, #10]
 80044aa:	461a      	mov	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d906      	bls.n	80044c0 <pbuf_copy+0xcc>
 80044b2:	4b32      	ldr	r3, [pc, #200]	; (800457c <pbuf_copy+0x188>)
 80044b4:	f240 32da 	movw	r2, #986	; 0x3da
 80044b8:	4934      	ldr	r1, [pc, #208]	; (800458c <pbuf_copy+0x198>)
 80044ba:	4832      	ldr	r0, [pc, #200]	; (8004584 <pbuf_copy+0x190>)
 80044bc:	f008 f82a 	bl	800c514 <iprintf>
    if (offset_from >= p_from->len) {
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	895b      	ldrh	r3, [r3, #10]
 80044c4:	461a      	mov	r2, r3
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d304      	bcc.n	80044d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	895b      	ldrh	r3, [r3, #10]
 80044da:	461a      	mov	r2, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4293      	cmp	r3, r2
 80044e0:	d114      	bne.n	800450c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10c      	bne.n	800450c <pbuf_copy+0x118>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <pbuf_copy+0x118>
 80044f8:	4b20      	ldr	r3, [pc, #128]	; (800457c <pbuf_copy+0x188>)
 80044fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80044fe:	4924      	ldr	r1, [pc, #144]	; (8004590 <pbuf_copy+0x19c>)
 8004500:	4820      	ldr	r0, [pc, #128]	; (8004584 <pbuf_copy+0x190>)
 8004502:	f008 f807 	bl	800c514 <iprintf>
 8004506:	f06f 030f 	mvn.w	r3, #15
 800450a:	e032      	b.n	8004572 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d013      	beq.n	800453a <pbuf_copy+0x146>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	895a      	ldrh	r2, [r3, #10]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	891b      	ldrh	r3, [r3, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	d10d      	bne.n	800453a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <pbuf_copy+0x146>
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <pbuf_copy+0x188>)
 8004528:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800452c:	4919      	ldr	r1, [pc, #100]	; (8004594 <pbuf_copy+0x1a0>)
 800452e:	4815      	ldr	r0, [pc, #84]	; (8004584 <pbuf_copy+0x190>)
 8004530:	f007 fff0 	bl	800c514 <iprintf>
 8004534:	f06f 0305 	mvn.w	r3, #5
 8004538:	e01b      	b.n	8004572 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <pbuf_copy+0x174>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	895a      	ldrh	r2, [r3, #10]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	891b      	ldrh	r3, [r3, #8]
 8004548:	429a      	cmp	r2, r3
 800454a:	d10d      	bne.n	8004568 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <pbuf_copy+0x174>
 8004554:	4b09      	ldr	r3, [pc, #36]	; (800457c <pbuf_copy+0x188>)
 8004556:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800455a:	490e      	ldr	r1, [pc, #56]	; (8004594 <pbuf_copy+0x1a0>)
 800455c:	4809      	ldr	r0, [pc, #36]	; (8004584 <pbuf_copy+0x190>)
 800455e:	f007 ffd9 	bl	800c514 <iprintf>
 8004562:	f06f 0305 	mvn.w	r3, #5
 8004566:	e004      	b.n	8004572 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f47f af61 	bne.w	8004432 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	0800d938 	.word	0x0800d938
 8004580:	0800dbe0 	.word	0x0800dbe0
 8004584:	0800d998 	.word	0x0800d998
 8004588:	0800dc10 	.word	0x0800dc10
 800458c:	0800dc28 	.word	0x0800dc28
 8004590:	0800dc44 	.word	0x0800dc44
 8004594:	0800dc54 	.word	0x0800dc54

08004598 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	4611      	mov	r1, r2
 80045a4:	461a      	mov	r2, r3
 80045a6:	460b      	mov	r3, r1
 80045a8:	80fb      	strh	r3, [r7, #6]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d108      	bne.n	80045ce <pbuf_copy_partial+0x36>
 80045bc:	4b2b      	ldr	r3, [pc, #172]	; (800466c <pbuf_copy_partial+0xd4>)
 80045be:	f240 420a 	movw	r2, #1034	; 0x40a
 80045c2:	492b      	ldr	r1, [pc, #172]	; (8004670 <pbuf_copy_partial+0xd8>)
 80045c4:	482b      	ldr	r0, [pc, #172]	; (8004674 <pbuf_copy_partial+0xdc>)
 80045c6:	f007 ffa5 	bl	800c514 <iprintf>
 80045ca:	2300      	movs	r3, #0
 80045cc:	e04a      	b.n	8004664 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d108      	bne.n	80045e6 <pbuf_copy_partial+0x4e>
 80045d4:	4b25      	ldr	r3, [pc, #148]	; (800466c <pbuf_copy_partial+0xd4>)
 80045d6:	f240 420b 	movw	r2, #1035	; 0x40b
 80045da:	4927      	ldr	r1, [pc, #156]	; (8004678 <pbuf_copy_partial+0xe0>)
 80045dc:	4825      	ldr	r0, [pc, #148]	; (8004674 <pbuf_copy_partial+0xdc>)
 80045de:	f007 ff99 	bl	800c514 <iprintf>
 80045e2:	2300      	movs	r3, #0
 80045e4:	e03e      	b.n	8004664 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e034      	b.n	8004656 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80045ec:	88bb      	ldrh	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <pbuf_copy_partial+0x70>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	895b      	ldrh	r3, [r3, #10]
 80045f6:	88ba      	ldrh	r2, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d305      	bcc.n	8004608 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	895b      	ldrh	r3, [r3, #10]
 8004600:	88ba      	ldrh	r2, [r7, #4]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	80bb      	strh	r3, [r7, #4]
 8004606:	e023      	b.n	8004650 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	895a      	ldrh	r2, [r3, #10]
 800460c:	88bb      	ldrh	r3, [r7, #4]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8004612:	8b3a      	ldrh	r2, [r7, #24]
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	429a      	cmp	r2, r3
 8004618:	d901      	bls.n	800461e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800461e:	8b7b      	ldrh	r3, [r7, #26]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	18d0      	adds	r0, r2, r3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	88bb      	ldrh	r3, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	8b3a      	ldrh	r2, [r7, #24]
 800462e:	4619      	mov	r1, r3
 8004630:	f007 ff5d 	bl	800c4ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8004634:	8afa      	ldrh	r2, [r7, #22]
 8004636:	8b3b      	ldrh	r3, [r7, #24]
 8004638:	4413      	add	r3, r2
 800463a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800463c:	8b7a      	ldrh	r2, [r7, #26]
 800463e:	8b3b      	ldrh	r3, [r7, #24]
 8004640:	4413      	add	r3, r2
 8004642:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	8b3b      	ldrh	r3, [r7, #24]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <pbuf_copy_partial+0xca>
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1c4      	bne.n	80045ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8004662:	8afb      	ldrh	r3, [r7, #22]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	0800d938 	.word	0x0800d938
 8004670:	0800dc80 	.word	0x0800dc80
 8004674:	0800d998 	.word	0x0800d998
 8004678:	0800dca0 	.word	0x0800dca0

0800467c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	603a      	str	r2, [r7, #0]
 8004686:	71fb      	strb	r3, [r7, #7]
 8004688:	460b      	mov	r3, r1
 800468a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	8919      	ldrh	r1, [r3, #8]
 8004690:	88ba      	ldrh	r2, [r7, #4]
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fab5 	bl	8003c04 <pbuf_alloc>
 800469a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <pbuf_clone+0x2a>
    return NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e011      	b.n	80046ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f7ff fea3 	bl	80043f4 <pbuf_copy>
 80046ae:	4603      	mov	r3, r0
 80046b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80046b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <pbuf_clone+0x4c>
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <pbuf_clone+0x58>)
 80046bc:	f240 5224 	movw	r2, #1316	; 0x524
 80046c0:	4905      	ldr	r1, [pc, #20]	; (80046d8 <pbuf_clone+0x5c>)
 80046c2:	4806      	ldr	r0, [pc, #24]	; (80046dc <pbuf_clone+0x60>)
 80046c4:	f007 ff26 	bl	800c514 <iprintf>
  return q;
 80046c8:	68fb      	ldr	r3, [r7, #12]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	0800d938 	.word	0x0800d938
 80046d8:	0800ddac 	.word	0x0800ddac
 80046dc:	0800d998 	.word	0x0800d998

080046e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80046e4:	f007 ff2e 	bl	800c544 <rand>
 80046e8:	4603      	mov	r3, r0
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	4b01      	ldr	r3, [pc, #4]	; (8004700 <tcp_init+0x20>)
 80046fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80046fc:	bf00      	nop
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	2000000a 	.word	0x2000000a

08004704 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	7d1b      	ldrb	r3, [r3, #20]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d105      	bne.n	8004720 <tcp_free+0x1c>
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <tcp_free+0x2c>)
 8004716:	22d4      	movs	r2, #212	; 0xd4
 8004718:	4906      	ldr	r1, [pc, #24]	; (8004734 <tcp_free+0x30>)
 800471a:	4807      	ldr	r0, [pc, #28]	; (8004738 <tcp_free+0x34>)
 800471c:	f007 fefa 	bl	800c514 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	2001      	movs	r0, #1
 8004724:	f7fe ff74 	bl	8003610 <memp_free>
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	0800de38 	.word	0x0800de38
 8004734:	0800de68 	.word	0x0800de68
 8004738:	0800de7c 	.word	0x0800de7c

0800473c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7d1b      	ldrb	r3, [r3, #20]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <tcp_free_listen+0x1c>
 800474c:	4b06      	ldr	r3, [pc, #24]	; (8004768 <tcp_free_listen+0x2c>)
 800474e:	22df      	movs	r2, #223	; 0xdf
 8004750:	4906      	ldr	r1, [pc, #24]	; (800476c <tcp_free_listen+0x30>)
 8004752:	4807      	ldr	r0, [pc, #28]	; (8004770 <tcp_free_listen+0x34>)
 8004754:	f007 fede 	bl	800c514 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	2002      	movs	r0, #2
 800475c:	f7fe ff58 	bl	8003610 <memp_free>
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	0800de38 	.word	0x0800de38
 800476c:	0800dea4 	.word	0x0800dea4
 8004770:	0800de7c 	.word	0x0800de7c

08004774 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004778:	f000 fe98 	bl	80054ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <tcp_tmr+0x28>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	b2da      	uxtb	r2, r3
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <tcp_tmr+0x28>)
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <tcp_tmr+0x28>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004794:	f000 fb4c 	bl	8004e30 <tcp_slowtmr>
  }
}
 8004798:	bf00      	nop
 800479a:	bd80      	pop	{r7, pc}
 800479c:	200000c9 	.word	0x200000c9

080047a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <tcp_remove_listener+0x1c>
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <tcp_remove_listener+0x48>)
 80047b2:	22ff      	movs	r2, #255	; 0xff
 80047b4:	490d      	ldr	r1, [pc, #52]	; (80047ec <tcp_remove_listener+0x4c>)
 80047b6:	480e      	ldr	r0, [pc, #56]	; (80047f0 <tcp_remove_listener+0x50>)
 80047b8:	f007 feac 	bl	800c514 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e00a      	b.n	80047d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d102      	bne.n	80047d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f1      	bne.n	80047c2 <tcp_remove_listener+0x22>
    }
  }
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	0800de38 	.word	0x0800de38
 80047ec:	0800dec0 	.word	0x0800dec0
 80047f0:	0800de7c 	.word	0x0800de7c

080047f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <tcp_listen_closed+0x1c>
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <tcp_listen_closed+0x60>)
 8004804:	f240 1211 	movw	r2, #273	; 0x111
 8004808:	4913      	ldr	r1, [pc, #76]	; (8004858 <tcp_listen_closed+0x64>)
 800480a:	4814      	ldr	r0, [pc, #80]	; (800485c <tcp_listen_closed+0x68>)
 800480c:	f007 fe82 	bl	800c514 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	7d1b      	ldrb	r3, [r3, #20]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d006      	beq.n	8004826 <tcp_listen_closed+0x32>
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <tcp_listen_closed+0x60>)
 800481a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800481e:	4910      	ldr	r1, [pc, #64]	; (8004860 <tcp_listen_closed+0x6c>)
 8004820:	480e      	ldr	r0, [pc, #56]	; (800485c <tcp_listen_closed+0x68>)
 8004822:	f007 fe77 	bl	800c514 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004826:	2301      	movs	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e00b      	b.n	8004844 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800482c:	4a0d      	ldr	r2, [pc, #52]	; (8004864 <tcp_listen_closed+0x70>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ffb1 	bl	80047a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3301      	adds	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b03      	cmp	r3, #3
 8004848:	d9f0      	bls.n	800482c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	0800de38 	.word	0x0800de38
 8004858:	0800dee8 	.word	0x0800dee8
 800485c:	0800de7c 	.word	0x0800de7c
 8004860:	0800def4 	.word	0x0800def4
 8004864:	0800fe04 	.word	0x0800fe04

08004868 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8004868:	b5b0      	push	{r4, r5, r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af04      	add	r7, sp, #16
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <tcp_close_shutdown+0x20>
 800487a:	4b61      	ldr	r3, [pc, #388]	; (8004a00 <tcp_close_shutdown+0x198>)
 800487c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004880:	4960      	ldr	r1, [pc, #384]	; (8004a04 <tcp_close_shutdown+0x19c>)
 8004882:	4861      	ldr	r0, [pc, #388]	; (8004a08 <tcp_close_shutdown+0x1a0>)
 8004884:	f007 fe46 	bl	800c514 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d066      	beq.n	800495c <tcp_close_shutdown+0xf4>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	7d1b      	ldrb	r3, [r3, #20]
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <tcp_close_shutdown+0x36>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7d1b      	ldrb	r3, [r3, #20]
 800489a:	2b07      	cmp	r3, #7
 800489c:	d15e      	bne.n	800495c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <tcp_close_shutdown+0x48>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80048ae:	d055      	beq.n	800495c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8b5b      	ldrh	r3, [r3, #26]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <tcp_close_shutdown+0x62>
 80048bc:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <tcp_close_shutdown+0x198>)
 80048be:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80048c2:	4952      	ldr	r1, [pc, #328]	; (8004a0c <tcp_close_shutdown+0x1a4>)
 80048c4:	4850      	ldr	r0, [pc, #320]	; (8004a08 <tcp_close_shutdown+0x1a0>)
 80048c6:	f007 fe25 	bl	800c514 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80048d2:	687d      	ldr	r5, [r7, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3304      	adds	r3, #4
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	8ad2      	ldrh	r2, [r2, #22]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	8b09      	ldrh	r1, [r1, #24]
 80048e0:	9102      	str	r1, [sp, #8]
 80048e2:	9201      	str	r2, [sp, #4]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	462b      	mov	r3, r5
 80048e8:	4622      	mov	r2, r4
 80048ea:	4601      	mov	r1, r0
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f004 fe8f 	bl	8009610 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f001 f8ba 	bl	8005a6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80048f8:	4b45      	ldr	r3, [pc, #276]	; (8004a10 <tcp_close_shutdown+0x1a8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d105      	bne.n	800490e <tcp_close_shutdown+0xa6>
 8004902:	4b43      	ldr	r3, [pc, #268]	; (8004a10 <tcp_close_shutdown+0x1a8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a41      	ldr	r2, [pc, #260]	; (8004a10 <tcp_close_shutdown+0x1a8>)
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e013      	b.n	8004936 <tcp_close_shutdown+0xce>
 800490e:	4b40      	ldr	r3, [pc, #256]	; (8004a10 <tcp_close_shutdown+0x1a8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e00c      	b.n	8004930 <tcp_close_shutdown+0xc8>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d104      	bne.n	800492a <tcp_close_shutdown+0xc2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e005      	b.n	8004936 <tcp_close_shutdown+0xce>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ef      	bne.n	8004916 <tcp_close_shutdown+0xae>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	4b35      	ldr	r3, [pc, #212]	; (8004a14 <tcp_close_shutdown+0x1ac>)
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8004942:	4b35      	ldr	r3, [pc, #212]	; (8004a18 <tcp_close_shutdown+0x1b0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d102      	bne.n	8004952 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800494c:	f003 fd4c 	bl	80083e8 <tcp_trigger_input_pcb_close>
 8004950:	e002      	b.n	8004958 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fed6 	bl	8004704 <tcp_free>
      }
      return ERR_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e04d      	b.n	80049f8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7d1b      	ldrb	r3, [r3, #20]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d02d      	beq.n	80049c0 <tcp_close_shutdown+0x158>
 8004964:	2b02      	cmp	r3, #2
 8004966:	d036      	beq.n	80049d6 <tcp_close_shutdown+0x16e>
 8004968:	2b00      	cmp	r3, #0
 800496a:	d13f      	bne.n	80049ec <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8adb      	ldrh	r3, [r3, #22]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d021      	beq.n	80049b8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004974:	4b29      	ldr	r3, [pc, #164]	; (8004a1c <tcp_close_shutdown+0x1b4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d105      	bne.n	800498a <tcp_close_shutdown+0x122>
 800497e:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <tcp_close_shutdown+0x1b4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a25      	ldr	r2, [pc, #148]	; (8004a1c <tcp_close_shutdown+0x1b4>)
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e013      	b.n	80049b2 <tcp_close_shutdown+0x14a>
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <tcp_close_shutdown+0x1b4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	e00c      	b.n	80049ac <tcp_close_shutdown+0x144>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d104      	bne.n	80049a6 <tcp_close_shutdown+0x13e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	e005      	b.n	80049b2 <tcp_close_shutdown+0x14a>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ef      	bne.n	8004992 <tcp_close_shutdown+0x12a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff fea3 	bl	8004704 <tcp_free>
      break;
 80049be:	e01a      	b.n	80049f6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff ff17 	bl	80047f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4815      	ldr	r0, [pc, #84]	; (8004a20 <tcp_close_shutdown+0x1b8>)
 80049ca:	f001 f89f 	bl	8005b0c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff feb4 	bl	800473c <tcp_free_listen>
      break;
 80049d4:	e00f      	b.n	80049f6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	480d      	ldr	r0, [pc, #52]	; (8004a10 <tcp_close_shutdown+0x1a8>)
 80049da:	f001 f897 	bl	8005b0c <tcp_pcb_remove>
 80049de:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <tcp_close_shutdown+0x1ac>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff fe8d 	bl	8004704 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80049ea:	e004      	b.n	80049f6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f819 	bl	8004a24 <tcp_close_shutdown_fin>
 80049f2:	4603      	mov	r3, r0
 80049f4:	e000      	b.n	80049f8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004a00:	0800de38 	.word	0x0800de38
 8004a04:	0800df0c 	.word	0x0800df0c
 8004a08:	0800de7c 	.word	0x0800de7c
 8004a0c:	0800df2c 	.word	0x0800df2c
 8004a10:	20006888 	.word	0x20006888
 8004a14:	20006884 	.word	0x20006884
 8004a18:	2000689c 	.word	0x2000689c
 8004a1c:	20006894 	.word	0x20006894
 8004a20:	20006890 	.word	0x20006890

08004a24 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <tcp_close_shutdown_fin+0x1c>
 8004a32:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <tcp_close_shutdown_fin+0xc0>)
 8004a34:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8004a38:	492b      	ldr	r1, [pc, #172]	; (8004ae8 <tcp_close_shutdown_fin+0xc4>)
 8004a3a:	482c      	ldr	r0, [pc, #176]	; (8004aec <tcp_close_shutdown_fin+0xc8>)
 8004a3c:	f007 fd6a 	bl	800c514 <iprintf>

  switch (pcb->state) {
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	7d1b      	ldrb	r3, [r3, #20]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d010      	beq.n	8004a6a <tcp_close_shutdown_fin+0x46>
 8004a48:	2b07      	cmp	r3, #7
 8004a4a:	d01b      	beq.n	8004a84 <tcp_close_shutdown_fin+0x60>
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d126      	bne.n	8004a9e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f003 fedb 	bl	800880c <tcp_send_fin>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8004a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11f      	bne.n	8004aa2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2205      	movs	r2, #5
 8004a66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8004a68:	e01b      	b.n	8004aa2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f003 fece 	bl	800880c <tcp_send_fin>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8004a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d114      	bne.n	8004aa6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2205      	movs	r2, #5
 8004a80:	751a      	strb	r2, [r3, #20]
      }
      break;
 8004a82:	e010      	b.n	8004aa6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f003 fec1 	bl	800880c <tcp_send_fin>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8004a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2209      	movs	r2, #9
 8004a9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8004a9c:	e005      	b.n	8004aaa <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e01c      	b.n	8004adc <tcp_close_shutdown_fin+0xb8>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <tcp_close_shutdown_fin+0x88>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <tcp_close_shutdown_fin+0x88>
      break;
 8004aaa:	bf00      	nop
  }

  if (err == ERR_OK) {
 8004aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d103      	bne.n	8004abc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f003 ffe7 	bl	8008a88 <tcp_output>
 8004aba:	e00d      	b.n	8004ad8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8004abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac4:	d108      	bne.n	8004ad8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8b5b      	ldrh	r3, [r3, #26]
 8004aca:	f043 0308 	orr.w	r3, r3, #8
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e001      	b.n	8004adc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8004ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	0800de38 	.word	0x0800de38
 8004ae8:	0800dee8 	.word	0x0800dee8
 8004aec:	0800de7c 	.word	0x0800de7c

08004af0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <tcp_close+0x22>
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <tcp_close+0x4c>)
 8004b00:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004b04:	490e      	ldr	r1, [pc, #56]	; (8004b40 <tcp_close+0x50>)
 8004b06:	480f      	ldr	r0, [pc, #60]	; (8004b44 <tcp_close+0x54>)
 8004b08:	f007 fd04 	bl	800c514 <iprintf>
 8004b0c:	f06f 030f 	mvn.w	r3, #15
 8004b10:	e00f      	b.n	8004b32 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	7d1b      	ldrb	r3, [r3, #20]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d006      	beq.n	8004b28 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8b5b      	ldrh	r3, [r3, #26]
 8004b1e:	f043 0310 	orr.w	r3, r3, #16
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8004b28:	2101      	movs	r1, #1
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff fe9c 	bl	8004868 <tcp_close_shutdown>
 8004b30:	4603      	mov	r3, r0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	0800de38 	.word	0x0800de38
 8004b40:	0800df48 	.word	0x0800df48
 8004b44:	0800de7c 	.word	0x0800de7c

08004b48 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08e      	sub	sp, #56	; 0x38
 8004b4c:	af04      	add	r7, sp, #16
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d107      	bne.n	8004b68 <tcp_abandon+0x20>
 8004b58:	4b52      	ldr	r3, [pc, #328]	; (8004ca4 <tcp_abandon+0x15c>)
 8004b5a:	f240 223d 	movw	r2, #573	; 0x23d
 8004b5e:	4952      	ldr	r1, [pc, #328]	; (8004ca8 <tcp_abandon+0x160>)
 8004b60:	4852      	ldr	r0, [pc, #328]	; (8004cac <tcp_abandon+0x164>)
 8004b62:	f007 fcd7 	bl	800c514 <iprintf>
 8004b66:	e099      	b.n	8004c9c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7d1b      	ldrb	r3, [r3, #20]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d106      	bne.n	8004b7e <tcp_abandon+0x36>
 8004b70:	4b4c      	ldr	r3, [pc, #304]	; (8004ca4 <tcp_abandon+0x15c>)
 8004b72:	f240 2241 	movw	r2, #577	; 0x241
 8004b76:	494e      	ldr	r1, [pc, #312]	; (8004cb0 <tcp_abandon+0x168>)
 8004b78:	484c      	ldr	r0, [pc, #304]	; (8004cac <tcp_abandon+0x164>)
 8004b7a:	f007 fccb 	bl	800c514 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	7d1b      	ldrb	r3, [r3, #20]
 8004b82:	2b0a      	cmp	r3, #10
 8004b84:	d107      	bne.n	8004b96 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	484a      	ldr	r0, [pc, #296]	; (8004cb4 <tcp_abandon+0x16c>)
 8004b8a:	f000 ffbf 	bl	8005b0c <tcp_pcb_remove>
    tcp_free(pcb);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fdb8 	bl	8004704 <tcp_free>
 8004b94:	e082      	b.n	8004c9c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	7d1b      	ldrb	r3, [r3, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d126      	bne.n	8004c0e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8adb      	ldrh	r3, [r3, #22]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d02e      	beq.n	8004c26 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004bc8:	4b3b      	ldr	r3, [pc, #236]	; (8004cb8 <tcp_abandon+0x170>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d105      	bne.n	8004bde <tcp_abandon+0x96>
 8004bd2:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <tcp_abandon+0x170>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a37      	ldr	r2, [pc, #220]	; (8004cb8 <tcp_abandon+0x170>)
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	e013      	b.n	8004c06 <tcp_abandon+0xbe>
 8004bde:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <tcp_abandon+0x170>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	e00c      	b.n	8004c00 <tcp_abandon+0xb8>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d104      	bne.n	8004bfa <tcp_abandon+0xb2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	e005      	b.n	8004c06 <tcp_abandon+0xbe>
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1ef      	bne.n	8004be6 <tcp_abandon+0x9e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	60da      	str	r2, [r3, #12]
 8004c0c:	e00b      	b.n	8004c26 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8adb      	ldrh	r3, [r3, #22]
 8004c16:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4828      	ldr	r0, [pc, #160]	; (8004cbc <tcp_abandon+0x174>)
 8004c1c:	f000 ff76 	bl	8005b0c <tcp_pcb_remove>
 8004c20:	4b27      	ldr	r3, [pc, #156]	; (8004cc0 <tcp_abandon+0x178>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fd1a 	bl	800566c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fd11 	bl	800566c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d004      	beq.n	8004c5c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fd08 	bl	800566c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00e      	beq.n	8004c80 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	8b12      	ldrh	r2, [r2, #24]
 8004c6c:	9202      	str	r2, [sp, #8]
 8004c6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004c70:	9201      	str	r2, [sp, #4]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	460b      	mov	r3, r1
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	69b9      	ldr	r1, [r7, #24]
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f004 fcc8 	bl	8009610 <tcp_rst>
    }
    last_state = pcb->state;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7d1b      	ldrb	r3, [r3, #20]
 8004c84:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fd3c 	bl	8004704 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <tcp_abandon+0x154>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f06f 010c 	mvn.w	r1, #12
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	4798      	blx	r3
  }
}
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	0800de38 	.word	0x0800de38
 8004ca8:	0800df7c 	.word	0x0800df7c
 8004cac:	0800de7c 	.word	0x0800de7c
 8004cb0:	0800df98 	.word	0x0800df98
 8004cb4:	20006898 	.word	0x20006898
 8004cb8:	20006894 	.word	0x20006894
 8004cbc:	20006888 	.word	0x20006888
 8004cc0:	20006884 	.word	0x20006884

08004cc4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8004ccc:	2101      	movs	r1, #1
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff ff3a 	bl	8004b48 <tcp_abandon>
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <tcp_update_rcv_ann_wnd+0x1c>
 8004cea:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <tcp_update_rcv_ann_wnd+0xa4>)
 8004cec:	f240 32a6 	movw	r2, #934	; 0x3a6
 8004cf0:	4924      	ldr	r1, [pc, #144]	; (8004d84 <tcp_update_rcv_ann_wnd+0xa8>)
 8004cf2:	4825      	ldr	r0, [pc, #148]	; (8004d88 <tcp_update_rcv_ann_wnd+0xac>)
 8004cf4:	f007 fc0e 	bl	800c514 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004d00:	4413      	add	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004d0c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004d10:	bf28      	it	cs
 8004d12:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8004d16:	b292      	uxth	r2, r2
 8004d18:	4413      	add	r3, r2
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	db08      	blt.n	8004d34 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	e020      	b.n	8004d76 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	dd03      	ble.n	8004d4a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d48:	e014      	b.n	8004d74 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5c:	d306      	bcc.n	8004d6c <tcp_update_rcv_ann_wnd+0x90>
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <tcp_update_rcv_ann_wnd+0xa4>)
 8004d60:	f240 32b6 	movw	r2, #950	; 0x3b6
 8004d64:	4909      	ldr	r1, [pc, #36]	; (8004d8c <tcp_update_rcv_ann_wnd+0xb0>)
 8004d66:	4808      	ldr	r0, [pc, #32]	; (8004d88 <tcp_update_rcv_ann_wnd+0xac>)
 8004d68:	f007 fbd4 	bl	800c514 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8004d74:	2300      	movs	r3, #0
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	0800de38 	.word	0x0800de38
 8004d84:	0800e094 	.word	0x0800e094
 8004d88:	0800de7c 	.word	0x0800de7c
 8004d8c:	0800e0b8 	.word	0x0800e0b8

08004d90 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <tcp_recved+0x22>
 8004da2:	4b1f      	ldr	r3, [pc, #124]	; (8004e20 <tcp_recved+0x90>)
 8004da4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8004da8:	491e      	ldr	r1, [pc, #120]	; (8004e24 <tcp_recved+0x94>)
 8004daa:	481f      	ldr	r0, [pc, #124]	; (8004e28 <tcp_recved+0x98>)
 8004dac:	f007 fbb2 	bl	800c514 <iprintf>
 8004db0:	e032      	b.n	8004e18 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	7d1b      	ldrb	r3, [r3, #20]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d106      	bne.n	8004dc8 <tcp_recved+0x38>
 8004dba:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <tcp_recved+0x90>)
 8004dbc:	f240 32d3 	movw	r2, #979	; 0x3d3
 8004dc0:	491a      	ldr	r1, [pc, #104]	; (8004e2c <tcp_recved+0x9c>)
 8004dc2:	4819      	ldr	r0, [pc, #100]	; (8004e28 <tcp_recved+0x98>)
 8004dc4:	f007 fba6 	bl	800c514 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004dcc:	887b      	ldrh	r3, [r7, #2]
 8004dce:	4413      	add	r3, r2
 8004dd0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8004dd2:	89fb      	ldrh	r3, [r7, #14]
 8004dd4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8004dd8:	d804      	bhi.n	8004de4 <tcp_recved+0x54>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dde:	89fa      	ldrh	r2, [r7, #14]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d204      	bcs.n	8004dee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8004dea:	851a      	strh	r2, [r3, #40]	; 0x28
 8004dec:	e002      	b.n	8004df4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	89fa      	ldrh	r2, [r7, #14]
 8004df2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff71 	bl	8004cdc <tcp_update_rcv_ann_wnd>
 8004dfa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8004e02:	d309      	bcc.n	8004e18 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8b5b      	ldrh	r3, [r3, #26]
 8004e08:	f043 0302 	orr.w	r3, r3, #2
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f003 fe38 	bl	8008a88 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	0800de38 	.word	0x0800de38
 8004e24:	0800e0d4 	.word	0x0800e0d4
 8004e28:	0800de7c 	.word	0x0800de7c
 8004e2c:	0800e0ec 	.word	0x0800e0ec

08004e30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8004e30:	b5b0      	push	{r4, r5, r7, lr}
 8004e32:	b090      	sub	sp, #64	; 0x40
 8004e34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8004e3c:	4b94      	ldr	r3, [pc, #592]	; (8005090 <tcp_slowtmr+0x260>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	4a93      	ldr	r2, [pc, #588]	; (8005090 <tcp_slowtmr+0x260>)
 8004e44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8004e46:	4b93      	ldr	r3, [pc, #588]	; (8005094 <tcp_slowtmr+0x264>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	4b91      	ldr	r3, [pc, #580]	; (8005094 <tcp_slowtmr+0x264>)
 8004e50:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8004e56:	4b90      	ldr	r3, [pc, #576]	; (8005098 <tcp_slowtmr+0x268>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8004e5c:	e29f      	b.n	800539e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	7d1b      	ldrb	r3, [r3, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <tcp_slowtmr+0x44>
 8004e66:	4b8d      	ldr	r3, [pc, #564]	; (800509c <tcp_slowtmr+0x26c>)
 8004e68:	f240 42be 	movw	r2, #1214	; 0x4be
 8004e6c:	498c      	ldr	r1, [pc, #560]	; (80050a0 <tcp_slowtmr+0x270>)
 8004e6e:	488d      	ldr	r0, [pc, #564]	; (80050a4 <tcp_slowtmr+0x274>)
 8004e70:	f007 fb50 	bl	800c514 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	7d1b      	ldrb	r3, [r3, #20]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d106      	bne.n	8004e8a <tcp_slowtmr+0x5a>
 8004e7c:	4b87      	ldr	r3, [pc, #540]	; (800509c <tcp_slowtmr+0x26c>)
 8004e7e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8004e82:	4989      	ldr	r1, [pc, #548]	; (80050a8 <tcp_slowtmr+0x278>)
 8004e84:	4887      	ldr	r0, [pc, #540]	; (80050a4 <tcp_slowtmr+0x274>)
 8004e86:	f007 fb45 	bl	800c514 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	7d1b      	ldrb	r3, [r3, #20]
 8004e8e:	2b0a      	cmp	r3, #10
 8004e90:	d106      	bne.n	8004ea0 <tcp_slowtmr+0x70>
 8004e92:	4b82      	ldr	r3, [pc, #520]	; (800509c <tcp_slowtmr+0x26c>)
 8004e94:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8004e98:	4984      	ldr	r1, [pc, #528]	; (80050ac <tcp_slowtmr+0x27c>)
 8004e9a:	4882      	ldr	r0, [pc, #520]	; (80050a4 <tcp_slowtmr+0x274>)
 8004e9c:	f007 fb3a 	bl	800c514 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	7f9a      	ldrb	r2, [r3, #30]
 8004ea4:	4b7b      	ldr	r3, [pc, #492]	; (8005094 <tcp_slowtmr+0x264>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d105      	bne.n	8004eb8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8004eb6:	e272      	b.n	800539e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8004eb8:	4b76      	ldr	r3, [pc, #472]	; (8005094 <tcp_slowtmr+0x264>)
 8004eba:	781a      	ldrb	r2, [r3, #0]
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	7d1b      	ldrb	r3, [r3, #20]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d10a      	bne.n	8004eea <tcp_slowtmr+0xba>
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d905      	bls.n	8004eea <tcp_slowtmr+0xba>
      ++pcb_remove;
 8004ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ee8:	e11e      	b.n	8005128 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ef0:	2b0b      	cmp	r3, #11
 8004ef2:	d905      	bls.n	8004f00 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8004ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004efe:	e113      	b.n	8005128 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d075      	beq.n	8004ff6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <tcp_slowtmr+0xf0>
 8004f12:	4b62      	ldr	r3, [pc, #392]	; (800509c <tcp_slowtmr+0x26c>)
 8004f14:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8004f18:	4965      	ldr	r1, [pc, #404]	; (80050b0 <tcp_slowtmr+0x280>)
 8004f1a:	4862      	ldr	r0, [pc, #392]	; (80050a4 <tcp_slowtmr+0x274>)
 8004f1c:	f007 fafa 	bl	800c514 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <tcp_slowtmr+0x106>
 8004f28:	4b5c      	ldr	r3, [pc, #368]	; (800509c <tcp_slowtmr+0x26c>)
 8004f2a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8004f2e:	4961      	ldr	r1, [pc, #388]	; (80050b4 <tcp_slowtmr+0x284>)
 8004f30:	485c      	ldr	r0, [pc, #368]	; (80050a4 <tcp_slowtmr+0x274>)
 8004f32:	f007 faef 	bl	800c514 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8004f3c:	2b0b      	cmp	r3, #11
 8004f3e:	d905      	bls.n	8004f4c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8004f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f44:	3301      	adds	r3, #1
 8004f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f4a:	e0ed      	b.n	8005128 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004f52:	3b01      	subs	r3, #1
 8004f54:	4a58      	ldr	r2, [pc, #352]	; (80050b8 <tcp_slowtmr+0x288>)
 8004f56:	5cd3      	ldrb	r3, [r2, r3]
 8004f58:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004f60:	7c7a      	ldrb	r2, [r7, #17]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d907      	bls.n	8004f76 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004f7c:	7c7a      	ldrb	r2, [r7, #17]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	f200 80d2 	bhi.w	8005128 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8004f84:	2301      	movs	r3, #1
 8004f86:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d108      	bne.n	8004fa4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8004f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f94:	f004 fc30 	bl	80097f8 <tcp_zero_window_probe>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d014      	beq.n	8004fc8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	e011      	b.n	8004fc8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004faa:	4619      	mov	r1, r3
 8004fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fae:	f003 fae5 	bl	800857c <tcp_split_unsent_seg>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d107      	bne.n	8004fc8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8004fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fba:	f003 fd65 	bl	8008a88 <tcp_output>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80ac 	beq.w	8005128 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	f200 80a2 	bhi.w	8005128 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004fea:	3301      	adds	r3, #1
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8004ff4:	e098      	b.n	8005128 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	db0f      	blt.n	8005020 <tcp_slowtmr+0x1f0>
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005006:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800500a:	4293      	cmp	r3, r2
 800500c:	d008      	beq.n	8005020 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005014:	b29b      	uxth	r3, r3
 8005016:	3301      	adds	r3, #1
 8005018:	b29b      	uxth	r3, r3
 800501a:	b21a      	sxth	r2, r3
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800502c:	429a      	cmp	r2, r3
 800502e:	db7b      	blt.n	8005128 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005032:	f004 f821 	bl	8009078 <tcp_rexmit_rto_prepare>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <tcp_slowtmr+0x21c>
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	2b00      	cmp	r3, #0
 8005042:	d171      	bne.n	8005128 <tcp_slowtmr+0x2f8>
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d06d      	beq.n	8005128 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	7d1b      	ldrb	r3, [r3, #20]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d03a      	beq.n	80050ca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800505a:	2b0c      	cmp	r3, #12
 800505c:	bf28      	it	cs
 800505e:	230c      	movcs	r3, #12
 8005060:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005068:	10db      	asrs	r3, r3, #3
 800506a:	b21b      	sxth	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005074:	4413      	add	r3, r2
 8005076:	7efa      	ldrb	r2, [r7, #27]
 8005078:	4910      	ldr	r1, [pc, #64]	; (80050bc <tcp_slowtmr+0x28c>)
 800507a:	5c8a      	ldrb	r2, [r1, r2]
 800507c:	4093      	lsls	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005086:	4293      	cmp	r3, r2
 8005088:	dc1a      	bgt.n	80050c0 <tcp_slowtmr+0x290>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	b21a      	sxth	r2, r3
 800508e:	e019      	b.n	80050c4 <tcp_slowtmr+0x294>
 8005090:	2000688c 	.word	0x2000688c
 8005094:	200000ca 	.word	0x200000ca
 8005098:	20006888 	.word	0x20006888
 800509c:	0800de38 	.word	0x0800de38
 80050a0:	0800e17c 	.word	0x0800e17c
 80050a4:	0800de7c 	.word	0x0800de7c
 80050a8:	0800e1a8 	.word	0x0800e1a8
 80050ac:	0800e1d4 	.word	0x0800e1d4
 80050b0:	0800e204 	.word	0x0800e204
 80050b4:	0800e238 	.word	0x0800e238
 80050b8:	0800fdfc 	.word	0x0800fdfc
 80050bc:	0800fdec 	.word	0x0800fdec
 80050c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	2200      	movs	r2, #0
 80050ce:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80050dc:	4293      	cmp	r3, r2
 80050de:	bf28      	it	cs
 80050e0:	4613      	movcs	r3, r2
 80050e2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80050e4:	8a7b      	ldrh	r3, [r7, #18]
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	429a      	cmp	r2, r3
 8005100:	d206      	bcs.n	8005110 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	2200      	movs	r2, #0
 800511e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005124:	f004 f818 	bl	8009158 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	7d1b      	ldrb	r3, [r3, #20]
 800512c:	2b06      	cmp	r3, #6
 800512e:	d111      	bne.n	8005154 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	8b5b      	ldrh	r3, [r3, #26]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800513c:	4b9d      	ldr	r3, [pc, #628]	; (80053b4 <tcp_slowtmr+0x584>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b28      	cmp	r3, #40	; 0x28
 8005148:	d904      	bls.n	8005154 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800514a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800514e:	3301      	adds	r3, #1
 8005150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	7a5b      	ldrb	r3, [r3, #9]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d04c      	beq.n	80051fa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005164:	2b04      	cmp	r3, #4
 8005166:	d003      	beq.n	8005170 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800516c:	2b07      	cmp	r3, #7
 800516e:	d144      	bne.n	80051fa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005170:	4b90      	ldr	r3, [pc, #576]	; (80053b4 <tcp_slowtmr+0x584>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005180:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005184:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005188:	498b      	ldr	r1, [pc, #556]	; (80053b8 <tcp_slowtmr+0x588>)
 800518a:	fba1 1303 	umull	r1, r3, r1, r3
 800518e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005190:	429a      	cmp	r2, r3
 8005192:	d90a      	bls.n	80051aa <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005198:	3301      	adds	r3, #1
 800519a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800519e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051a2:	3301      	adds	r3, #1
 80051a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80051a8:	e027      	b.n	80051fa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80051aa:	4b82      	ldr	r3, [pc, #520]	; (80053b4 <tcp_slowtmr+0x584>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80051c0:	4618      	mov	r0, r3
 80051c2:	4b7e      	ldr	r3, [pc, #504]	; (80053bc <tcp_slowtmr+0x58c>)
 80051c4:	fb03 f300 	mul.w	r3, r3, r0
 80051c8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80051ca:	497b      	ldr	r1, [pc, #492]	; (80053b8 <tcp_slowtmr+0x588>)
 80051cc:	fba1 1303 	umull	r1, r3, r1, r3
 80051d0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d911      	bls.n	80051fa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80051d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051d8:	f004 face 	bl	8009778 <tcp_keepalive>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80051e2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d107      	bne.n	80051fa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80051f0:	3301      	adds	r3, #1
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80051fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d011      	beq.n	8005226 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005202:	4b6c      	ldr	r3, [pc, #432]	; (80053b4 <tcp_slowtmr+0x584>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	1ad2      	subs	r2, r2, r3
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005212:	4619      	mov	r1, r3
 8005214:	460b      	mov	r3, r1
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	440b      	add	r3, r1
 800521a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800521c:	429a      	cmp	r2, r3
 800521e:	d302      	bcc.n	8005226 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005222:	f000 fdd7 	bl	8005dd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	7d1b      	ldrb	r3, [r3, #20]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d10b      	bne.n	8005246 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800522e:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <tcp_slowtmr+0x584>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b28      	cmp	r3, #40	; 0x28
 800523a:	d904      	bls.n	8005246 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800523c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005240:	3301      	adds	r3, #1
 8005242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	7d1b      	ldrb	r3, [r3, #20]
 800524a:	2b09      	cmp	r3, #9
 800524c:	d10b      	bne.n	8005266 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800524e:	4b59      	ldr	r3, [pc, #356]	; (80053b4 <tcp_slowtmr+0x584>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2bf0      	cmp	r3, #240	; 0xf0
 800525a:	d904      	bls.n	8005266 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800525c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005260:	3301      	adds	r3, #1
 8005262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800526a:	2b00      	cmp	r3, #0
 800526c:	d060      	beq.n	8005330 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005278:	f000 fbf8 	bl	8005a6c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d010      	beq.n	80052a4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005282:	4b4f      	ldr	r3, [pc, #316]	; (80053c0 <tcp_slowtmr+0x590>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005288:	429a      	cmp	r2, r3
 800528a:	d106      	bne.n	800529a <tcp_slowtmr+0x46a>
 800528c:	4b4d      	ldr	r3, [pc, #308]	; (80053c4 <tcp_slowtmr+0x594>)
 800528e:	f240 526d 	movw	r2, #1389	; 0x56d
 8005292:	494d      	ldr	r1, [pc, #308]	; (80053c8 <tcp_slowtmr+0x598>)
 8005294:	484d      	ldr	r0, [pc, #308]	; (80053cc <tcp_slowtmr+0x59c>)
 8005296:	f007 f93d 	bl	800c514 <iprintf>
        prev->next = pcb->next;
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	e00f      	b.n	80052c4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80052a4:	4b46      	ldr	r3, [pc, #280]	; (80053c0 <tcp_slowtmr+0x590>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d006      	beq.n	80052bc <tcp_slowtmr+0x48c>
 80052ae:	4b45      	ldr	r3, [pc, #276]	; (80053c4 <tcp_slowtmr+0x594>)
 80052b0:	f240 5271 	movw	r2, #1393	; 0x571
 80052b4:	4946      	ldr	r1, [pc, #280]	; (80053d0 <tcp_slowtmr+0x5a0>)
 80052b6:	4845      	ldr	r0, [pc, #276]	; (80053cc <tcp_slowtmr+0x59c>)
 80052b8:	f007 f92c 	bl	800c514 <iprintf>
        tcp_active_pcbs = pcb->next;
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4a3f      	ldr	r2, [pc, #252]	; (80053c0 <tcp_slowtmr+0x590>)
 80052c2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80052c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d013      	beq.n	80052f4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80052d4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	3304      	adds	r3, #4
 80052da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052dc:	8ad2      	ldrh	r2, [r2, #22]
 80052de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052e0:	8b09      	ldrh	r1, [r1, #24]
 80052e2:	9102      	str	r1, [sp, #8]
 80052e4:	9201      	str	r2, [sp, #4]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	462b      	mov	r3, r5
 80052ea:	4622      	mov	r2, r4
 80052ec:	4601      	mov	r1, r0
 80052ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052f0:	f004 f98e 	bl	8009610 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	7d1b      	ldrb	r3, [r3, #20]
 80052fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800530a:	6838      	ldr	r0, [r7, #0]
 800530c:	f7ff f9fa 	bl	8004704 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005310:	4b30      	ldr	r3, [pc, #192]	; (80053d4 <tcp_slowtmr+0x5a4>)
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <tcp_slowtmr+0x4f6>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f06f 010c 	mvn.w	r1, #12
 8005322:	68b8      	ldr	r0, [r7, #8]
 8005324:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005326:	4b2b      	ldr	r3, [pc, #172]	; (80053d4 <tcp_slowtmr+0x5a4>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d037      	beq.n	800539e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800532e:	e590      	b.n	8004e52 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	7f1b      	ldrb	r3, [r3, #28]
 800533e:	3301      	adds	r3, #1
 8005340:	b2da      	uxtb	r2, r3
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	7f1a      	ldrb	r2, [r3, #28]
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	7f5b      	ldrb	r3, [r3, #29]
 800534e:	429a      	cmp	r2, r3
 8005350:	d325      	bcc.n	800539e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005358:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <tcp_slowtmr+0x5a4>)
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00b      	beq.n	8005380 <tcp_slowtmr+0x550>
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005370:	6912      	ldr	r2, [r2, #16]
 8005372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005374:	4610      	mov	r0, r2
 8005376:	4798      	blx	r3
 8005378:	4603      	mov	r3, r0
 800537a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800537e:	e002      	b.n	8005386 <tcp_slowtmr+0x556>
 8005380:	2300      	movs	r3, #0
 8005382:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <tcp_slowtmr+0x5a4>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d000      	beq.n	8005390 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800538e:	e560      	b.n	8004e52 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005390:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8005398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800539a:	f003 fb75 	bl	8008a88 <tcp_output>
  while (pcb != NULL) {
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f47f ad5c 	bne.w	8004e5e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <tcp_slowtmr+0x5a8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80053b0:	e067      	b.n	8005482 <tcp_slowtmr+0x652>
 80053b2:	bf00      	nop
 80053b4:	2000688c 	.word	0x2000688c
 80053b8:	10624dd3 	.word	0x10624dd3
 80053bc:	000124f8 	.word	0x000124f8
 80053c0:	20006888 	.word	0x20006888
 80053c4:	0800de38 	.word	0x0800de38
 80053c8:	0800e270 	.word	0x0800e270
 80053cc:	0800de7c 	.word	0x0800de7c
 80053d0:	0800e29c 	.word	0x0800e29c
 80053d4:	20006884 	.word	0x20006884
 80053d8:	20006898 	.word	0x20006898
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	7d1b      	ldrb	r3, [r3, #20]
 80053e0:	2b0a      	cmp	r3, #10
 80053e2:	d006      	beq.n	80053f2 <tcp_slowtmr+0x5c2>
 80053e4:	4b2a      	ldr	r3, [pc, #168]	; (8005490 <tcp_slowtmr+0x660>)
 80053e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80053ea:	492a      	ldr	r1, [pc, #168]	; (8005494 <tcp_slowtmr+0x664>)
 80053ec:	482a      	ldr	r0, [pc, #168]	; (8005498 <tcp_slowtmr+0x668>)
 80053ee:	f007 f891 	bl	800c514 <iprintf>
    pcb_remove = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80053f8:	4b28      	ldr	r3, [pc, #160]	; (800549c <tcp_slowtmr+0x66c>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2bf0      	cmp	r3, #240	; 0xf0
 8005404:	d904      	bls.n	8005410 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8005406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800540a:	3301      	adds	r3, #1
 800540c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005414:	2b00      	cmp	r3, #0
 8005416:	d02f      	beq.n	8005478 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800541a:	f000 fb27 	bl	8005a6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005424:	4b1e      	ldr	r3, [pc, #120]	; (80054a0 <tcp_slowtmr+0x670>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542a:	429a      	cmp	r2, r3
 800542c:	d106      	bne.n	800543c <tcp_slowtmr+0x60c>
 800542e:	4b18      	ldr	r3, [pc, #96]	; (8005490 <tcp_slowtmr+0x660>)
 8005430:	f240 52af 	movw	r2, #1455	; 0x5af
 8005434:	491b      	ldr	r1, [pc, #108]	; (80054a4 <tcp_slowtmr+0x674>)
 8005436:	4818      	ldr	r0, [pc, #96]	; (8005498 <tcp_slowtmr+0x668>)
 8005438:	f007 f86c 	bl	800c514 <iprintf>
        prev->next = pcb->next;
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	60da      	str	r2, [r3, #12]
 8005444:	e00f      	b.n	8005466 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <tcp_slowtmr+0x670>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d006      	beq.n	800545e <tcp_slowtmr+0x62e>
 8005450:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <tcp_slowtmr+0x660>)
 8005452:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005456:	4914      	ldr	r1, [pc, #80]	; (80054a8 <tcp_slowtmr+0x678>)
 8005458:	480f      	ldr	r0, [pc, #60]	; (8005498 <tcp_slowtmr+0x668>)
 800545a:	f007 f85b 	bl	800c514 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	4a0f      	ldr	r2, [pc, #60]	; (80054a0 <tcp_slowtmr+0x670>)
 8005464:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005470:	69f8      	ldr	r0, [r7, #28]
 8005472:	f7ff f947 	bl	8004704 <tcp_free>
 8005476:	e004      	b.n	8005482 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1a9      	bne.n	80053dc <tcp_slowtmr+0x5ac>
    }
  }
}
 8005488:	bf00      	nop
 800548a:	3730      	adds	r7, #48	; 0x30
 800548c:	46bd      	mov	sp, r7
 800548e:	bdb0      	pop	{r4, r5, r7, pc}
 8005490:	0800de38 	.word	0x0800de38
 8005494:	0800e2c8 	.word	0x0800e2c8
 8005498:	0800de7c 	.word	0x0800de7c
 800549c:	2000688c 	.word	0x2000688c
 80054a0:	20006898 	.word	0x20006898
 80054a4:	0800e2f8 	.word	0x0800e2f8
 80054a8:	0800e320 	.word	0x0800e320

080054ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80054b2:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <tcp_fasttmr+0xbc>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	3301      	adds	r3, #1
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <tcp_fasttmr+0xbc>)
 80054bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80054be:	4b2b      	ldr	r3, [pc, #172]	; (800556c <tcp_fasttmr+0xc0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80054c4:	e048      	b.n	8005558 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7f9a      	ldrb	r2, [r3, #30]
 80054ca:	4b27      	ldr	r3, [pc, #156]	; (8005568 <tcp_fasttmr+0xbc>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d03f      	beq.n	8005552 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80054d2:	4b25      	ldr	r3, [pc, #148]	; (8005568 <tcp_fasttmr+0xbc>)
 80054d4:	781a      	ldrb	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8b5b      	ldrh	r3, [r3, #26]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d010      	beq.n	8005508 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8b5b      	ldrh	r3, [r3, #26]
 80054ea:	f043 0302 	orr.w	r3, r3, #2
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f003 fac7 	bl	8008a88 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8b5b      	ldrh	r3, [r3, #26]
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8b5b      	ldrh	r3, [r3, #26]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8b5b      	ldrh	r3, [r3, #26]
 8005518:	f023 0308 	bic.w	r3, r3, #8
 800551c:	b29a      	uxth	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff fa7e 	bl	8004a24 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8005536:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <tcp_fasttmr+0xc4>)
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f819 	bl	8005574 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <tcp_fasttmr+0xc4>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d000      	beq.n	800554c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800554a:	e7b8      	b.n	80054be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	e002      	b.n	8005558 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1b3      	bne.n	80054c6 <tcp_fasttmr+0x1a>
    }
  }
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200000ca 	.word	0x200000ca
 800556c:	20006888 	.word	0x20006888
 8005570:	20006884 	.word	0x20006884

08005574 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <tcp_process_refused_data+0x22>
 8005582:	4b37      	ldr	r3, [pc, #220]	; (8005660 <tcp_process_refused_data+0xec>)
 8005584:	f240 6209 	movw	r2, #1545	; 0x609
 8005588:	4936      	ldr	r1, [pc, #216]	; (8005664 <tcp_process_refused_data+0xf0>)
 800558a:	4837      	ldr	r0, [pc, #220]	; (8005668 <tcp_process_refused_data+0xf4>)
 800558c:	f006 ffc2 	bl	800c514 <iprintf>
 8005590:	f06f 030f 	mvn.w	r3, #15
 8005594:	e060      	b.n	8005658 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559a:	7b5b      	ldrb	r3, [r3, #13]
 800559c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <tcp_process_refused_data+0x58>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6918      	ldr	r0, [r3, #16]
 80055be:	2300      	movs	r3, #0
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	47a0      	blx	r4
 80055c6:	4603      	mov	r3, r0
 80055c8:	73fb      	strb	r3, [r7, #15]
 80055ca:	e007      	b.n	80055dc <tcp_process_refused_data+0x68>
 80055cc:	2300      	movs	r3, #0
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	2000      	movs	r0, #0
 80055d4:	f000 f8a2 	bl	800571c <tcp_recv_null>
 80055d8:	4603      	mov	r3, r0
 80055da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80055dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d12a      	bne.n	800563a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d033      	beq.n	8005656 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80055f6:	d005      	beq.n	8005604 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	3301      	adds	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <tcp_process_refused_data+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6918      	ldr	r0, [r3, #16]
 8005618:	2300      	movs	r3, #0
 800561a:	2200      	movs	r2, #0
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	47a0      	blx	r4
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]
 8005624:	e001      	b.n	800562a <tcp_process_refused_data+0xb6>
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800562a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562e:	f113 0f0d 	cmn.w	r3, #13
 8005632:	d110      	bne.n	8005656 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8005634:	f06f 030c 	mvn.w	r3, #12
 8005638:	e00e      	b.n	8005658 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800563a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563e:	f113 0f0d 	cmn.w	r3, #13
 8005642:	d102      	bne.n	800564a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8005644:	f06f 030c 	mvn.w	r3, #12
 8005648:	e006      	b.n	8005658 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8005650:	f06f 0304 	mvn.w	r3, #4
 8005654:	e000      	b.n	8005658 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bd90      	pop	{r4, r7, pc}
 8005660:	0800de38 	.word	0x0800de38
 8005664:	0800e348 	.word	0x0800e348
 8005668:	0800de7c 	.word	0x0800de7c

0800566c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8005674:	e007      	b.n	8005686 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f809 	bl	8005694 <tcp_seg_free>
    seg = next;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f4      	bne.n	8005676 <tcp_segs_free+0xa>
  }
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fd88 	bl	80041c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	2003      	movs	r0, #3
 80056b8:	f7fd ffaa 	bl	8003610 <memp_free>
  }
}
 80056bc:	bf00      	nop
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <tcp_seg_copy+0x1c>
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <tcp_seg_copy+0x4c>)
 80056d4:	f240 6282 	movw	r2, #1666	; 0x682
 80056d8:	490e      	ldr	r1, [pc, #56]	; (8005714 <tcp_seg_copy+0x50>)
 80056da:	480f      	ldr	r0, [pc, #60]	; (8005718 <tcp_seg_copy+0x54>)
 80056dc:	f006 ff1a 	bl	800c514 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80056e0:	2003      	movs	r0, #3
 80056e2:	f7fd ff49 	bl	8003578 <memp_malloc>
 80056e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <tcp_seg_copy+0x2e>
    return NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e00a      	b.n	8005708 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80056f2:	2210      	movs	r2, #16
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f006 fef9 	bl	800c4ee <memcpy>
  pbuf_ref(cseg->p);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fdff 	bl	8004304 <pbuf_ref>
  return cseg;
 8005706:	68fb      	ldr	r3, [r7, #12]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	0800de38 	.word	0x0800de38
 8005714:	0800e38c 	.word	0x0800e38c
 8005718:	0800de7c 	.word	0x0800de7c

0800571c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <tcp_recv_null+0x28>
 8005730:	4b12      	ldr	r3, [pc, #72]	; (800577c <tcp_recv_null+0x60>)
 8005732:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8005736:	4912      	ldr	r1, [pc, #72]	; (8005780 <tcp_recv_null+0x64>)
 8005738:	4812      	ldr	r0, [pc, #72]	; (8005784 <tcp_recv_null+0x68>)
 800573a:	f006 feeb 	bl	800c514 <iprintf>
 800573e:	f06f 030f 	mvn.w	r3, #15
 8005742:	e016      	b.n	8005772 <tcp_recv_null+0x56>

  if (p != NULL) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	891b      	ldrh	r3, [r3, #8]
 800574e:	4619      	mov	r1, r3
 8005750:	68b8      	ldr	r0, [r7, #8]
 8005752:	f7ff fb1d 	bl	8004d90 <tcp_recved>
    pbuf_free(p);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fe fd34 	bl	80041c4 <pbuf_free>
 800575c:	e008      	b.n	8005770 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800575e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8005766:	68b8      	ldr	r0, [r7, #8]
 8005768:	f7ff f9c2 	bl	8004af0 <tcp_close>
 800576c:	4603      	mov	r3, r0
 800576e:	e000      	b.n	8005772 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	0800de38 	.word	0x0800de38
 8005780:	0800e3a8 	.word	0x0800e3a8
 8005784:	0800de7c 	.word	0x0800de7c

08005788 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005796:	2b00      	cmp	r3, #0
 8005798:	db01      	blt.n	800579e <tcp_kill_prio+0x16>
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	e000      	b.n	80057a0 <tcp_kill_prio+0x18>
 800579e:	237f      	movs	r3, #127	; 0x7f
 80057a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80057a2:	7afb      	ldrb	r3, [r7, #11]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d034      	beq.n	8005812 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80057a8:	7afb      	ldrb	r3, [r7, #11]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <tcp_kill_prio+0x94>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e01f      	b.n	80057fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	7d5b      	ldrb	r3, [r3, #21]
 80057c2:	7afa      	ldrb	r2, [r7, #11]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d80c      	bhi.n	80057e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80057cc:	7afa      	ldrb	r2, [r7, #11]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d112      	bne.n	80057f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <tcp_kill_prio+0x98>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d80a      	bhi.n	80057f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80057e2:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <tcp_kill_prio+0x98>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	7d5b      	ldrb	r3, [r3, #21]
 80057f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1dc      	bne.n	80057be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800580a:	6938      	ldr	r0, [r7, #16]
 800580c:	f7ff fa5a 	bl	8004cc4 <tcp_abort>
 8005810:	e000      	b.n	8005814 <tcp_kill_prio+0x8c>
    return;
 8005812:	bf00      	nop
  }
}
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20006888 	.word	0x20006888
 8005820:	2000688c 	.word	0x2000688c

08005824 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d009      	beq.n	8005848 <tcp_kill_state+0x24>
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b09      	cmp	r3, #9
 8005838:	d006      	beq.n	8005848 <tcp_kill_state+0x24>
 800583a:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <tcp_kill_state+0x80>)
 800583c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8005840:	4919      	ldr	r1, [pc, #100]	; (80058a8 <tcp_kill_state+0x84>)
 8005842:	481a      	ldr	r0, [pc, #104]	; (80058ac <tcp_kill_state+0x88>)
 8005844:	f006 fe66 	bl	800c514 <iprintf>

  inactivity = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005850:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <tcp_kill_state+0x8c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e017      	b.n	8005888 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	7d1b      	ldrb	r3, [r3, #20]
 800585c:	79fa      	ldrb	r2, [r7, #7]
 800585e:	429a      	cmp	r2, r3
 8005860:	d10f      	bne.n	8005882 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005862:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <tcp_kill_state+0x90>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	429a      	cmp	r2, r3
 8005870:	d807      	bhi.n	8005882 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <tcp_kill_state+0x90>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e4      	bne.n	8005858 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8005894:	2100      	movs	r1, #0
 8005896:	6938      	ldr	r0, [r7, #16]
 8005898:	f7ff f956 	bl	8004b48 <tcp_abandon>
  }
}
 800589c:	bf00      	nop
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	0800de38 	.word	0x0800de38
 80058a8:	0800e3c4 	.word	0x0800e3c4
 80058ac:	0800de7c 	.word	0x0800de7c
 80058b0:	20006888 	.word	0x20006888
 80058b4:	2000688c 	.word	0x2000688c

080058b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80058c6:	4b12      	ldr	r3, [pc, #72]	; (8005910 <tcp_kill_timewait+0x58>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e012      	b.n	80058f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80058ce:	4b11      	ldr	r3, [pc, #68]	; (8005914 <tcp_kill_timewait+0x5c>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d807      	bhi.n	80058ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <tcp_kill_timewait+0x5c>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e9      	bne.n	80058ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005900:	68b8      	ldr	r0, [r7, #8]
 8005902:	f7ff f9df 	bl	8004cc4 <tcp_abort>
  }
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20006898 	.word	0x20006898
 8005914:	2000688c 	.word	0x2000688c

08005918 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <tcp_handle_closepend+0x48>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005924:	e014      	b.n	8005950 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8b5b      	ldrh	r3, [r3, #26]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8b5b      	ldrh	r3, [r3, #26]
 800593c:	f023 0308 	bic.w	r3, r3, #8
 8005940:	b29a      	uxth	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff f86c 	bl	8004a24 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e7      	bne.n	8005926 <tcp_handle_closepend+0xe>
  }
}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20006888 	.word	0x20006888

08005964 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800596e:	2001      	movs	r0, #1
 8005970:	f7fd fe02 	bl	8003578 <memp_malloc>
 8005974:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d126      	bne.n	80059ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800597c:	f7ff ffcc 	bl	8005918 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8005980:	f7ff ff9a 	bl	80058b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005984:	2001      	movs	r0, #1
 8005986:	f7fd fdf7 	bl	8003578 <memp_malloc>
 800598a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d11b      	bne.n	80059ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8005992:	2009      	movs	r0, #9
 8005994:	f7ff ff46 	bl	8005824 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005998:	2001      	movs	r0, #1
 800599a:	f7fd fded 	bl	8003578 <memp_malloc>
 800599e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d111      	bne.n	80059ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80059a6:	2008      	movs	r0, #8
 80059a8:	f7ff ff3c 	bl	8005824 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80059ac:	2001      	movs	r0, #1
 80059ae:	f7fd fde3 	bl	8003578 <memp_malloc>
 80059b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fee3 	bl	8005788 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80059c2:	2001      	movs	r0, #1
 80059c4:	f7fd fdd8 	bl	8003578 <memp_malloc>
 80059c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d03f      	beq.n	8005a50 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80059d0:	229c      	movs	r2, #156	; 0x9c
 80059d2:	2100      	movs	r1, #0
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f006 fd95 	bl	800c504 <memset>
    pcb->prio = prio;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	79fa      	ldrb	r2, [r7, #7]
 80059de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80059e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80059f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	22ff      	movs	r2, #255	; 0xff
 80059fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005a06:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2206      	movs	r2, #6
 8005a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2206      	movs	r2, #6
 8005a14:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a1c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8005a26:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <tcp_alloc+0xf8>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <tcp_alloc+0xfc>)
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005a3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <tcp_alloc+0x100>)
 8005a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4a07      	ldr	r2, [pc, #28]	; (8005a68 <tcp_alloc+0x104>)
 8005a4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8005a50:	68fb      	ldr	r3, [r7, #12]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	2000688c 	.word	0x2000688c
 8005a60:	200000ca 	.word	0x200000ca
 8005a64:	0800571d 	.word	0x0800571d
 8005a68:	006ddd00 	.word	0x006ddd00

08005a6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <tcp_pcb_purge+0x1e>
 8005a7a:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <tcp_pcb_purge+0x94>)
 8005a7c:	f640 0251 	movw	r2, #2129	; 0x851
 8005a80:	4920      	ldr	r1, [pc, #128]	; (8005b04 <tcp_pcb_purge+0x98>)
 8005a82:	4821      	ldr	r0, [pc, #132]	; (8005b08 <tcp_pcb_purge+0x9c>)
 8005a84:	f006 fd46 	bl	800c514 <iprintf>
 8005a88:	e037      	b.n	8005afa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7d1b      	ldrb	r3, [r3, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d033      	beq.n	8005afa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8005a96:	2b0a      	cmp	r3, #10
 8005a98:	d02f      	beq.n	8005afa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d02b      	beq.n	8005afa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fb88 	bl	80041c4 <pbuf_free>
      pcb->refused_data = NULL;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f986 	bl	8005dd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ace:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fdc9 	bl	800566c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fdc4 	bl	800566c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	66da      	str	r2, [r3, #108]	; 0x6c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	0800de38 	.word	0x0800de38
 8005b04:	0800e484 	.word	0x0800e484
 8005b08:	0800de7c 	.word	0x0800de7c

08005b0c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <tcp_pcb_remove+0x1e>
 8005b1c:	4b3e      	ldr	r3, [pc, #248]	; (8005c18 <tcp_pcb_remove+0x10c>)
 8005b1e:	f640 0283 	movw	r2, #2179	; 0x883
 8005b22:	493e      	ldr	r1, [pc, #248]	; (8005c1c <tcp_pcb_remove+0x110>)
 8005b24:	483e      	ldr	r0, [pc, #248]	; (8005c20 <tcp_pcb_remove+0x114>)
 8005b26:	f006 fcf5 	bl	800c514 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <tcp_pcb_remove+0x32>
 8005b30:	4b39      	ldr	r3, [pc, #228]	; (8005c18 <tcp_pcb_remove+0x10c>)
 8005b32:	f640 0284 	movw	r2, #2180	; 0x884
 8005b36:	493b      	ldr	r1, [pc, #236]	; (8005c24 <tcp_pcb_remove+0x118>)
 8005b38:	4839      	ldr	r0, [pc, #228]	; (8005c20 <tcp_pcb_remove+0x114>)
 8005b3a:	f006 fceb 	bl	800c514 <iprintf>

  TCP_RMV(pcblist, pcb);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d105      	bne.n	8005b54 <tcp_pcb_remove+0x48>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e013      	b.n	8005b7c <tcp_pcb_remove+0x70>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e00c      	b.n	8005b76 <tcp_pcb_remove+0x6a>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d104      	bne.n	8005b70 <tcp_pcb_remove+0x64>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	60da      	str	r2, [r3, #12]
 8005b6e:	e005      	b.n	8005b7c <tcp_pcb_remove+0x70>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1ef      	bne.n	8005b5c <tcp_pcb_remove+0x50>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8005b82:	6838      	ldr	r0, [r7, #0]
 8005b84:	f7ff ff72 	bl	8005a6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	7d1b      	ldrb	r3, [r3, #20]
 8005b8c:	2b0a      	cmp	r3, #10
 8005b8e:	d013      	beq.n	8005bb8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d00f      	beq.n	8005bb8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	8b5b      	ldrh	r3, [r3, #26]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d009      	beq.n	8005bb8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	8b5b      	ldrh	r3, [r3, #26]
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005bb2:	6838      	ldr	r0, [r7, #0]
 8005bb4:	f002 ff68 	bl	8008a88 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	7d1b      	ldrb	r3, [r3, #20]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d020      	beq.n	8005c02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d006      	beq.n	8005bd6 <tcp_pcb_remove+0xca>
 8005bc8:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <tcp_pcb_remove+0x10c>)
 8005bca:	f640 0293 	movw	r2, #2195	; 0x893
 8005bce:	4916      	ldr	r1, [pc, #88]	; (8005c28 <tcp_pcb_remove+0x11c>)
 8005bd0:	4813      	ldr	r0, [pc, #76]	; (8005c20 <tcp_pcb_remove+0x114>)
 8005bd2:	f006 fc9f 	bl	800c514 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <tcp_pcb_remove+0xe0>
 8005bde:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <tcp_pcb_remove+0x10c>)
 8005be0:	f640 0294 	movw	r2, #2196	; 0x894
 8005be4:	4911      	ldr	r1, [pc, #68]	; (8005c2c <tcp_pcb_remove+0x120>)
 8005be6:	480e      	ldr	r0, [pc, #56]	; (8005c20 <tcp_pcb_remove+0x114>)
 8005be8:	f006 fc94 	bl	800c514 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d006      	beq.n	8005c02 <tcp_pcb_remove+0xf6>
 8005bf4:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <tcp_pcb_remove+0x10c>)
 8005bf6:	f640 0296 	movw	r2, #2198	; 0x896
 8005bfa:	490d      	ldr	r1, [pc, #52]	; (8005c30 <tcp_pcb_remove+0x124>)
 8005bfc:	4808      	ldr	r0, [pc, #32]	; (8005c20 <tcp_pcb_remove+0x114>)
 8005bfe:	f006 fc89 	bl	800c514 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2200      	movs	r2, #0
 8005c06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	0800de38 	.word	0x0800de38
 8005c1c:	0800e4a0 	.word	0x0800e4a0
 8005c20:	0800de7c 	.word	0x0800de7c
 8005c24:	0800e4bc 	.word	0x0800e4bc
 8005c28:	0800e4dc 	.word	0x0800e4dc
 8005c2c:	0800e4f4 	.word	0x0800e4f4
 8005c30:	0800e510 	.word	0x0800e510

08005c34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <tcp_next_iss+0x1c>
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <tcp_next_iss+0x38>)
 8005c44:	f640 02af 	movw	r2, #2223	; 0x8af
 8005c48:	4909      	ldr	r1, [pc, #36]	; (8005c70 <tcp_next_iss+0x3c>)
 8005c4a:	480a      	ldr	r0, [pc, #40]	; (8005c74 <tcp_next_iss+0x40>)
 8005c4c:	f006 fc62 	bl	800c514 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <tcp_next_iss+0x44>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <tcp_next_iss+0x48>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	4a07      	ldr	r2, [pc, #28]	; (8005c78 <tcp_next_iss+0x44>)
 8005c5c:	6013      	str	r3, [r2, #0]
  return iss;
 8005c5e:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <tcp_next_iss+0x44>)
 8005c60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	0800de38 	.word	0x0800de38
 8005c70:	0800e528 	.word	0x0800e528
 8005c74:	0800de7c 	.word	0x0800de7c
 8005c78:	2000000c 	.word	0x2000000c
 8005c7c:	2000688c 	.word	0x2000688c

08005c80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d106      	bne.n	8005ca2 <tcp_eff_send_mss_netif+0x22>
 8005c94:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <tcp_eff_send_mss_netif+0x68>)
 8005c96:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8005c9a:	4914      	ldr	r1, [pc, #80]	; (8005cec <tcp_eff_send_mss_netif+0x6c>)
 8005c9c:	4814      	ldr	r0, [pc, #80]	; (8005cf0 <tcp_eff_send_mss_netif+0x70>)
 8005c9e:	f006 fc39 	bl	800c514 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8005ca8:	89fb      	ldrh	r3, [r7, #14]
 8005caa:	e019      	b.n	8005ce0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	8c1b      	ldrh	r3, [r3, #32]
 8005cb0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8005cb2:	8afb      	ldrh	r3, [r7, #22]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d012      	beq.n	8005cde <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8005cb8:	2328      	movs	r3, #40	; 0x28
 8005cba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8005cbc:	8afa      	ldrh	r2, [r7, #22]
 8005cbe:	8abb      	ldrh	r3, [r7, #20]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d904      	bls.n	8005cce <tcp_eff_send_mss_netif+0x4e>
 8005cc4:	8afa      	ldrh	r2, [r7, #22]
 8005cc6:	8abb      	ldrh	r3, [r7, #20]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	e000      	b.n	8005cd0 <tcp_eff_send_mss_netif+0x50>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005cd2:	8a7a      	ldrh	r2, [r7, #18]
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	bf28      	it	cs
 8005cda:	4613      	movcs	r3, r2
 8005cdc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8005cde:	89fb      	ldrh	r3, [r7, #14]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	0800de38 	.word	0x0800de38
 8005cec:	0800e544 	.word	0x0800e544
 8005cf0:	0800de7c 	.word	0x0800de7c

08005cf4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d119      	bne.n	8005d3c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8005d08:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8005d0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8005d0e:	4910      	ldr	r1, [pc, #64]	; (8005d50 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8005d10:	4810      	ldr	r0, [pc, #64]	; (8005d54 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8005d12:	f006 fbff 	bl	800c514 <iprintf>

  while (pcb != NULL) {
 8005d16:	e011      	b.n	8005d3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d108      	bne.n	8005d36 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7fe ffca 	bl	8004cc4 <tcp_abort>
      pcb = next;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e002      	b.n	8005d3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1ea      	bne.n	8005d18 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	0800de38 	.word	0x0800de38
 8005d50:	0800e56c 	.word	0x0800e56c
 8005d54:	0800de7c 	.word	0x0800de7c

08005d58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02a      	beq.n	8005dbe <tcp_netif_ip_addr_changed+0x66>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d026      	beq.n	8005dbe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8005d70:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <tcp_netif_ip_addr_changed+0x70>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ffbc 	bl	8005cf4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8005d7c:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <tcp_netif_ip_addr_changed+0x74>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff ffb6 	bl	8005cf4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d017      	beq.n	8005dbe <tcp_netif_ip_addr_changed+0x66>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d013      	beq.n	8005dbe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005d96:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <tcp_netif_ip_addr_changed+0x78>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e00c      	b.n	8005db8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d103      	bne.n	8005db2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1ef      	bne.n	8005d9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20006888 	.word	0x20006888
 8005dcc:	20006894 	.word	0x20006894
 8005dd0:	20006890 	.word	0x20006890

08005dd4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fc3f 	bl	800566c <tcp_segs_free>
    pcb->ooseq = NULL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b08d      	sub	sp, #52	; 0x34
 8005e00:	af04      	add	r7, sp, #16
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <tcp_input+0x1c>
 8005e0c:	4b9b      	ldr	r3, [pc, #620]	; (800607c <tcp_input+0x280>)
 8005e0e:	2283      	movs	r2, #131	; 0x83
 8005e10:	499b      	ldr	r1, [pc, #620]	; (8006080 <tcp_input+0x284>)
 8005e12:	489c      	ldr	r0, [pc, #624]	; (8006084 <tcp_input+0x288>)
 8005e14:	f006 fb7e 	bl	800c514 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	4a9a      	ldr	r2, [pc, #616]	; (8006088 <tcp_input+0x28c>)
 8005e1e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	895b      	ldrh	r3, [r3, #10]
 8005e24:	2b13      	cmp	r3, #19
 8005e26:	f240 83c4 	bls.w	80065b2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005e2a:	4b98      	ldr	r3, [pc, #608]	; (800608c <tcp_input+0x290>)
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	4b97      	ldr	r3, [pc, #604]	; (800608c <tcp_input+0x290>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f005 fbdb 	bl	800b5f0 <ip4_addr_isbroadcast_u32>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 83ba 	bne.w	80065b6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8005e42:	4b92      	ldr	r3, [pc, #584]	; (800608c <tcp_input+0x290>)
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005e4a:	2be0      	cmp	r3, #224	; 0xe0
 8005e4c:	f000 83b3 	beq.w	80065b6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8005e50:	4b8d      	ldr	r3, [pc, #564]	; (8006088 <tcp_input+0x28c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	899b      	ldrh	r3, [r3, #12]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fc ff38 	bl	8002cce <lwip_htons>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	0b1b      	lsrs	r3, r3, #12
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8005e6a:	7cbb      	ldrb	r3, [r7, #18]
 8005e6c:	2b13      	cmp	r3, #19
 8005e6e:	f240 83a2 	bls.w	80065b6 <tcp_input+0x7ba>
 8005e72:	7cbb      	ldrb	r3, [r7, #18]
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	891b      	ldrh	r3, [r3, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	f200 839b 	bhi.w	80065b6 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8005e80:	7cbb      	ldrb	r3, [r7, #18]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b14      	subs	r3, #20
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	4b81      	ldr	r3, [pc, #516]	; (8006090 <tcp_input+0x294>)
 8005e8a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8005e8c:	4b81      	ldr	r3, [pc, #516]	; (8006094 <tcp_input+0x298>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	895a      	ldrh	r2, [r3, #10]
 8005e96:	7cbb      	ldrb	r3, [r7, #18]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d309      	bcc.n	8005eb2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8005e9e:	4b7c      	ldr	r3, [pc, #496]	; (8006090 <tcp_input+0x294>)
 8005ea0:	881a      	ldrh	r2, [r3, #0]
 8005ea2:	4b7d      	ldr	r3, [pc, #500]	; (8006098 <tcp_input+0x29c>)
 8005ea4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8005ea6:	7cbb      	ldrb	r3, [r7, #18]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fe f904 	bl	80040b8 <pbuf_remove_header>
 8005eb0:	e04e      	b.n	8005f50 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <tcp_input+0xca>
 8005eba:	4b70      	ldr	r3, [pc, #448]	; (800607c <tcp_input+0x280>)
 8005ebc:	22c2      	movs	r2, #194	; 0xc2
 8005ebe:	4977      	ldr	r1, [pc, #476]	; (800609c <tcp_input+0x2a0>)
 8005ec0:	4870      	ldr	r0, [pc, #448]	; (8006084 <tcp_input+0x288>)
 8005ec2:	f006 fb27 	bl	800c514 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8005ec6:	2114      	movs	r1, #20
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fe f8f5 	bl	80040b8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	895a      	ldrh	r2, [r3, #10]
 8005ed2:	4b71      	ldr	r3, [pc, #452]	; (8006098 <tcp_input+0x29c>)
 8005ed4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8005ed6:	4b6e      	ldr	r3, [pc, #440]	; (8006090 <tcp_input+0x294>)
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	4b6f      	ldr	r3, [pc, #444]	; (8006098 <tcp_input+0x29c>)
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8005ee2:	4b6d      	ldr	r3, [pc, #436]	; (8006098 <tcp_input+0x29c>)
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7fe f8e5 	bl	80040b8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	895b      	ldrh	r3, [r3, #10]
 8005ef4:	8a3a      	ldrh	r2, [r7, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	f200 835f 	bhi.w	80065ba <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4a64      	ldr	r2, [pc, #400]	; (8006094 <tcp_input+0x298>)
 8005f04:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	8a3a      	ldrh	r2, [r7, #16]
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe f8d2 	bl	80040b8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	891a      	ldrh	r2, [r3, #8]
 8005f18:	8a3b      	ldrh	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	895b      	ldrh	r3, [r3, #10]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <tcp_input+0x13a>
 8005f2a:	4b54      	ldr	r3, [pc, #336]	; (800607c <tcp_input+0x280>)
 8005f2c:	22df      	movs	r2, #223	; 0xdf
 8005f2e:	495c      	ldr	r1, [pc, #368]	; (80060a0 <tcp_input+0x2a4>)
 8005f30:	4854      	ldr	r0, [pc, #336]	; (8006084 <tcp_input+0x288>)
 8005f32:	f006 faef 	bl	800c514 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	891a      	ldrh	r2, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	891b      	ldrh	r3, [r3, #8]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d005      	beq.n	8005f50 <tcp_input+0x154>
 8005f44:	4b4d      	ldr	r3, [pc, #308]	; (800607c <tcp_input+0x280>)
 8005f46:	22e0      	movs	r2, #224	; 0xe0
 8005f48:	4956      	ldr	r1, [pc, #344]	; (80060a4 <tcp_input+0x2a8>)
 8005f4a:	484e      	ldr	r0, [pc, #312]	; (8006084 <tcp_input+0x288>)
 8005f4c:	f006 fae2 	bl	800c514 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005f50:	4b4d      	ldr	r3, [pc, #308]	; (8006088 <tcp_input+0x28c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	4b4b      	ldr	r3, [pc, #300]	; (8006088 <tcp_input+0x28c>)
 8005f5a:	681c      	ldr	r4, [r3, #0]
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7fc feb6 	bl	8002cce <lwip_htons>
 8005f62:	4603      	mov	r3, r0
 8005f64:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005f66:	4b48      	ldr	r3, [pc, #288]	; (8006088 <tcp_input+0x28c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	885b      	ldrh	r3, [r3, #2]
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	4b46      	ldr	r3, [pc, #280]	; (8006088 <tcp_input+0x28c>)
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	4610      	mov	r0, r2
 8005f74:	f7fc feab 	bl	8002cce <lwip_htons>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005f7c:	4b42      	ldr	r3, [pc, #264]	; (8006088 <tcp_input+0x28c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	4b41      	ldr	r3, [pc, #260]	; (8006088 <tcp_input+0x28c>)
 8005f84:	681c      	ldr	r4, [r3, #0]
 8005f86:	4610      	mov	r0, r2
 8005f88:	f7fc feb6 	bl	8002cf8 <lwip_htonl>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	6063      	str	r3, [r4, #4]
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	4a45      	ldr	r2, [pc, #276]	; (80060a8 <tcp_input+0x2ac>)
 8005f94:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005f96:	4b3c      	ldr	r3, [pc, #240]	; (8006088 <tcp_input+0x28c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	4b3a      	ldr	r3, [pc, #232]	; (8006088 <tcp_input+0x28c>)
 8005f9e:	681c      	ldr	r4, [r3, #0]
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f7fc fea9 	bl	8002cf8 <lwip_htonl>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	60a3      	str	r3, [r4, #8]
 8005faa:	68a3      	ldr	r3, [r4, #8]
 8005fac:	4a3f      	ldr	r2, [pc, #252]	; (80060ac <tcp_input+0x2b0>)
 8005fae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005fb0:	4b35      	ldr	r3, [pc, #212]	; (8006088 <tcp_input+0x28c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	89db      	ldrh	r3, [r3, #14]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	4b33      	ldr	r3, [pc, #204]	; (8006088 <tcp_input+0x28c>)
 8005fba:	681c      	ldr	r4, [r3, #0]
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7fc fe86 	bl	8002cce <lwip_htons>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8005fc6:	4b30      	ldr	r3, [pc, #192]	; (8006088 <tcp_input+0x28c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	899b      	ldrh	r3, [r3, #12]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fc fe7d 	bl	8002cce <lwip_htons>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	4b34      	ldr	r3, [pc, #208]	; (80060b0 <tcp_input+0x2b4>)
 8005fe0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	891a      	ldrh	r2, [r3, #8]
 8005fe6:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <tcp_input+0x2b8>)
 8005fe8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8005fea:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <tcp_input+0x2b4>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00c      	beq.n	8006010 <tcp_input+0x214>
    tcplen++;
 8005ff6:	4b2f      	ldr	r3, [pc, #188]	; (80060b4 <tcp_input+0x2b8>)
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	4b2d      	ldr	r3, [pc, #180]	; (80060b4 <tcp_input+0x2b8>)
 8006000:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	891a      	ldrh	r2, [r3, #8]
 8006006:	4b2b      	ldr	r3, [pc, #172]	; (80060b4 <tcp_input+0x2b8>)
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	f200 82d7 	bhi.w	80065be <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006014:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <tcp_input+0x2bc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	e09d      	b.n	8006158 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	7d1b      	ldrb	r3, [r3, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <tcp_input+0x234>
 8006024:	4b15      	ldr	r3, [pc, #84]	; (800607c <tcp_input+0x280>)
 8006026:	22fb      	movs	r2, #251	; 0xfb
 8006028:	4924      	ldr	r1, [pc, #144]	; (80060bc <tcp_input+0x2c0>)
 800602a:	4816      	ldr	r0, [pc, #88]	; (8006084 <tcp_input+0x288>)
 800602c:	f006 fa72 	bl	800c514 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	7d1b      	ldrb	r3, [r3, #20]
 8006034:	2b0a      	cmp	r3, #10
 8006036:	d105      	bne.n	8006044 <tcp_input+0x248>
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <tcp_input+0x280>)
 800603a:	22fc      	movs	r2, #252	; 0xfc
 800603c:	4920      	ldr	r1, [pc, #128]	; (80060c0 <tcp_input+0x2c4>)
 800603e:	4811      	ldr	r0, [pc, #68]	; (8006084 <tcp_input+0x288>)
 8006040:	f006 fa68 	bl	800c514 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	7d1b      	ldrb	r3, [r3, #20]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d105      	bne.n	8006058 <tcp_input+0x25c>
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <tcp_input+0x280>)
 800604e:	22fd      	movs	r2, #253	; 0xfd
 8006050:	491c      	ldr	r1, [pc, #112]	; (80060c4 <tcp_input+0x2c8>)
 8006052:	480c      	ldr	r0, [pc, #48]	; (8006084 <tcp_input+0x288>)
 8006054:	f006 fa5e 	bl	800c514 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	7a1b      	ldrb	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d033      	beq.n	80060c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	7a1a      	ldrb	r2, [r3, #8]
 8006064:	4b09      	ldr	r3, [pc, #36]	; (800608c <tcp_input+0x290>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800606c:	3301      	adds	r3, #1
 800606e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006070:	429a      	cmp	r2, r3
 8006072:	d029      	beq.n	80060c8 <tcp_input+0x2cc>
      prev = pcb;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	61bb      	str	r3, [r7, #24]
      continue;
 8006078:	e06b      	b.n	8006152 <tcp_input+0x356>
 800607a:	bf00      	nop
 800607c:	0800e5a0 	.word	0x0800e5a0
 8006080:	0800e5d4 	.word	0x0800e5d4
 8006084:	0800e5ec 	.word	0x0800e5ec
 8006088:	200000dc 	.word	0x200000dc
 800608c:	20003344 	.word	0x20003344
 8006090:	200000e0 	.word	0x200000e0
 8006094:	200000e4 	.word	0x200000e4
 8006098:	200000e2 	.word	0x200000e2
 800609c:	0800e614 	.word	0x0800e614
 80060a0:	0800e624 	.word	0x0800e624
 80060a4:	0800e630 	.word	0x0800e630
 80060a8:	200000ec 	.word	0x200000ec
 80060ac:	200000f0 	.word	0x200000f0
 80060b0:	200000f8 	.word	0x200000f8
 80060b4:	200000f6 	.word	0x200000f6
 80060b8:	20006888 	.word	0x20006888
 80060bc:	0800e650 	.word	0x0800e650
 80060c0:	0800e678 	.word	0x0800e678
 80060c4:	0800e6a4 	.word	0x0800e6a4
    }

    if (pcb->remote_port == tcphdr->src &&
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	8b1a      	ldrh	r2, [r3, #24]
 80060cc:	4b94      	ldr	r3, [pc, #592]	; (8006320 <tcp_input+0x524>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d13a      	bne.n	800614e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	8ada      	ldrh	r2, [r3, #22]
 80060dc:	4b90      	ldr	r3, [pc, #576]	; (8006320 <tcp_input+0x524>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	885b      	ldrh	r3, [r3, #2]
 80060e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d132      	bne.n	800614e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	4b8d      	ldr	r3, [pc, #564]	; (8006324 <tcp_input+0x528>)
 80060ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d12c      	bne.n	800614e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b8a      	ldr	r3, [pc, #552]	; (8006324 <tcp_input+0x528>)
 80060fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d126      	bne.n	800614e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	429a      	cmp	r2, r3
 8006108:	d106      	bne.n	8006118 <tcp_input+0x31c>
 800610a:	4b87      	ldr	r3, [pc, #540]	; (8006328 <tcp_input+0x52c>)
 800610c:	f240 120d 	movw	r2, #269	; 0x10d
 8006110:	4986      	ldr	r1, [pc, #536]	; (800632c <tcp_input+0x530>)
 8006112:	4887      	ldr	r0, [pc, #540]	; (8006330 <tcp_input+0x534>)
 8006114:	f006 f9fe 	bl	800c514 <iprintf>
      if (prev != NULL) {
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <tcp_input+0x338>
        prev->next = pcb->next;
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006126:	4b83      	ldr	r3, [pc, #524]	; (8006334 <tcp_input+0x538>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800612e:	4a81      	ldr	r2, [pc, #516]	; (8006334 <tcp_input+0x538>)
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	429a      	cmp	r2, r3
 800613c:	d111      	bne.n	8006162 <tcp_input+0x366>
 800613e:	4b7a      	ldr	r3, [pc, #488]	; (8006328 <tcp_input+0x52c>)
 8006140:	f240 1215 	movw	r2, #277	; 0x115
 8006144:	497c      	ldr	r1, [pc, #496]	; (8006338 <tcp_input+0x53c>)
 8006146:	487a      	ldr	r0, [pc, #488]	; (8006330 <tcp_input+0x534>)
 8006148:	f006 f9e4 	bl	800c514 <iprintf>
      break;
 800614c:	e009      	b.n	8006162 <tcp_input+0x366>
    }
    prev = pcb;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f47f af5e 	bne.w	800601c <tcp_input+0x220>
 8006160:	e000      	b.n	8006164 <tcp_input+0x368>
      break;
 8006162:	bf00      	nop
  }

  if (pcb == NULL) {
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f040 8095 	bne.w	8006296 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800616c:	4b73      	ldr	r3, [pc, #460]	; (800633c <tcp_input+0x540>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	61fb      	str	r3, [r7, #28]
 8006172:	e03f      	b.n	80061f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	7d1b      	ldrb	r3, [r3, #20]
 8006178:	2b0a      	cmp	r3, #10
 800617a:	d006      	beq.n	800618a <tcp_input+0x38e>
 800617c:	4b6a      	ldr	r3, [pc, #424]	; (8006328 <tcp_input+0x52c>)
 800617e:	f240 121f 	movw	r2, #287	; 0x11f
 8006182:	496f      	ldr	r1, [pc, #444]	; (8006340 <tcp_input+0x544>)
 8006184:	486a      	ldr	r0, [pc, #424]	; (8006330 <tcp_input+0x534>)
 8006186:	f006 f9c5 	bl	800c514 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	7a1b      	ldrb	r3, [r3, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	7a1a      	ldrb	r2, [r3, #8]
 8006196:	4b63      	ldr	r3, [pc, #396]	; (8006324 <tcp_input+0x528>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800619e:	3301      	adds	r3, #1
 80061a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d122      	bne.n	80061ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	8b1a      	ldrh	r2, [r3, #24]
 80061aa:	4b5d      	ldr	r3, [pc, #372]	; (8006320 <tcp_input+0x524>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d11b      	bne.n	80061ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	8ada      	ldrh	r2, [r3, #22]
 80061ba:	4b59      	ldr	r3, [pc, #356]	; (8006320 <tcp_input+0x524>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	885b      	ldrh	r3, [r3, #2]
 80061c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d113      	bne.n	80061ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	4b56      	ldr	r3, [pc, #344]	; (8006324 <tcp_input+0x528>)
 80061cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d10d      	bne.n	80061ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	4b53      	ldr	r3, [pc, #332]	; (8006324 <tcp_input+0x528>)
 80061d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80061da:	429a      	cmp	r2, r3
 80061dc:	d107      	bne.n	80061ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80061de:	69f8      	ldr	r0, [r7, #28]
 80061e0:	f000 fb52 	bl	8006888 <tcp_timewait_input>
        }
        pbuf_free(p);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fd ffed 	bl	80041c4 <pbuf_free>
        return;
 80061ea:	e1ee      	b.n	80065ca <tcp_input+0x7ce>
        continue;
 80061ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1bc      	bne.n	8006174 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80061fe:	4b51      	ldr	r3, [pc, #324]	; (8006344 <tcp_input+0x548>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e02a      	b.n	800625c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	7a1b      	ldrb	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	7a1a      	ldrb	r2, [r3, #8]
 8006212:	4b44      	ldr	r3, [pc, #272]	; (8006324 <tcp_input+0x528>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800621a:	3301      	adds	r3, #1
 800621c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800621e:	429a      	cmp	r2, r3
 8006220:	d002      	beq.n	8006228 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	61bb      	str	r3, [r7, #24]
        continue;
 8006226:	e016      	b.n	8006256 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	8ada      	ldrh	r2, [r3, #22]
 800622c:	4b3c      	ldr	r3, [pc, #240]	; (8006320 <tcp_input+0x524>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	885b      	ldrh	r3, [r3, #2]
 8006232:	b29b      	uxth	r3, r3
 8006234:	429a      	cmp	r2, r3
 8006236:	d10c      	bne.n	8006252 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b39      	ldr	r3, [pc, #228]	; (8006324 <tcp_input+0x528>)
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	429a      	cmp	r2, r3
 8006242:	d00f      	beq.n	8006264 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <tcp_input+0x46a>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1d1      	bne.n	8006206 <tcp_input+0x40a>
 8006262:	e000      	b.n	8006266 <tcp_input+0x46a>
            break;
 8006264:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d014      	beq.n	8006296 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800627a:	4b32      	ldr	r3, [pc, #200]	; (8006344 <tcp_input+0x548>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006282:	4a30      	ldr	r2, [pc, #192]	; (8006344 <tcp_input+0x548>)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006288:	6978      	ldr	r0, [r7, #20]
 800628a:	f000 f9ff 	bl	800668c <tcp_listen_input>
      }
      pbuf_free(p);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fd ff98 	bl	80041c4 <pbuf_free>
      return;
 8006294:	e199      	b.n	80065ca <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8160 	beq.w	800655e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800629e:	4b2a      	ldr	r3, [pc, #168]	; (8006348 <tcp_input+0x54c>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	891a      	ldrh	r2, [r3, #8]
 80062a8:	4b27      	ldr	r3, [pc, #156]	; (8006348 <tcp_input+0x54c>)
 80062aa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80062ac:	4a26      	ldr	r2, [pc, #152]	; (8006348 <tcp_input+0x54c>)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80062b2:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <tcp_input+0x524>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a24      	ldr	r2, [pc, #144]	; (8006348 <tcp_input+0x54c>)
 80062b8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <tcp_input+0x550>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80062c0:	4b23      	ldr	r3, [pc, #140]	; (8006350 <tcp_input+0x554>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80062c6:	4b23      	ldr	r3, [pc, #140]	; (8006354 <tcp_input+0x558>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80062cc:	4b22      	ldr	r3, [pc, #136]	; (8006358 <tcp_input+0x55c>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d006      	beq.n	80062e6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	7b5b      	ldrb	r3, [r3, #13]
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d038      	beq.n	8006360 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80062ee:	69f8      	ldr	r0, [r7, #28]
 80062f0:	f7ff f940 	bl	8005574 <tcp_process_refused_data>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f113 0f0d 	cmn.w	r3, #13
 80062fa:	d007      	beq.n	800630c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006300:	2b00      	cmp	r3, #0
 8006302:	d02d      	beq.n	8006360 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006304:	4b15      	ldr	r3, [pc, #84]	; (800635c <tcp_input+0x560>)
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d029      	beq.n	8006360 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	2b00      	cmp	r3, #0
 8006312:	f040 8104 	bne.w	800651e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006316:	69f8      	ldr	r0, [r7, #28]
 8006318:	f003 f9cc 	bl	80096b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800631c:	e0ff      	b.n	800651e <tcp_input+0x722>
 800631e:	bf00      	nop
 8006320:	200000dc 	.word	0x200000dc
 8006324:	20003344 	.word	0x20003344
 8006328:	0800e5a0 	.word	0x0800e5a0
 800632c:	0800e6cc 	.word	0x0800e6cc
 8006330:	0800e5ec 	.word	0x0800e5ec
 8006334:	20006888 	.word	0x20006888
 8006338:	0800e6f8 	.word	0x0800e6f8
 800633c:	20006898 	.word	0x20006898
 8006340:	0800e724 	.word	0x0800e724
 8006344:	20006890 	.word	0x20006890
 8006348:	200000cc 	.word	0x200000cc
 800634c:	200000fc 	.word	0x200000fc
 8006350:	200000f9 	.word	0x200000f9
 8006354:	200000f4 	.word	0x200000f4
 8006358:	200000f8 	.word	0x200000f8
 800635c:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8006360:	4a9b      	ldr	r2, [pc, #620]	; (80065d0 <tcp_input+0x7d4>)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006366:	69f8      	ldr	r0, [r7, #28]
 8006368:	f000 fb0a 	bl	8006980 <tcp_process>
 800636c:	4603      	mov	r3, r0
 800636e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006370:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006374:	f113 0f0d 	cmn.w	r3, #13
 8006378:	f000 80d3 	beq.w	8006522 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800637c:	4b95      	ldr	r3, [pc, #596]	; (80065d4 <tcp_input+0x7d8>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d015      	beq.n	80063b4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	2b00      	cmp	r3, #0
 8006390:	d008      	beq.n	80063a4 <tcp_input+0x5a8>
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	6912      	ldr	r2, [r2, #16]
 800639c:	f06f 010d 	mvn.w	r1, #13
 80063a0:	4610      	mov	r0, r2
 80063a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	488c      	ldr	r0, [pc, #560]	; (80065d8 <tcp_input+0x7dc>)
 80063a8:	f7ff fbb0 	bl	8005b0c <tcp_pcb_remove>
        tcp_free(pcb);
 80063ac:	69f8      	ldr	r0, [r7, #28]
 80063ae:	f7fe f9a9 	bl	8004704 <tcp_free>
 80063b2:	e0c1      	b.n	8006538 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80063b8:	4b88      	ldr	r3, [pc, #544]	; (80065dc <tcp_input+0x7e0>)
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01d      	beq.n	80063fc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80063c0:	4b86      	ldr	r3, [pc, #536]	; (80065dc <tcp_input+0x7e0>)
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <tcp_input+0x5ea>
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	6910      	ldr	r0, [r2, #16]
 80063da:	89fa      	ldrh	r2, [r7, #14]
 80063dc:	69f9      	ldr	r1, [r7, #28]
 80063de:	4798      	blx	r3
 80063e0:	4603      	mov	r3, r0
 80063e2:	74fb      	strb	r3, [r7, #19]
 80063e4:	e001      	b.n	80063ea <tcp_input+0x5ee>
 80063e6:	2300      	movs	r3, #0
 80063e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80063ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063ee:	f113 0f0d 	cmn.w	r3, #13
 80063f2:	f000 8098 	beq.w	8006526 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80063f6:	4b79      	ldr	r3, [pc, #484]	; (80065dc <tcp_input+0x7e0>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80063fc:	69f8      	ldr	r0, [r7, #28]
 80063fe:	f000 f905 	bl	800660c <tcp_input_delayed_close>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	f040 8090 	bne.w	800652a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800640a:	4b75      	ldr	r3, [pc, #468]	; (80065e0 <tcp_input+0x7e4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d041      	beq.n	8006496 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006416:	2b00      	cmp	r3, #0
 8006418:	d006      	beq.n	8006428 <tcp_input+0x62c>
 800641a:	4b72      	ldr	r3, [pc, #456]	; (80065e4 <tcp_input+0x7e8>)
 800641c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006420:	4971      	ldr	r1, [pc, #452]	; (80065e8 <tcp_input+0x7ec>)
 8006422:	4872      	ldr	r0, [pc, #456]	; (80065ec <tcp_input+0x7f0>)
 8006424:	f006 f876 	bl	800c514 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	8b5b      	ldrh	r3, [r3, #26]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006434:	4b6a      	ldr	r3, [pc, #424]	; (80065e0 <tcp_input+0x7e4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f7fd fec3 	bl	80041c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800643e:	69f8      	ldr	r0, [r7, #28]
 8006440:	f7fe fc40 	bl	8004cc4 <tcp_abort>
            goto aborted;
 8006444:	e078      	b.n	8006538 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00c      	beq.n	800646a <tcp_input+0x66e>
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	6918      	ldr	r0, [r3, #16]
 800645a:	4b61      	ldr	r3, [pc, #388]	; (80065e0 <tcp_input+0x7e4>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	2300      	movs	r3, #0
 8006460:	69f9      	ldr	r1, [r7, #28]
 8006462:	47a0      	blx	r4
 8006464:	4603      	mov	r3, r0
 8006466:	74fb      	strb	r3, [r7, #19]
 8006468:	e008      	b.n	800647c <tcp_input+0x680>
 800646a:	4b5d      	ldr	r3, [pc, #372]	; (80065e0 <tcp_input+0x7e4>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	2300      	movs	r3, #0
 8006470:	69f9      	ldr	r1, [r7, #28]
 8006472:	2000      	movs	r0, #0
 8006474:	f7ff f952 	bl	800571c <tcp_recv_null>
 8006478:	4603      	mov	r3, r0
 800647a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800647c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006480:	f113 0f0d 	cmn.w	r3, #13
 8006484:	d053      	beq.n	800652e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006486:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800648e:	4b54      	ldr	r3, [pc, #336]	; (80065e0 <tcp_input+0x7e4>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006496:	4b4f      	ldr	r3, [pc, #316]	; (80065d4 <tcp_input+0x7d8>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d030      	beq.n	8006504 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ae:	7b5a      	ldrb	r2, [r3, #13]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b4:	f042 0220 	orr.w	r2, r2, #32
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	735a      	strb	r2, [r3, #13]
 80064bc:	e022      	b.n	8006504 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80064c6:	d005      	beq.n	80064d4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064cc:	3301      	adds	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <tcp_input+0x6fa>
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	6918      	ldr	r0, [r3, #16]
 80064e8:	2300      	movs	r3, #0
 80064ea:	2200      	movs	r2, #0
 80064ec:	69f9      	ldr	r1, [r7, #28]
 80064ee:	47a0      	blx	r4
 80064f0:	4603      	mov	r3, r0
 80064f2:	74fb      	strb	r3, [r7, #19]
 80064f4:	e001      	b.n	80064fa <tcp_input+0x6fe>
 80064f6:	2300      	movs	r3, #0
 80064f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80064fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80064fe:	f113 0f0d 	cmn.w	r3, #13
 8006502:	d016      	beq.n	8006532 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006504:	4b32      	ldr	r3, [pc, #200]	; (80065d0 <tcp_input+0x7d4>)
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800650a:	69f8      	ldr	r0, [r7, #28]
 800650c:	f000 f87e 	bl	800660c <tcp_input_delayed_close>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10f      	bne.n	8006536 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8006516:	69f8      	ldr	r0, [r7, #28]
 8006518:	f002 fab6 	bl	8008a88 <tcp_output>
 800651c:	e00c      	b.n	8006538 <tcp_input+0x73c>
        goto aborted;
 800651e:	bf00      	nop
 8006520:	e00a      	b.n	8006538 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006522:	bf00      	nop
 8006524:	e008      	b.n	8006538 <tcp_input+0x73c>
              goto aborted;
 8006526:	bf00      	nop
 8006528:	e006      	b.n	8006538 <tcp_input+0x73c>
          goto aborted;
 800652a:	bf00      	nop
 800652c:	e004      	b.n	8006538 <tcp_input+0x73c>
            goto aborted;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <tcp_input+0x73c>
              goto aborted;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <tcp_input+0x73c>
          goto aborted;
 8006536:	bf00      	nop
    tcp_input_pcb = NULL;
 8006538:	4b25      	ldr	r3, [pc, #148]	; (80065d0 <tcp_input+0x7d4>)
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800653e:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <tcp_input+0x7e4>)
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8006544:	4b2a      	ldr	r3, [pc, #168]	; (80065f0 <tcp_input+0x7f4>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d03d      	beq.n	80065c8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800654c:	4b28      	ldr	r3, [pc, #160]	; (80065f0 <tcp_input+0x7f4>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	4618      	mov	r0, r3
 8006552:	f7fd fe37 	bl	80041c4 <pbuf_free>
      inseg.p = NULL;
 8006556:	4b26      	ldr	r3, [pc, #152]	; (80065f0 <tcp_input+0x7f4>)
 8006558:	2200      	movs	r2, #0
 800655a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800655c:	e034      	b.n	80065c8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800655e:	4b25      	ldr	r3, [pc, #148]	; (80065f4 <tcp_input+0x7f8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	899b      	ldrh	r3, [r3, #12]
 8006564:	b29b      	uxth	r3, r3
 8006566:	4618      	mov	r0, r3
 8006568:	f7fc fbb1 	bl	8002cce <lwip_htons>
 800656c:	4603      	mov	r3, r0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d118      	bne.n	80065aa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006578:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <tcp_input+0x7fc>)
 800657a:	6819      	ldr	r1, [r3, #0]
 800657c:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <tcp_input+0x800>)
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	4b1f      	ldr	r3, [pc, #124]	; (8006600 <tcp_input+0x804>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006588:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <tcp_input+0x7f8>)
 800658a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800658c:	885b      	ldrh	r3, [r3, #2]
 800658e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006590:	4a18      	ldr	r2, [pc, #96]	; (80065f4 <tcp_input+0x7f8>)
 8006592:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006594:	8812      	ldrh	r2, [r2, #0]
 8006596:	b292      	uxth	r2, r2
 8006598:	9202      	str	r2, [sp, #8]
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	4b19      	ldr	r3, [pc, #100]	; (8006604 <tcp_input+0x808>)
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	4b19      	ldr	r3, [pc, #100]	; (8006608 <tcp_input+0x80c>)
 80065a2:	4602      	mov	r2, r0
 80065a4:	2000      	movs	r0, #0
 80065a6:	f003 f833 	bl	8009610 <tcp_rst>
    pbuf_free(p);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fd fe0a 	bl	80041c4 <pbuf_free>
  return;
 80065b0:	e00a      	b.n	80065c8 <tcp_input+0x7cc>
    goto dropped;
 80065b2:	bf00      	nop
 80065b4:	e004      	b.n	80065c0 <tcp_input+0x7c4>
dropped:
 80065b6:	bf00      	nop
 80065b8:	e002      	b.n	80065c0 <tcp_input+0x7c4>
      goto dropped;
 80065ba:	bf00      	nop
 80065bc:	e000      	b.n	80065c0 <tcp_input+0x7c4>
      goto dropped;
 80065be:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fd fdff 	bl	80041c4 <pbuf_free>
 80065c6:	e000      	b.n	80065ca <tcp_input+0x7ce>
  return;
 80065c8:	bf00      	nop
}
 80065ca:	3724      	adds	r7, #36	; 0x24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd90      	pop	{r4, r7, pc}
 80065d0:	2000689c 	.word	0x2000689c
 80065d4:	200000f9 	.word	0x200000f9
 80065d8:	20006888 	.word	0x20006888
 80065dc:	200000f4 	.word	0x200000f4
 80065e0:	200000fc 	.word	0x200000fc
 80065e4:	0800e5a0 	.word	0x0800e5a0
 80065e8:	0800e754 	.word	0x0800e754
 80065ec:	0800e5ec 	.word	0x0800e5ec
 80065f0:	200000cc 	.word	0x200000cc
 80065f4:	200000dc 	.word	0x200000dc
 80065f8:	200000f0 	.word	0x200000f0
 80065fc:	200000f6 	.word	0x200000f6
 8006600:	200000ec 	.word	0x200000ec
 8006604:	20003354 	.word	0x20003354
 8006608:	20003358 	.word	0x20003358

0800660c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <tcp_input_delayed_close+0x1c>
 800661a:	4b17      	ldr	r3, [pc, #92]	; (8006678 <tcp_input_delayed_close+0x6c>)
 800661c:	f240 225a 	movw	r2, #602	; 0x25a
 8006620:	4916      	ldr	r1, [pc, #88]	; (800667c <tcp_input_delayed_close+0x70>)
 8006622:	4817      	ldr	r0, [pc, #92]	; (8006680 <tcp_input_delayed_close+0x74>)
 8006624:	f005 ff76 	bl	800c514 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8006628:	4b16      	ldr	r3, [pc, #88]	; (8006684 <tcp_input_delayed_close+0x78>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01c      	beq.n	800666e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8b5b      	ldrh	r3, [r3, #26]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10d      	bne.n	800665c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <tcp_input_delayed_close+0x50>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6912      	ldr	r2, [r2, #16]
 8006654:	f06f 010e 	mvn.w	r1, #14
 8006658:	4610      	mov	r0, r2
 800665a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	480a      	ldr	r0, [pc, #40]	; (8006688 <tcp_input_delayed_close+0x7c>)
 8006660:	f7ff fa54 	bl	8005b0c <tcp_pcb_remove>
    tcp_free(pcb);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7fe f84d 	bl	8004704 <tcp_free>
    return 1;
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	0800e5a0 	.word	0x0800e5a0
 800667c:	0800e770 	.word	0x0800e770
 8006680:	0800e5ec 	.word	0x0800e5ec
 8006684:	200000f9 	.word	0x200000f9
 8006688:	20006888 	.word	0x20006888

0800668c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b08b      	sub	sp, #44	; 0x2c
 8006690:	af04      	add	r7, sp, #16
 8006692:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006694:	4b6f      	ldr	r3, [pc, #444]	; (8006854 <tcp_listen_input+0x1c8>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	f040 80d3 	bne.w	8006848 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <tcp_listen_input+0x2a>
 80066a8:	4b6b      	ldr	r3, [pc, #428]	; (8006858 <tcp_listen_input+0x1cc>)
 80066aa:	f240 2281 	movw	r2, #641	; 0x281
 80066ae:	496b      	ldr	r1, [pc, #428]	; (800685c <tcp_listen_input+0x1d0>)
 80066b0:	486b      	ldr	r0, [pc, #428]	; (8006860 <tcp_listen_input+0x1d4>)
 80066b2:	f005 ff2f 	bl	800c514 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80066b6:	4b67      	ldr	r3, [pc, #412]	; (8006854 <tcp_listen_input+0x1c8>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d019      	beq.n	80066f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80066c2:	4b68      	ldr	r3, [pc, #416]	; (8006864 <tcp_listen_input+0x1d8>)
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	4b68      	ldr	r3, [pc, #416]	; (8006868 <tcp_listen_input+0x1dc>)
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b67      	ldr	r3, [pc, #412]	; (800686c <tcp_listen_input+0x1e0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80066d2:	4b67      	ldr	r3, [pc, #412]	; (8006870 <tcp_listen_input+0x1e4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80066d6:	885b      	ldrh	r3, [r3, #2]
 80066d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80066da:	4a65      	ldr	r2, [pc, #404]	; (8006870 <tcp_listen_input+0x1e4>)
 80066dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80066de:	8812      	ldrh	r2, [r2, #0]
 80066e0:	b292      	uxth	r2, r2
 80066e2:	9202      	str	r2, [sp, #8]
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	4b63      	ldr	r3, [pc, #396]	; (8006874 <tcp_listen_input+0x1e8>)
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4b63      	ldr	r3, [pc, #396]	; (8006878 <tcp_listen_input+0x1ec>)
 80066ec:	4602      	mov	r2, r0
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f002 ff8e 	bl	8009610 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80066f4:	e0aa      	b.n	800684c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80066f6:	4b57      	ldr	r3, [pc, #348]	; (8006854 <tcp_listen_input+0x1c8>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 80a4 	beq.w	800684c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	7d5b      	ldrb	r3, [r3, #21]
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff f92b 	bl	8005964 <tcp_alloc>
 800670e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d111      	bne.n	800673a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <tcp_listen_input+0xa8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6910      	ldr	r0, [r2, #16]
 8006726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800672a:	2100      	movs	r1, #0
 800672c:	4798      	blx	r3
 800672e:	4603      	mov	r3, r0
 8006730:	73bb      	strb	r3, [r7, #14]
      return;
 8006732:	e08c      	b.n	800684e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006734:	23f0      	movs	r3, #240	; 0xf0
 8006736:	73bb      	strb	r3, [r7, #14]
      return;
 8006738:	e089      	b.n	800684e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800673a:	4b50      	ldr	r3, [pc, #320]	; (800687c <tcp_listen_input+0x1f0>)
 800673c:	695a      	ldr	r2, [r3, #20]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006742:	4b4e      	ldr	r3, [pc, #312]	; (800687c <tcp_listen_input+0x1f0>)
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	8ada      	ldrh	r2, [r3, #22]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006752:	4b47      	ldr	r3, [pc, #284]	; (8006870 <tcp_listen_input+0x1e4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29a      	uxth	r2, r3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2203      	movs	r2, #3
 8006762:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006764:	4b41      	ldr	r3, [pc, #260]	; (800686c <tcp_listen_input+0x1e0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006776:	6978      	ldr	r0, [r7, #20]
 8006778:	f7ff fa5c 	bl	8005c34 <tcp_next_iss>
 800677c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006796:	4b35      	ldr	r3, [pc, #212]	; (800686c <tcp_listen_input+0x1e0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	1e5a      	subs	r2, r3, #1
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	7a5b      	ldrb	r3, [r3, #9]
 80067b2:	f003 030c 	and.w	r3, r3, #12
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	7a1a      	ldrb	r2, [r3, #8]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80067c4:	4b2e      	ldr	r3, [pc, #184]	; (8006880 <tcp_listen_input+0x1f4>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	60da      	str	r2, [r3, #12]
 80067cc:	4a2c      	ldr	r2, [pc, #176]	; (8006880 <tcp_listen_input+0x1f4>)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	f003 f8df 	bl	8009994 <tcp_timer_needed>
 80067d6:	4b2b      	ldr	r3, [pc, #172]	; (8006884 <tcp_listen_input+0x1f8>)
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80067dc:	6978      	ldr	r0, [r7, #20]
 80067de:	f001 fd8f 	bl	8008300 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80067e2:	4b23      	ldr	r3, [pc, #140]	; (8006870 <tcp_listen_input+0x1e4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	89db      	ldrh	r3, [r3, #14]
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	3304      	adds	r3, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f004 fc5f 	bl	800b0c8 <ip4_route>
 800680a:	4601      	mov	r1, r0
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	3304      	adds	r3, #4
 8006810:	461a      	mov	r2, r3
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff fa34 	bl	8005c80 <tcp_eff_send_mss_netif>
 8006818:	4603      	mov	r3, r0
 800681a:	461a      	mov	r2, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006820:	2112      	movs	r1, #18
 8006822:	6978      	ldr	r0, [r7, #20]
 8006824:	f002 f842 	bl	80088ac <tcp_enqueue_flags>
 8006828:	4603      	mov	r3, r0
 800682a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800682c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8006834:	2100      	movs	r1, #0
 8006836:	6978      	ldr	r0, [r7, #20]
 8006838:	f7fe f986 	bl	8004b48 <tcp_abandon>
      return;
 800683c:	e007      	b.n	800684e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800683e:	6978      	ldr	r0, [r7, #20]
 8006840:	f002 f922 	bl	8008a88 <tcp_output>
  return;
 8006844:	bf00      	nop
 8006846:	e001      	b.n	800684c <tcp_listen_input+0x1c0>
    return;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <tcp_listen_input+0x1c2>
  return;
 800684c:	bf00      	nop
}
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	bd90      	pop	{r4, r7, pc}
 8006854:	200000f8 	.word	0x200000f8
 8006858:	0800e5a0 	.word	0x0800e5a0
 800685c:	0800e798 	.word	0x0800e798
 8006860:	0800e5ec 	.word	0x0800e5ec
 8006864:	200000f0 	.word	0x200000f0
 8006868:	200000f6 	.word	0x200000f6
 800686c:	200000ec 	.word	0x200000ec
 8006870:	200000dc 	.word	0x200000dc
 8006874:	20003354 	.word	0x20003354
 8006878:	20003358 	.word	0x20003358
 800687c:	20003344 	.word	0x20003344
 8006880:	20006888 	.word	0x20006888
 8006884:	20006884 	.word	0x20006884

08006888 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af04      	add	r7, sp, #16
 800688e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006890:	4b30      	ldr	r3, [pc, #192]	; (8006954 <tcp_timewait_input+0xcc>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d154      	bne.n	8006946 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <tcp_timewait_input+0x28>
 80068a2:	4b2d      	ldr	r3, [pc, #180]	; (8006958 <tcp_timewait_input+0xd0>)
 80068a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80068a8:	492c      	ldr	r1, [pc, #176]	; (800695c <tcp_timewait_input+0xd4>)
 80068aa:	482d      	ldr	r0, [pc, #180]	; (8006960 <tcp_timewait_input+0xd8>)
 80068ac:	f005 fe32 	bl	800c514 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80068b0:	4b28      	ldr	r3, [pc, #160]	; (8006954 <tcp_timewait_input+0xcc>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02a      	beq.n	8006912 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80068bc:	4b29      	ldr	r3, [pc, #164]	; (8006964 <tcp_timewait_input+0xdc>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	db2d      	blt.n	8006926 <tcp_timewait_input+0x9e>
 80068ca:	4b26      	ldr	r3, [pc, #152]	; (8006964 <tcp_timewait_input+0xdc>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80068d6:	440b      	add	r3, r1
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	dc23      	bgt.n	8006926 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80068de:	4b22      	ldr	r3, [pc, #136]	; (8006968 <tcp_timewait_input+0xe0>)
 80068e0:	6819      	ldr	r1, [r3, #0]
 80068e2:	4b22      	ldr	r3, [pc, #136]	; (800696c <tcp_timewait_input+0xe4>)
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <tcp_timewait_input+0xdc>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80068ee:	4b20      	ldr	r3, [pc, #128]	; (8006970 <tcp_timewait_input+0xe8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80068f2:	885b      	ldrh	r3, [r3, #2]
 80068f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80068f6:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <tcp_timewait_input+0xe8>)
 80068f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80068fa:	8812      	ldrh	r2, [r2, #0]
 80068fc:	b292      	uxth	r2, r2
 80068fe:	9202      	str	r2, [sp, #8]
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <tcp_timewait_input+0xec>)
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	4b1c      	ldr	r3, [pc, #112]	; (8006978 <tcp_timewait_input+0xf0>)
 8006908:	4602      	mov	r2, r0
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f002 fe80 	bl	8009610 <tcp_rst>
      return;
 8006910:	e01c      	b.n	800694c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8006912:	4b10      	ldr	r3, [pc, #64]	; (8006954 <tcp_timewait_input+0xcc>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800691e:	4b17      	ldr	r3, [pc, #92]	; (800697c <tcp_timewait_input+0xf4>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <tcp_timewait_input+0xe4>)
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00d      	beq.n	800694a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8b5b      	ldrh	r3, [r3, #26]
 8006932:	f043 0302 	orr.w	r3, r3, #2
 8006936:	b29a      	uxth	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 f8a3 	bl	8008a88 <tcp_output>
  }
  return;
 8006942:	bf00      	nop
 8006944:	e001      	b.n	800694a <tcp_timewait_input+0xc2>
    return;
 8006946:	bf00      	nop
 8006948:	e000      	b.n	800694c <tcp_timewait_input+0xc4>
  return;
 800694a:	bf00      	nop
}
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	200000f8 	.word	0x200000f8
 8006958:	0800e5a0 	.word	0x0800e5a0
 800695c:	0800e7b8 	.word	0x0800e7b8
 8006960:	0800e5ec 	.word	0x0800e5ec
 8006964:	200000ec 	.word	0x200000ec
 8006968:	200000f0 	.word	0x200000f0
 800696c:	200000f6 	.word	0x200000f6
 8006970:	200000dc 	.word	0x200000dc
 8006974:	20003354 	.word	0x20003354
 8006978:	20003358 	.word	0x20003358
 800697c:	2000688c 	.word	0x2000688c

08006980 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8006980:	b590      	push	{r4, r7, lr}
 8006982:	b08d      	sub	sp, #52	; 0x34
 8006984:	af04      	add	r7, sp, #16
 8006986:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <tcp_process+0x24>
 8006996:	4ba5      	ldr	r3, [pc, #660]	; (8006c2c <tcp_process+0x2ac>)
 8006998:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800699c:	49a4      	ldr	r1, [pc, #656]	; (8006c30 <tcp_process+0x2b0>)
 800699e:	48a5      	ldr	r0, [pc, #660]	; (8006c34 <tcp_process+0x2b4>)
 80069a0:	f005 fdb8 	bl	800c514 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80069a4:	4ba4      	ldr	r3, [pc, #656]	; (8006c38 <tcp_process+0x2b8>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d04e      	beq.n	8006a4e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	7d1b      	ldrb	r3, [r3, #20]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d108      	bne.n	80069ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069bc:	4b9f      	ldr	r3, [pc, #636]	; (8006c3c <tcp_process+0x2bc>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d123      	bne.n	8006a0c <tcp_process+0x8c>
        acceptable = 1;
 80069c4:	2301      	movs	r3, #1
 80069c6:	76fb      	strb	r3, [r7, #27]
 80069c8:	e020      	b.n	8006a0c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ce:	4b9c      	ldr	r3, [pc, #624]	; (8006c40 <tcp_process+0x2c0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d102      	bne.n	80069dc <tcp_process+0x5c>
        acceptable = 1;
 80069d6:	2301      	movs	r3, #1
 80069d8:	76fb      	strb	r3, [r7, #27]
 80069da:	e017      	b.n	8006a0c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80069dc:	4b98      	ldr	r3, [pc, #608]	; (8006c40 <tcp_process+0x2c0>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	db10      	blt.n	8006a0c <tcp_process+0x8c>
 80069ea:	4b95      	ldr	r3, [pc, #596]	; (8006c40 <tcp_process+0x2c0>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80069f6:	440b      	add	r3, r1
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	dc06      	bgt.n	8006a0c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8b5b      	ldrh	r3, [r3, #26]
 8006a02:	f043 0302 	orr.w	r3, r3, #2
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8006a0c:	7efb      	ldrb	r3, [r7, #27]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01b      	beq.n	8006a4a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7d1b      	ldrb	r3, [r3, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <tcp_process+0xa8>
 8006a1a:	4b84      	ldr	r3, [pc, #528]	; (8006c2c <tcp_process+0x2ac>)
 8006a1c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8006a20:	4988      	ldr	r1, [pc, #544]	; (8006c44 <tcp_process+0x2c4>)
 8006a22:	4884      	ldr	r0, [pc, #528]	; (8006c34 <tcp_process+0x2b4>)
 8006a24:	f005 fd76 	bl	800c514 <iprintf>
      recv_flags |= TF_RESET;
 8006a28:	4b87      	ldr	r3, [pc, #540]	; (8006c48 <tcp_process+0x2c8>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f043 0308 	orr.w	r3, r3, #8
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	4b85      	ldr	r3, [pc, #532]	; (8006c48 <tcp_process+0x2c8>)
 8006a34:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8b5b      	ldrh	r3, [r3, #26]
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8006a44:	f06f 030d 	mvn.w	r3, #13
 8006a48:	e37a      	b.n	8007140 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e378      	b.n	8007140 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006a4e:	4b7a      	ldr	r3, [pc, #488]	; (8006c38 <tcp_process+0x2b8>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d010      	beq.n	8006a7c <tcp_process+0xfc>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	7d1b      	ldrb	r3, [r3, #20]
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d00c      	beq.n	8006a7c <tcp_process+0xfc>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7d1b      	ldrb	r3, [r3, #20]
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d008      	beq.n	8006a7c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8b5b      	ldrh	r3, [r3, #26]
 8006a6e:	f043 0302 	orr.w	r3, r3, #2
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e361      	b.n	8007140 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8b5b      	ldrh	r3, [r3, #26]
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d103      	bne.n	8006a90 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8006a88:	4b70      	ldr	r3, [pc, #448]	; (8006c4c <tcp_process+0x2cc>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 fc2d 	bl	8008300 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7d1b      	ldrb	r3, [r3, #20]
 8006aaa:	3b02      	subs	r3, #2
 8006aac:	2b07      	cmp	r3, #7
 8006aae:	f200 8337 	bhi.w	8007120 <tcp_process+0x7a0>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <tcp_process+0x138>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006ad9 	.word	0x08006ad9
 8006abc:	08006d09 	.word	0x08006d09
 8006ac0:	08006e81 	.word	0x08006e81
 8006ac4:	08006eab 	.word	0x08006eab
 8006ac8:	08006fcf 	.word	0x08006fcf
 8006acc:	08006e81 	.word	0x08006e81
 8006ad0:	0800705b 	.word	0x0800705b
 8006ad4:	080070eb 	.word	0x080070eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006ad8:	4b57      	ldr	r3, [pc, #348]	; (8006c38 <tcp_process+0x2b8>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80e4 	beq.w	8006cae <tcp_process+0x32e>
 8006ae6:	4b54      	ldr	r3, [pc, #336]	; (8006c38 <tcp_process+0x2b8>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 80dd 	beq.w	8006cae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <tcp_process+0x2bc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	f040 80d5 	bne.w	8006cae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8006b04:	4b4e      	ldr	r3, [pc, #312]	; (8006c40 <tcp_process+0x2c0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8006b16:	4b49      	ldr	r3, [pc, #292]	; (8006c3c <tcp_process+0x2bc>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8006b1e:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <tcp_process+0x2d0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	89db      	ldrh	r3, [r3, #14]
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006b38:	4b41      	ldr	r3, [pc, #260]	; (8006c40 <tcp_process+0x2c0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	1e5a      	subs	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2204      	movs	r2, #4
 8006b46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	4618      	mov	r0, r3
 8006b52:	f004 fab9 	bl	800b0c8 <ip4_route>
 8006b56:	4601      	mov	r1, r0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7ff f88e 	bl	8005c80 <tcp_eff_send_mss_netif>
 8006b64:	4603      	mov	r3, r0
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b70:	009a      	lsls	r2, r3, #2
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	f241 111c 	movw	r1, #4380	; 0x111c
 8006b7c:	428b      	cmp	r3, r1
 8006b7e:	bf38      	it	cc
 8006b80:	460b      	movcc	r3, r1
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d204      	bcs.n	8006b90 <tcp_process+0x210>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	e00d      	b.n	8006bac <tcp_process+0x22c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	f241 121c 	movw	r2, #4380	; 0x111c
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d904      	bls.n	8006ba8 <tcp_process+0x228>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	e001      	b.n	8006bac <tcp_process+0x22c>
 8006ba8:	f241 131c 	movw	r3, #4380	; 0x111c
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d106      	bne.n	8006bca <tcp_process+0x24a>
 8006bbc:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <tcp_process+0x2ac>)
 8006bbe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8006bc2:	4924      	ldr	r1, [pc, #144]	; (8006c54 <tcp_process+0x2d4>)
 8006bc4:	481b      	ldr	r0, [pc, #108]	; (8006c34 <tcp_process+0x2b4>)
 8006bc6:	f005 fca5 	bl	800c514 <iprintf>
        --pcb->snd_queuelen;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bde:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d111      	bne.n	8006c0a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <tcp_process+0x280>
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <tcp_process+0x2ac>)
 8006bf4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8006bf8:	4917      	ldr	r1, [pc, #92]	; (8006c58 <tcp_process+0x2d8>)
 8006bfa:	480e      	ldr	r0, [pc, #56]	; (8006c34 <tcp_process+0x2b4>)
 8006bfc:	f005 fc8a 	bl	800c514 <iprintf>
          pcb->unsent = rseg->next;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	66da      	str	r2, [r3, #108]	; 0x6c
 8006c08:	e003      	b.n	8006c12 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8006c12:	69f8      	ldr	r0, [r7, #28]
 8006c14:	f7fe fd3e 	bl	8005694 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11d      	bne.n	8006c5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c26:	861a      	strh	r2, [r3, #48]	; 0x30
 8006c28:	e01f      	b.n	8006c6a <tcp_process+0x2ea>
 8006c2a:	bf00      	nop
 8006c2c:	0800e5a0 	.word	0x0800e5a0
 8006c30:	0800e7d8 	.word	0x0800e7d8
 8006c34:	0800e5ec 	.word	0x0800e5ec
 8006c38:	200000f8 	.word	0x200000f8
 8006c3c:	200000f0 	.word	0x200000f0
 8006c40:	200000ec 	.word	0x200000ec
 8006c44:	0800e7f4 	.word	0x0800e7f4
 8006c48:	200000f9 	.word	0x200000f9
 8006c4c:	2000688c 	.word	0x2000688c
 8006c50:	200000dc 	.word	0x200000dc
 8006c54:	0800e814 	.word	0x0800e814
 8006c58:	0800e82c 	.word	0x0800e82c
        } else {
          pcb->rtime = 0;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <tcp_process+0x30a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6910      	ldr	r0, [r2, #16]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4798      	blx	r3
 8006c84:	4603      	mov	r3, r0
 8006c86:	76bb      	strb	r3, [r7, #26]
 8006c88:	e001      	b.n	8006c8e <tcp_process+0x30e>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8006c8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006c92:	f113 0f0d 	cmn.w	r3, #13
 8006c96:	d102      	bne.n	8006c9e <tcp_process+0x31e>
          return ERR_ABRT;
 8006c98:	f06f 030c 	mvn.w	r3, #12
 8006c9c:	e250      	b.n	8007140 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8b5b      	ldrh	r3, [r3, #26]
 8006ca2:	f043 0302 	orr.w	r3, r3, #2
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8006cac:	e23a      	b.n	8007124 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8006cae:	4b9d      	ldr	r3, [pc, #628]	; (8006f24 <tcp_process+0x5a4>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 8234 	beq.w	8007124 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006cbc:	4b9a      	ldr	r3, [pc, #616]	; (8006f28 <tcp_process+0x5a8>)
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	4b9a      	ldr	r3, [pc, #616]	; (8006f2c <tcp_process+0x5ac>)
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4b9a      	ldr	r3, [pc, #616]	; (8006f30 <tcp_process+0x5b0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006ccc:	4b99      	ldr	r3, [pc, #612]	; (8006f34 <tcp_process+0x5b4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006cd0:	885b      	ldrh	r3, [r3, #2]
 8006cd2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006cd4:	4a97      	ldr	r2, [pc, #604]	; (8006f34 <tcp_process+0x5b4>)
 8006cd6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006cd8:	8812      	ldrh	r2, [r2, #0]
 8006cda:	b292      	uxth	r2, r2
 8006cdc:	9202      	str	r2, [sp, #8]
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	4b95      	ldr	r3, [pc, #596]	; (8006f38 <tcp_process+0x5b8>)
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	4b95      	ldr	r3, [pc, #596]	; (8006f3c <tcp_process+0x5bc>)
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f002 fc91 	bl	8009610 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cf4:	2b05      	cmp	r3, #5
 8006cf6:	f200 8215 	bhi.w	8007124 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f002 fa51 	bl	80091a8 <tcp_rexmit_rto>
      break;
 8006d06:	e20d      	b.n	8007124 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8006d08:	4b86      	ldr	r3, [pc, #536]	; (8006f24 <tcp_process+0x5a4>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80a1 	beq.w	8006e58 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006d16:	4b84      	ldr	r3, [pc, #528]	; (8006f28 <tcp_process+0x5a8>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	db7e      	blt.n	8006e24 <tcp_process+0x4a4>
 8006d26:	4b80      	ldr	r3, [pc, #512]	; (8006f28 <tcp_process+0x5a8>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	dc77      	bgt.n	8006e24 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2204      	movs	r2, #4
 8006d38:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8006d42:	23fa      	movs	r3, #250	; 0xfa
 8006d44:	76bb      	strb	r3, [r7, #26]
 8006d46:	e01d      	b.n	8006d84 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <tcp_process+0x3e0>
 8006d52:	4b7b      	ldr	r3, [pc, #492]	; (8006f40 <tcp_process+0x5c0>)
 8006d54:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8006d58:	497a      	ldr	r1, [pc, #488]	; (8006f44 <tcp_process+0x5c4>)
 8006d5a:	487b      	ldr	r0, [pc, #492]	; (8006f48 <tcp_process+0x5c8>)
 8006d5c:	f005 fbda 	bl	800c514 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <tcp_process+0x400>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6910      	ldr	r0, [r2, #16]
 8006d74:	2200      	movs	r2, #0
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4798      	blx	r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	76bb      	strb	r3, [r7, #26]
 8006d7e:	e001      	b.n	8006d84 <tcp_process+0x404>
 8006d80:	23f0      	movs	r3, #240	; 0xf0
 8006d82:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8006d84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8006d8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006d90:	f113 0f0d 	cmn.w	r3, #13
 8006d94:	d002      	beq.n	8006d9c <tcp_process+0x41c>
              tcp_abort(pcb);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fd ff94 	bl	8004cc4 <tcp_abort>
            }
            return ERR_ABRT;
 8006d9c:	f06f 030c 	mvn.w	r3, #12
 8006da0:	e1ce      	b.n	8007140 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fae0 	bl	8007368 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8006da8:	4b68      	ldr	r3, [pc, #416]	; (8006f4c <tcp_process+0x5cc>)
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <tcp_process+0x43c>
            recv_acked--;
 8006db0:	4b66      	ldr	r3, [pc, #408]	; (8006f4c <tcp_process+0x5cc>)
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	4b64      	ldr	r3, [pc, #400]	; (8006f4c <tcp_process+0x5cc>)
 8006dba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006dc0:	009a      	lsls	r2, r3, #2
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	f241 111c 	movw	r1, #4380	; 0x111c
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	bf38      	it	cc
 8006dd0:	460b      	movcc	r3, r1
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d204      	bcs.n	8006de0 <tcp_process+0x460>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	e00d      	b.n	8006dfc <tcp_process+0x47c>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	f241 121c 	movw	r2, #4380	; 0x111c
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d904      	bls.n	8006df8 <tcp_process+0x478>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	e001      	b.n	8006dfc <tcp_process+0x47c>
 8006df8:	f241 131c 	movw	r3, #4380	; 0x111c
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8006e02:	4b53      	ldr	r3, [pc, #332]	; (8006f50 <tcp_process+0x5d0>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d037      	beq.n	8006e7e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8b5b      	ldrh	r3, [r3, #26]
 8006e12:	f043 0302 	orr.w	r3, r3, #2
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2207      	movs	r2, #7
 8006e20:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8006e22:	e02c      	b.n	8006e7e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e24:	4b40      	ldr	r3, [pc, #256]	; (8006f28 <tcp_process+0x5a8>)
 8006e26:	6819      	ldr	r1, [r3, #0]
 8006e28:	4b40      	ldr	r3, [pc, #256]	; (8006f2c <tcp_process+0x5ac>)
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4b40      	ldr	r3, [pc, #256]	; (8006f30 <tcp_process+0x5b0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e34:	4b3f      	ldr	r3, [pc, #252]	; (8006f34 <tcp_process+0x5b4>)
 8006e36:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e3c:	4a3d      	ldr	r2, [pc, #244]	; (8006f34 <tcp_process+0x5b4>)
 8006e3e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e40:	8812      	ldrh	r2, [r2, #0]
 8006e42:	b292      	uxth	r2, r2
 8006e44:	9202      	str	r2, [sp, #8]
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	4b3b      	ldr	r3, [pc, #236]	; (8006f38 <tcp_process+0x5b8>)
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	4b3b      	ldr	r3, [pc, #236]	; (8006f3c <tcp_process+0x5bc>)
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f002 fbdd 	bl	8009610 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8006e56:	e167      	b.n	8007128 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8006e58:	4b32      	ldr	r3, [pc, #200]	; (8006f24 <tcp_process+0x5a4>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8161 	beq.w	8007128 <tcp_process+0x7a8>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	1e5a      	subs	r2, r3, #1
 8006e6c:	4b30      	ldr	r3, [pc, #192]	; (8006f30 <tcp_process+0x5b0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	f040 8159 	bne.w	8007128 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f002 f9b8 	bl	80091ec <tcp_rexmit>
      break;
 8006e7c:	e154      	b.n	8007128 <tcp_process+0x7a8>
 8006e7e:	e153      	b.n	8007128 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fa71 	bl	8007368 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006e86:	4b32      	ldr	r3, [pc, #200]	; (8006f50 <tcp_process+0x5d0>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 814c 	beq.w	800712c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	8b5b      	ldrh	r3, [r3, #26]
 8006e98:	f043 0302 	orr.w	r3, r3, #2
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006ea8:	e140      	b.n	800712c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa5c 	bl	8007368 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006eb0:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <tcp_process+0x5d0>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d071      	beq.n	8006fa0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <tcp_process+0x5a4>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d060      	beq.n	8006f8a <tcp_process+0x60a>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ecc:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <tcp_process+0x5a8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d15a      	bne.n	8006f8a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d156      	bne.n	8006f8a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	8b5b      	ldrh	r3, [r3, #26]
 8006ee0:	f043 0302 	orr.w	r3, r3, #2
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fe fdbe 	bl	8005a6c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <tcp_process+0x5d4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d105      	bne.n	8006f06 <tcp_process+0x586>
 8006efa:	4b16      	ldr	r3, [pc, #88]	; (8006f54 <tcp_process+0x5d4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	4a14      	ldr	r2, [pc, #80]	; (8006f54 <tcp_process+0x5d4>)
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	e02e      	b.n	8006f64 <tcp_process+0x5e4>
 8006f06:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <tcp_process+0x5d4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e027      	b.n	8006f5e <tcp_process+0x5de>
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d11f      	bne.n	8006f58 <tcp_process+0x5d8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	60da      	str	r2, [r3, #12]
 8006f20:	e020      	b.n	8006f64 <tcp_process+0x5e4>
 8006f22:	bf00      	nop
 8006f24:	200000f8 	.word	0x200000f8
 8006f28:	200000f0 	.word	0x200000f0
 8006f2c:	200000f6 	.word	0x200000f6
 8006f30:	200000ec 	.word	0x200000ec
 8006f34:	200000dc 	.word	0x200000dc
 8006f38:	20003354 	.word	0x20003354
 8006f3c:	20003358 	.word	0x20003358
 8006f40:	0800e5a0 	.word	0x0800e5a0
 8006f44:	0800e840 	.word	0x0800e840
 8006f48:	0800e5ec 	.word	0x0800e5ec
 8006f4c:	200000f4 	.word	0x200000f4
 8006f50:	200000f9 	.word	0x200000f9
 8006f54:	20006888 	.word	0x20006888
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1d4      	bne.n	8006f0e <tcp_process+0x58e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	60da      	str	r2, [r3, #12]
 8006f6a:	4b77      	ldr	r3, [pc, #476]	; (8007148 <tcp_process+0x7c8>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	220a      	movs	r2, #10
 8006f74:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8006f76:	4b75      	ldr	r3, [pc, #468]	; (800714c <tcp_process+0x7cc>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60da      	str	r2, [r3, #12]
 8006f7e:	4a73      	ldr	r2, [pc, #460]	; (800714c <tcp_process+0x7cc>)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	f002 fd06 	bl	8009994 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8006f88:	e0d2      	b.n	8007130 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	8b5b      	ldrh	r3, [r3, #26]
 8006f8e:	f043 0302 	orr.w	r3, r3, #2
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	751a      	strb	r2, [r3, #20]
      break;
 8006f9e:	e0c7      	b.n	8007130 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006fa0:	4b6b      	ldr	r3, [pc, #428]	; (8007150 <tcp_process+0x7d0>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80c1 	beq.w	8007130 <tcp_process+0x7b0>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fb2:	4b68      	ldr	r3, [pc, #416]	; (8007154 <tcp_process+0x7d4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	f040 80ba 	bne.w	8007130 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f040 80b5 	bne.w	8007130 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2206      	movs	r2, #6
 8006fca:	751a      	strb	r2, [r3, #20]
      break;
 8006fcc:	e0b0      	b.n	8007130 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f9ca 	bl	8007368 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006fd4:	4b60      	ldr	r3, [pc, #384]	; (8007158 <tcp_process+0x7d8>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80a9 	beq.w	8007134 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8b5b      	ldrh	r3, [r3, #26]
 8006fe6:	f043 0302 	orr.w	r3, r3, #2
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7fe fd3b 	bl	8005a6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006ff6:	4b59      	ldr	r3, [pc, #356]	; (800715c <tcp_process+0x7dc>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d105      	bne.n	800700c <tcp_process+0x68c>
 8007000:	4b56      	ldr	r3, [pc, #344]	; (800715c <tcp_process+0x7dc>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	4a55      	ldr	r2, [pc, #340]	; (800715c <tcp_process+0x7dc>)
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	e013      	b.n	8007034 <tcp_process+0x6b4>
 800700c:	4b53      	ldr	r3, [pc, #332]	; (800715c <tcp_process+0x7dc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	e00c      	b.n	800702e <tcp_process+0x6ae>
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	429a      	cmp	r2, r3
 800701c:	d104      	bne.n	8007028 <tcp_process+0x6a8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	60da      	str	r2, [r3, #12]
 8007026:	e005      	b.n	8007034 <tcp_process+0x6b4>
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1ef      	bne.n	8007014 <tcp_process+0x694>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	60da      	str	r2, [r3, #12]
 800703a:	4b43      	ldr	r3, [pc, #268]	; (8007148 <tcp_process+0x7c8>)
 800703c:	2201      	movs	r2, #1
 800703e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	220a      	movs	r2, #10
 8007044:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007046:	4b41      	ldr	r3, [pc, #260]	; (800714c <tcp_process+0x7cc>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60da      	str	r2, [r3, #12]
 800704e:	4a3f      	ldr	r2, [pc, #252]	; (800714c <tcp_process+0x7cc>)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	f002 fc9e 	bl	8009994 <tcp_timer_needed>
      }
      break;
 8007058:	e06c      	b.n	8007134 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f984 	bl	8007368 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007060:	4b3b      	ldr	r3, [pc, #236]	; (8007150 <tcp_process+0x7d0>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b00      	cmp	r3, #0
 800706a:	d065      	beq.n	8007138 <tcp_process+0x7b8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007070:	4b38      	ldr	r3, [pc, #224]	; (8007154 <tcp_process+0x7d4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d15f      	bne.n	8007138 <tcp_process+0x7b8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d15b      	bne.n	8007138 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fe fcf3 	bl	8005a6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007086:	4b35      	ldr	r3, [pc, #212]	; (800715c <tcp_process+0x7dc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d105      	bne.n	800709c <tcp_process+0x71c>
 8007090:	4b32      	ldr	r3, [pc, #200]	; (800715c <tcp_process+0x7dc>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	4a31      	ldr	r2, [pc, #196]	; (800715c <tcp_process+0x7dc>)
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	e013      	b.n	80070c4 <tcp_process+0x744>
 800709c:	4b2f      	ldr	r3, [pc, #188]	; (800715c <tcp_process+0x7dc>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	e00c      	b.n	80070be <tcp_process+0x73e>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d104      	bne.n	80070b8 <tcp_process+0x738>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	60da      	str	r2, [r3, #12]
 80070b6:	e005      	b.n	80070c4 <tcp_process+0x744>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1ef      	bne.n	80070a4 <tcp_process+0x724>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	60da      	str	r2, [r3, #12]
 80070ca:	4b1f      	ldr	r3, [pc, #124]	; (8007148 <tcp_process+0x7c8>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	220a      	movs	r2, #10
 80070d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80070d6:	4b1d      	ldr	r3, [pc, #116]	; (800714c <tcp_process+0x7cc>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	4a1b      	ldr	r2, [pc, #108]	; (800714c <tcp_process+0x7cc>)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	f002 fc56 	bl	8009994 <tcp_timer_needed>
      }
      break;
 80070e8:	e026      	b.n	8007138 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f93c 	bl	8007368 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80070f0:	4b17      	ldr	r3, [pc, #92]	; (8007150 <tcp_process+0x7d0>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01f      	beq.n	800713c <tcp_process+0x7bc>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007100:	4b14      	ldr	r3, [pc, #80]	; (8007154 <tcp_process+0x7d4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d119      	bne.n	800713c <tcp_process+0x7bc>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d115      	bne.n	800713c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007110:	4b11      	ldr	r3, [pc, #68]	; (8007158 <tcp_process+0x7d8>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	f043 0310 	orr.w	r3, r3, #16
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4b0f      	ldr	r3, [pc, #60]	; (8007158 <tcp_process+0x7d8>)
 800711c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800711e:	e00d      	b.n	800713c <tcp_process+0x7bc>
    default:
      break;
 8007120:	bf00      	nop
 8007122:	e00c      	b.n	800713e <tcp_process+0x7be>
      break;
 8007124:	bf00      	nop
 8007126:	e00a      	b.n	800713e <tcp_process+0x7be>
      break;
 8007128:	bf00      	nop
 800712a:	e008      	b.n	800713e <tcp_process+0x7be>
      break;
 800712c:	bf00      	nop
 800712e:	e006      	b.n	800713e <tcp_process+0x7be>
      break;
 8007130:	bf00      	nop
 8007132:	e004      	b.n	800713e <tcp_process+0x7be>
      break;
 8007134:	bf00      	nop
 8007136:	e002      	b.n	800713e <tcp_process+0x7be>
      break;
 8007138:	bf00      	nop
 800713a:	e000      	b.n	800713e <tcp_process+0x7be>
      break;
 800713c:	bf00      	nop
  }
  return ERR_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3724      	adds	r7, #36	; 0x24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd90      	pop	{r4, r7, pc}
 8007148:	20006884 	.word	0x20006884
 800714c:	20006898 	.word	0x20006898
 8007150:	200000f8 	.word	0x200000f8
 8007154:	200000f0 	.word	0x200000f0
 8007158:	200000f9 	.word	0x200000f9
 800715c:	20006888 	.word	0x20006888

08007160 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <tcp_oos_insert_segment+0x1e>
 8007170:	4b3b      	ldr	r3, [pc, #236]	; (8007260 <tcp_oos_insert_segment+0x100>)
 8007172:	f240 421f 	movw	r2, #1055	; 0x41f
 8007176:	493b      	ldr	r1, [pc, #236]	; (8007264 <tcp_oos_insert_segment+0x104>)
 8007178:	483b      	ldr	r0, [pc, #236]	; (8007268 <tcp_oos_insert_segment+0x108>)
 800717a:	f005 f9cb 	bl	800c514 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	899b      	ldrh	r3, [r3, #12]
 8007184:	b29b      	uxth	r3, r3
 8007186:	4618      	mov	r0, r3
 8007188:	f7fb fda1 	bl	8002cce <lwip_htons>
 800718c:	4603      	mov	r3, r0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d028      	beq.n	80071ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007198:	6838      	ldr	r0, [r7, #0]
 800719a:	f7fe fa67 	bl	800566c <tcp_segs_free>
    next = NULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	e056      	b.n	8007252 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	899b      	ldrh	r3, [r3, #12]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fb fd8e 	bl	8002cce <lwip_htons>
 80071b2:	4603      	mov	r3, r0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	899b      	ldrh	r3, [r3, #12]
 80071c4:	b29c      	uxth	r4, r3
 80071c6:	2001      	movs	r0, #1
 80071c8:	f7fb fd81 	bl	8002cce <lwip_htons>
 80071cc:	4603      	mov	r3, r0
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4322      	orrs	r2, r4
 80071d6:	b292      	uxth	r2, r2
 80071d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7fe fa55 	bl	8005694 <tcp_seg_free>
    while (next &&
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00e      	beq.n	800720e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	891b      	ldrh	r3, [r3, #8]
 80071f4:	461a      	mov	r2, r3
 80071f6:	4b1d      	ldr	r3, [pc, #116]	; (800726c <tcp_oos_insert_segment+0x10c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	441a      	add	r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	8909      	ldrh	r1, [r1, #8]
 8007206:	440b      	add	r3, r1
 8007208:	1ad3      	subs	r3, r2, r3
    while (next &&
 800720a:	2b00      	cmp	r3, #0
 800720c:	daca      	bge.n	80071a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01e      	beq.n	8007252 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	891b      	ldrh	r3, [r3, #8]
 8007218:	461a      	mov	r2, r3
 800721a:	4b14      	ldr	r3, [pc, #80]	; (800726c <tcp_oos_insert_segment+0x10c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	441a      	add	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007228:	2b00      	cmp	r3, #0
 800722a:	dd12      	ble.n	8007252 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	b29a      	uxth	r2, r3
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <tcp_oos_insert_segment+0x10c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	b29a      	uxth	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	891b      	ldrh	r3, [r3, #8]
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7fc fe33 	bl	8003eb8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	601a      	str	r2, [r3, #0]
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	bd90      	pop	{r4, r7, pc}
 8007260:	0800e5a0 	.word	0x0800e5a0
 8007264:	0800e860 	.word	0x0800e860
 8007268:	0800e5ec 	.word	0x0800e5ec
 800726c:	200000ec 	.word	0x200000ec

08007270 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007270:	b5b0      	push	{r4, r5, r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800727e:	e03e      	b.n	80072fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	4618      	mov	r0, r3
 8007290:	f7fd f820 	bl	80042d4 <pbuf_clen>
 8007294:	4603      	mov	r3, r0
 8007296:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800729e:	8a7a      	ldrh	r2, [r7, #18]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d906      	bls.n	80072b2 <tcp_free_acked_segments+0x42>
 80072a4:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <tcp_free_acked_segments+0xe0>)
 80072a6:	f240 4257 	movw	r2, #1111	; 0x457
 80072aa:	492a      	ldr	r1, [pc, #168]	; (8007354 <tcp_free_acked_segments+0xe4>)
 80072ac:	482a      	ldr	r0, [pc, #168]	; (8007358 <tcp_free_acked_segments+0xe8>)
 80072ae:	f005 f931 	bl	800c514 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80072b8:	8a7b      	ldrh	r3, [r7, #18]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	891a      	ldrh	r2, [r3, #8]
 80072c8:	4b24      	ldr	r3, [pc, #144]	; (800735c <tcp_free_acked_segments+0xec>)
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	4413      	add	r3, r2
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	4b22      	ldr	r3, [pc, #136]	; (800735c <tcp_free_acked_segments+0xec>)
 80072d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80072d4:	6978      	ldr	r0, [r7, #20]
 80072d6:	f7fe f9dd 	bl	8005694 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00c      	beq.n	80072fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <tcp_free_acked_segments+0x8e>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <tcp_free_acked_segments+0x8e>
 80072f0:	4b17      	ldr	r3, [pc, #92]	; (8007350 <tcp_free_acked_segments+0xe0>)
 80072f2:	f240 4262 	movw	r2, #1122	; 0x462
 80072f6:	491a      	ldr	r1, [pc, #104]	; (8007360 <tcp_free_acked_segments+0xf0>)
 80072f8:	4817      	ldr	r0, [pc, #92]	; (8007358 <tcp_free_acked_segments+0xe8>)
 80072fa:	f005 f90b 	bl	800c514 <iprintf>
  while (seg_list != NULL &&
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d020      	beq.n	8007346 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	4618      	mov	r0, r3
 800730c:	f7fb fcf4 	bl	8002cf8 <lwip_htonl>
 8007310:	4604      	mov	r4, r0
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	891b      	ldrh	r3, [r3, #8]
 8007316:	461d      	mov	r5, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	899b      	ldrh	r3, [r3, #12]
 800731e:	b29b      	uxth	r3, r3
 8007320:	4618      	mov	r0, r3
 8007322:	f7fb fcd4 	bl	8002cce <lwip_htons>
 8007326:	4603      	mov	r3, r0
 8007328:	b2db      	uxtb	r3, r3
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <tcp_free_acked_segments+0xc6>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <tcp_free_acked_segments+0xc8>
 8007336:	2300      	movs	r3, #0
 8007338:	442b      	add	r3, r5
 800733a:	18e2      	adds	r2, r4, r3
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <tcp_free_acked_segments+0xf4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd9c      	ble.n	8007280 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8007346:	68bb      	ldr	r3, [r7, #8]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bdb0      	pop	{r4, r5, r7, pc}
 8007350:	0800e5a0 	.word	0x0800e5a0
 8007354:	0800e888 	.word	0x0800e888
 8007358:	0800e5ec 	.word	0x0800e5ec
 800735c:	200000f4 	.word	0x200000f4
 8007360:	0800e8b0 	.word	0x0800e8b0
 8007364:	200000f0 	.word	0x200000f0

08007368 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007368:	b5b0      	push	{r4, r5, r7, lr}
 800736a:	b094      	sub	sp, #80	; 0x50
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <tcp_receive+0x20>
 800737a:	4ba6      	ldr	r3, [pc, #664]	; (8007614 <tcp_receive+0x2ac>)
 800737c:	f240 427b 	movw	r2, #1147	; 0x47b
 8007380:	49a5      	ldr	r1, [pc, #660]	; (8007618 <tcp_receive+0x2b0>)
 8007382:	48a6      	ldr	r0, [pc, #664]	; (800761c <tcp_receive+0x2b4>)
 8007384:	f005 f8c6 	bl	800c514 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	7d1b      	ldrb	r3, [r3, #20]
 800738c:	2b03      	cmp	r3, #3
 800738e:	d806      	bhi.n	800739e <tcp_receive+0x36>
 8007390:	4ba0      	ldr	r3, [pc, #640]	; (8007614 <tcp_receive+0x2ac>)
 8007392:	f240 427c 	movw	r2, #1148	; 0x47c
 8007396:	49a2      	ldr	r1, [pc, #648]	; (8007620 <tcp_receive+0x2b8>)
 8007398:	48a0      	ldr	r0, [pc, #640]	; (800761c <tcp_receive+0x2b4>)
 800739a:	f005 f8bb 	bl	800c514 <iprintf>

  if (flags & TCP_ACK) {
 800739e:	4ba1      	ldr	r3, [pc, #644]	; (8007624 <tcp_receive+0x2bc>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 8263 	beq.w	8007872 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b8:	4413      	add	r3, r2
 80073ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073c0:	4b99      	ldr	r3, [pc, #612]	; (8007628 <tcp_receive+0x2c0>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	db1b      	blt.n	8007402 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ce:	4b96      	ldr	r3, [pc, #600]	; (8007628 <tcp_receive+0x2c0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d106      	bne.n	80073e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073da:	4b94      	ldr	r3, [pc, #592]	; (800762c <tcp_receive+0x2c4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	db0e      	blt.n	8007402 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073e8:	4b90      	ldr	r3, [pc, #576]	; (800762c <tcp_receive+0x2c4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d125      	bne.n	800743c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80073f0:	4b8f      	ldr	r3, [pc, #572]	; (8007630 <tcp_receive+0x2c8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	89db      	ldrh	r3, [r3, #14]
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073fe:	429a      	cmp	r2, r3
 8007400:	d91c      	bls.n	800743c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007402:	4b8b      	ldr	r3, [pc, #556]	; (8007630 <tcp_receive+0x2c8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	89db      	ldrh	r3, [r3, #14]
 8007408:	b29a      	uxth	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800741c:	429a      	cmp	r2, r3
 800741e:	d205      	bcs.n	800742c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800742c:	4b7e      	ldr	r3, [pc, #504]	; (8007628 <tcp_receive+0x2c0>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8007434:	4b7d      	ldr	r3, [pc, #500]	; (800762c <tcp_receive+0x2c4>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800743c:	4b7b      	ldr	r3, [pc, #492]	; (800762c <tcp_receive+0x2c4>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	dc58      	bgt.n	80074fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800744a:	4b7a      	ldr	r3, [pc, #488]	; (8007634 <tcp_receive+0x2cc>)
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d14b      	bne.n	80074ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800745c:	4413      	add	r3, r2
 800745e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007460:	429a      	cmp	r2, r3
 8007462:	d142      	bne.n	80074ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800746a:	2b00      	cmp	r3, #0
 800746c:	db3d      	blt.n	80074ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007472:	4b6e      	ldr	r3, [pc, #440]	; (800762c <tcp_receive+0x2c4>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d137      	bne.n	80074ea <tcp_receive+0x182>
              found_dupack = 1;
 800747a:	2301      	movs	r3, #1
 800747c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007484:	2bff      	cmp	r3, #255	; 0xff
 8007486:	d007      	beq.n	8007498 <tcp_receive+0x130>
                ++pcb->dupacks;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800748e:	3301      	adds	r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d91b      	bls.n	80074da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074ac:	4413      	add	r3, r2
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d30a      	bcc.n	80074d0 <tcp_receive+0x168>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074c4:	4413      	add	r3, r2
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80074ce:	e004      	b.n	80074da <tcp_receive+0x172>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d902      	bls.n	80074ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 feed 	bl	80092c4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80074ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 8160 	bne.w	80077b2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074fa:	e15a      	b.n	80077b2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80074fc:	4b4b      	ldr	r3, [pc, #300]	; (800762c <tcp_receive+0x2c4>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	f2c0 814d 	blt.w	80077a8 <tcp_receive+0x440>
 800750e:	4b47      	ldr	r3, [pc, #284]	; (800762c <tcp_receive+0x2c4>)
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	f300 8145 	bgt.w	80077a8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8b5b      	ldrh	r3, [r3, #26]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d010      	beq.n	800754c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	8b5b      	ldrh	r3, [r3, #26]
 800752e:	f023 0304 	bic.w	r3, r3, #4
 8007532:	b29a      	uxth	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800755a:	10db      	asrs	r3, r3, #3
 800755c:	b21b      	sxth	r3, r3
 800755e:	b29a      	uxth	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007566:	b29b      	uxth	r3, r3
 8007568:	4413      	add	r3, r2
 800756a:	b29b      	uxth	r3, r3
 800756c:	b21a      	sxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8007574:	4b2d      	ldr	r3, [pc, #180]	; (800762c <tcp_receive+0x2c4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	b29a      	uxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757e:	b29b      	uxth	r3, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800758c:	4b27      	ldr	r3, [pc, #156]	; (800762c <tcp_receive+0x2c4>)
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	7d1b      	ldrb	r3, [r3, #20]
 8007598:	2b03      	cmp	r3, #3
 800759a:	f240 8096 	bls.w	80076ca <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d244      	bcs.n	8007638 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	8b5b      	ldrh	r3, [r3, #26]
 80075b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <tcp_receive+0x256>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <tcp_receive+0x258>
 80075be:	2302      	movs	r3, #2
 80075c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80075c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075ce:	fb12 f303 	smulbb	r3, r2, r3
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80075d6:	4293      	cmp	r3, r2
 80075d8:	bf28      	it	cs
 80075da:	4613      	movcs	r3, r2
 80075dc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80075e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80075e6:	4413      	add	r3, r2
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d309      	bcc.n	8007608 <tcp_receive+0x2a0>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80075fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80075fc:	4413      	add	r3, r2
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007606:	e060      	b.n	80076ca <tcp_receive+0x362>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800760e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007612:	e05a      	b.n	80076ca <tcp_receive+0x362>
 8007614:	0800e5a0 	.word	0x0800e5a0
 8007618:	0800e8d0 	.word	0x0800e8d0
 800761c:	0800e5ec 	.word	0x0800e5ec
 8007620:	0800e8ec 	.word	0x0800e8ec
 8007624:	200000f8 	.word	0x200000f8
 8007628:	200000ec 	.word	0x200000ec
 800762c:	200000f0 	.word	0x200000f0
 8007630:	200000dc 	.word	0x200000dc
 8007634:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800763e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007640:	4413      	add	r3, r2
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800764a:	429a      	cmp	r2, r3
 800764c:	d309      	bcc.n	8007662 <tcp_receive+0x2fa>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007654:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007656:	4413      	add	r3, r2
 8007658:	b29a      	uxth	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007660:	e004      	b.n	800766c <tcp_receive+0x304>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007678:	429a      	cmp	r2, r3
 800767a:	d326      	bcc.n	80076ca <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	b29a      	uxth	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800769c:	4413      	add	r3, r2
 800769e:	b29a      	uxth	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d30a      	bcc.n	80076c0 <tcp_receive+0x358>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076b4:	4413      	add	r3, r2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80076be:	e004      	b.n	80076ca <tcp_receive+0x362>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d2:	4a98      	ldr	r2, [pc, #608]	; (8007934 <tcp_receive+0x5cc>)
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fdcb 	bl	8007270 <tcp_free_acked_segments>
 80076da:	4602      	mov	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e8:	4a93      	ldr	r2, [pc, #588]	; (8007938 <tcp_receive+0x5d0>)
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff fdc0 	bl	8007270 <tcp_free_acked_segments>
 80076f0:	4602      	mov	r2, r0
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007704:	861a      	strh	r2, [r3, #48]	; 0x30
 8007706:	e002      	b.n	800770e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d103      	bne.n	8007724 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800772a:	4b84      	ldr	r3, [pc, #528]	; (800793c <tcp_receive+0x5d4>)
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	4413      	add	r3, r2
 8007730:	b29a      	uxth	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8b5b      	ldrh	r3, [r3, #26]
 800773c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007740:	2b00      	cmp	r3, #0
 8007742:	d035      	beq.n	80077b0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007748:	2b00      	cmp	r3, #0
 800774a:	d118      	bne.n	800777e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00c      	beq.n	800776e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4618      	mov	r0, r3
 8007762:	f7fb fac9 	bl	8002cf8 <lwip_htonl>
 8007766:	4603      	mov	r3, r0
 8007768:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800776a:	2b00      	cmp	r3, #0
 800776c:	dc20      	bgt.n	80077b0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	8b5b      	ldrh	r3, [r3, #26]
 8007772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800777c:	e018      	b.n	80077b0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	4618      	mov	r0, r3
 800778c:	f7fb fab4 	bl	8002cf8 <lwip_htonl>
 8007790:	4603      	mov	r3, r0
 8007792:	1ae3      	subs	r3, r4, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	dc0b      	bgt.n	80077b0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8b5b      	ldrh	r3, [r3, #26]
 800779c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80077a6:	e003      	b.n	80077b0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 ff83 	bl	80096b4 <tcp_send_empty_ack>
 80077ae:	e000      	b.n	80077b2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80077b0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d05b      	beq.n	8007872 <tcp_receive+0x50a>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077be:	4b60      	ldr	r3, [pc, #384]	; (8007940 <tcp_receive+0x5d8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	da54      	bge.n	8007872 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80077c8:	4b5e      	ldr	r3, [pc, #376]	; (8007944 <tcp_receive+0x5dc>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80077dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80077e6:	10db      	asrs	r3, r3, #3
 80077e8:	b21b      	sxth	r3, r3
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007800:	4413      	add	r3, r2
 8007802:	b29b      	uxth	r3, r3
 8007804:	b21a      	sxth	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800780a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800780e:	2b00      	cmp	r3, #0
 8007810:	da05      	bge.n	800781e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8007812:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007816:	425b      	negs	r3, r3
 8007818:	b29b      	uxth	r3, r3
 800781a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800781e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007828:	109b      	asrs	r3, r3, #2
 800782a:	b21b      	sxth	r3, r3
 800782c:	b29b      	uxth	r3, r3
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	b29b      	uxth	r3, r3
 8007832:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800783c:	b29a      	uxth	r2, r3
 800783e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007842:	4413      	add	r3, r2
 8007844:	b29b      	uxth	r3, r3
 8007846:	b21a      	sxth	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007852:	10db      	asrs	r3, r3, #3
 8007854:	b21b      	sxth	r3, r3
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800785e:	b29b      	uxth	r3, r3
 8007860:	4413      	add	r3, r2
 8007862:	b29b      	uxth	r3, r3
 8007864:	b21a      	sxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8007872:	4b35      	ldr	r3, [pc, #212]	; (8007948 <tcp_receive+0x5e0>)
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 84e1 	beq.w	800823e <tcp_receive+0xed6>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	7d1b      	ldrb	r3, [r3, #20]
 8007880:	2b06      	cmp	r3, #6
 8007882:	f200 84dc 	bhi.w	800823e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800788a:	4b30      	ldr	r3, [pc, #192]	; (800794c <tcp_receive+0x5e4>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	f2c0 808e 	blt.w	80079b4 <tcp_receive+0x64c>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800789c:	4b2a      	ldr	r3, [pc, #168]	; (8007948 <tcp_receive+0x5e0>)
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	4619      	mov	r1, r3
 80078a2:	4b2a      	ldr	r3, [pc, #168]	; (800794c <tcp_receive+0x5e4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	440b      	add	r3, r1
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	3301      	adds	r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f300 8081 	bgt.w	80079b4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80078b2:	4b27      	ldr	r3, [pc, #156]	; (8007950 <tcp_receive+0x5e8>)
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078bc:	4b23      	ldr	r3, [pc, #140]	; (800794c <tcp_receive+0x5e4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80078c4:	4b22      	ldr	r3, [pc, #136]	; (8007950 <tcp_receive+0x5e8>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <tcp_receive+0x572>
 80078cc:	4b21      	ldr	r3, [pc, #132]	; (8007954 <tcp_receive+0x5ec>)
 80078ce:	f240 5294 	movw	r2, #1428	; 0x594
 80078d2:	4921      	ldr	r1, [pc, #132]	; (8007958 <tcp_receive+0x5f0>)
 80078d4:	4821      	ldr	r0, [pc, #132]	; (800795c <tcp_receive+0x5f4>)
 80078d6:	f004 fe1d 	bl	800c514 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d906      	bls.n	80078f2 <tcp_receive+0x58a>
 80078e4:	4b1b      	ldr	r3, [pc, #108]	; (8007954 <tcp_receive+0x5ec>)
 80078e6:	f240 5295 	movw	r2, #1429	; 0x595
 80078ea:	491d      	ldr	r1, [pc, #116]	; (8007960 <tcp_receive+0x5f8>)
 80078ec:	481b      	ldr	r0, [pc, #108]	; (800795c <tcp_receive+0x5f4>)
 80078ee:	f004 fe11 	bl	800c514 <iprintf>
      off = (u16_t)off32;
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <tcp_receive+0x5e8>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	891b      	ldrh	r3, [r3, #8]
 80078fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8007902:	429a      	cmp	r2, r3
 8007904:	d906      	bls.n	8007914 <tcp_receive+0x5ac>
 8007906:	4b13      	ldr	r3, [pc, #76]	; (8007954 <tcp_receive+0x5ec>)
 8007908:	f240 5297 	movw	r2, #1431	; 0x597
 800790c:	4915      	ldr	r1, [pc, #84]	; (8007964 <tcp_receive+0x5fc>)
 800790e:	4813      	ldr	r0, [pc, #76]	; (800795c <tcp_receive+0x5f4>)
 8007910:	f004 fe00 	bl	800c514 <iprintf>
      inseg.len -= off;
 8007914:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <tcp_receive+0x5e8>)
 8007916:	891a      	ldrh	r2, [r3, #8]
 8007918:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	b29a      	uxth	r2, r3
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <tcp_receive+0x5e8>)
 8007922:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007924:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <tcp_receive+0x5e8>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	891a      	ldrh	r2, [r3, #8]
 800792a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8007932:	e029      	b.n	8007988 <tcp_receive+0x620>
 8007934:	0800e908 	.word	0x0800e908
 8007938:	0800e910 	.word	0x0800e910
 800793c:	200000f4 	.word	0x200000f4
 8007940:	200000f0 	.word	0x200000f0
 8007944:	2000688c 	.word	0x2000688c
 8007948:	200000f6 	.word	0x200000f6
 800794c:	200000ec 	.word	0x200000ec
 8007950:	200000cc 	.word	0x200000cc
 8007954:	0800e5a0 	.word	0x0800e5a0
 8007958:	0800e918 	.word	0x0800e918
 800795c:	0800e5ec 	.word	0x0800e5ec
 8007960:	0800e928 	.word	0x0800e928
 8007964:	0800e938 	.word	0x0800e938
        off -= p->len;
 8007968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796a:	895b      	ldrh	r3, [r3, #10]
 800796c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8007976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007978:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800797a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800797c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800797e:	2200      	movs	r2, #0
 8007980:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8007982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8007988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800798a:	895b      	ldrh	r3, [r3, #10]
 800798c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8007990:	429a      	cmp	r2, r3
 8007992:	d8e9      	bhi.n	8007968 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8007994:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007998:	4619      	mov	r1, r3
 800799a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800799c:	f7fc fb8c 	bl	80040b8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	4a91      	ldr	r2, [pc, #580]	; (8007bec <tcp_receive+0x884>)
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	4b91      	ldr	r3, [pc, #580]	; (8007bf0 <tcp_receive+0x888>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	4a8f      	ldr	r2, [pc, #572]	; (8007bec <tcp_receive+0x884>)
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80079b2:	e00d      	b.n	80079d0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80079b4:	4b8d      	ldr	r3, [pc, #564]	; (8007bec <tcp_receive+0x884>)
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da06      	bge.n	80079d0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	8b5b      	ldrh	r3, [r3, #26]
 80079c6:	f043 0302 	orr.w	r3, r3, #2
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80079d0:	4b86      	ldr	r3, [pc, #536]	; (8007bec <tcp_receive+0x884>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f2c0 842a 	blt.w	8008234 <tcp_receive+0xecc>
 80079e0:	4b82      	ldr	r3, [pc, #520]	; (8007bec <tcp_receive+0x884>)
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80079ec:	440b      	add	r3, r1
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	3301      	adds	r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f300 841e 	bgt.w	8008234 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079fc:	4b7b      	ldr	r3, [pc, #492]	; (8007bec <tcp_receive+0x884>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	f040 829a 	bne.w	8007f3a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8007a06:	4b7a      	ldr	r3, [pc, #488]	; (8007bf0 <tcp_receive+0x888>)
 8007a08:	891c      	ldrh	r4, [r3, #8]
 8007a0a:	4b79      	ldr	r3, [pc, #484]	; (8007bf0 <tcp_receive+0x888>)
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	899b      	ldrh	r3, [r3, #12]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fb f95b 	bl	8002cce <lwip_htons>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f003 0303 	and.w	r3, r3, #3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <tcp_receive+0x6c0>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e000      	b.n	8007a2a <tcp_receive+0x6c2>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4423      	add	r3, r4
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	4b71      	ldr	r3, [pc, #452]	; (8007bf4 <tcp_receive+0x88c>)
 8007a30:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007a36:	4b6f      	ldr	r3, [pc, #444]	; (8007bf4 <tcp_receive+0x88c>)
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d275      	bcs.n	8007b2a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007a3e:	4b6c      	ldr	r3, [pc, #432]	; (8007bf0 <tcp_receive+0x888>)
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	899b      	ldrh	r3, [r3, #12]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fb f941 	bl	8002cce <lwip_htons>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01f      	beq.n	8007a98 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007a58:	4b65      	ldr	r3, [pc, #404]	; (8007bf0 <tcp_receive+0x888>)
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	899b      	ldrh	r3, [r3, #12]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	b21b      	sxth	r3, r3
 8007a62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a66:	b21c      	sxth	r4, r3
 8007a68:	4b61      	ldr	r3, [pc, #388]	; (8007bf0 <tcp_receive+0x888>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	899b      	ldrh	r3, [r3, #12]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fb f92c 	bl	8002cce <lwip_htons>
 8007a76:	4603      	mov	r3, r0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fb f923 	bl	8002cce <lwip_htons>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	b21b      	sxth	r3, r3
 8007a8c:	4323      	orrs	r3, r4
 8007a8e:	b21a      	sxth	r2, r3
 8007a90:	4b57      	ldr	r3, [pc, #348]	; (8007bf0 <tcp_receive+0x888>)
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	b292      	uxth	r2, r2
 8007a96:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007a9c:	4b54      	ldr	r3, [pc, #336]	; (8007bf0 <tcp_receive+0x888>)
 8007a9e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007aa0:	4b53      	ldr	r3, [pc, #332]	; (8007bf0 <tcp_receive+0x888>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	899b      	ldrh	r3, [r3, #12]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fb f910 	bl	8002cce <lwip_htons>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8007aba:	4b4d      	ldr	r3, [pc, #308]	; (8007bf0 <tcp_receive+0x888>)
 8007abc:	891b      	ldrh	r3, [r3, #8]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	4b4b      	ldr	r3, [pc, #300]	; (8007bf0 <tcp_receive+0x888>)
 8007ac4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007ac6:	4b4a      	ldr	r3, [pc, #296]	; (8007bf0 <tcp_receive+0x888>)
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	4b49      	ldr	r3, [pc, #292]	; (8007bf0 <tcp_receive+0x888>)
 8007acc:	891b      	ldrh	r3, [r3, #8]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f7fc f9f1 	bl	8003eb8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007ad6:	4b46      	ldr	r3, [pc, #280]	; (8007bf0 <tcp_receive+0x888>)
 8007ad8:	891c      	ldrh	r4, [r3, #8]
 8007ada:	4b45      	ldr	r3, [pc, #276]	; (8007bf0 <tcp_receive+0x888>)
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	899b      	ldrh	r3, [r3, #12]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fb f8f3 	bl	8002cce <lwip_htons>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <tcp_receive+0x790>
 8007af4:	2301      	movs	r3, #1
 8007af6:	e000      	b.n	8007afa <tcp_receive+0x792>
 8007af8:	2300      	movs	r3, #0
 8007afa:	4423      	add	r3, r4
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	4b3d      	ldr	r3, [pc, #244]	; (8007bf4 <tcp_receive+0x88c>)
 8007b00:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007b02:	4b3c      	ldr	r3, [pc, #240]	; (8007bf4 <tcp_receive+0x88c>)
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	4b38      	ldr	r3, [pc, #224]	; (8007bec <tcp_receive+0x884>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	441a      	add	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007b16:	440b      	add	r3, r1
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d006      	beq.n	8007b2a <tcp_receive+0x7c2>
 8007b1c:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <tcp_receive+0x890>)
 8007b1e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8007b22:	4936      	ldr	r1, [pc, #216]	; (8007bfc <tcp_receive+0x894>)
 8007b24:	4836      	ldr	r0, [pc, #216]	; (8007c00 <tcp_receive+0x898>)
 8007b26:	f004 fcf5 	bl	800c514 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80e7 	beq.w	8007d02 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007b34:	4b2e      	ldr	r3, [pc, #184]	; (8007bf0 <tcp_receive+0x888>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	899b      	ldrh	r3, [r3, #12]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fb f8c6 	bl	8002cce <lwip_htons>
 8007b42:	4603      	mov	r3, r0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d010      	beq.n	8007b70 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8007b4e:	e00a      	b.n	8007b66 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b54:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f7fd fd97 	bl	8005694 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f0      	bne.n	8007b50 <tcp_receive+0x7e8>
 8007b6e:	e0c8      	b.n	8007d02 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8007b76:	e052      	b.n	8007c1e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	899b      	ldrh	r3, [r3, #12]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fb f8a4 	bl	8002cce <lwip_htons>
 8007b86:	4603      	mov	r3, r0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d03d      	beq.n	8007c0e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8007b92:	4b17      	ldr	r3, [pc, #92]	; (8007bf0 <tcp_receive+0x888>)
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	899b      	ldrh	r3, [r3, #12]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fb f897 	bl	8002cce <lwip_htons>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d130      	bne.n	8007c0e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007bac:	4b10      	ldr	r3, [pc, #64]	; (8007bf0 <tcp_receive+0x888>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	899b      	ldrh	r3, [r3, #12]
 8007bb2:	b29c      	uxth	r4, r3
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	f7fb f88a 	bl	8002cce <lwip_htons>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <tcp_receive+0x888>)
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	4322      	orrs	r2, r4
 8007bc4:	b292      	uxth	r2, r2
 8007bc6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8007bc8:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <tcp_receive+0x888>)
 8007bca:	891c      	ldrh	r4, [r3, #8]
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <tcp_receive+0x888>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	899b      	ldrh	r3, [r3, #12]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fb f87a 	bl	8002cce <lwip_htons>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00e      	beq.n	8007c04 <tcp_receive+0x89c>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e00d      	b.n	8007c06 <tcp_receive+0x89e>
 8007bea:	bf00      	nop
 8007bec:	200000ec 	.word	0x200000ec
 8007bf0:	200000cc 	.word	0x200000cc
 8007bf4:	200000f6 	.word	0x200000f6
 8007bf8:	0800e5a0 	.word	0x0800e5a0
 8007bfc:	0800e948 	.word	0x0800e948
 8007c00:	0800e5ec 	.word	0x0800e5ec
 8007c04:	2300      	movs	r3, #0
 8007c06:	4423      	add	r3, r4
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	4b98      	ldr	r3, [pc, #608]	; (8007e6c <tcp_receive+0xb04>)
 8007c0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c10:	613b      	str	r3, [r7, #16]
              next = next->next;
 8007c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8007c18:	6938      	ldr	r0, [r7, #16]
 8007c1a:	f7fd fd3b 	bl	8005694 <tcp_seg_free>
            while (next &&
 8007c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00e      	beq.n	8007c42 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8007c24:	4b91      	ldr	r3, [pc, #580]	; (8007e6c <tcp_receive+0xb04>)
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	4b91      	ldr	r3, [pc, #580]	; (8007e70 <tcp_receive+0xb08>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	441a      	add	r2, r3
 8007c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c38:	8909      	ldrh	r1, [r1, #8]
 8007c3a:	440b      	add	r3, r1
 8007c3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	da9a      	bge.n	8007b78 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8007c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d059      	beq.n	8007cfc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8007c48:	4b88      	ldr	r3, [pc, #544]	; (8007e6c <tcp_receive+0xb04>)
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4b88      	ldr	r3, [pc, #544]	; (8007e70 <tcp_receive+0xb08>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	441a      	add	r2, r3
 8007c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	dd4d      	ble.n	8007cfc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	4b81      	ldr	r3, [pc, #516]	; (8007e70 <tcp_receive+0xb08>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	4b80      	ldr	r3, [pc, #512]	; (8007e74 <tcp_receive+0xb0c>)
 8007c74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007c76:	4b7f      	ldr	r3, [pc, #508]	; (8007e74 <tcp_receive+0xb0c>)
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	899b      	ldrh	r3, [r3, #12]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fb f825 	bl	8002cce <lwip_htons>
 8007c84:	4603      	mov	r3, r0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <tcp_receive+0x934>
                inseg.len -= 1;
 8007c90:	4b78      	ldr	r3, [pc, #480]	; (8007e74 <tcp_receive+0xb0c>)
 8007c92:	891b      	ldrh	r3, [r3, #8]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	4b76      	ldr	r3, [pc, #472]	; (8007e74 <tcp_receive+0xb0c>)
 8007c9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007c9c:	4b75      	ldr	r3, [pc, #468]	; (8007e74 <tcp_receive+0xb0c>)
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	4b74      	ldr	r3, [pc, #464]	; (8007e74 <tcp_receive+0xb0c>)
 8007ca2:	891b      	ldrh	r3, [r3, #8]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f7fc f906 	bl	8003eb8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007cac:	4b71      	ldr	r3, [pc, #452]	; (8007e74 <tcp_receive+0xb0c>)
 8007cae:	891c      	ldrh	r4, [r3, #8]
 8007cb0:	4b70      	ldr	r3, [pc, #448]	; (8007e74 <tcp_receive+0xb0c>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	899b      	ldrh	r3, [r3, #12]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fb f808 	bl	8002cce <lwip_htons>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <tcp_receive+0x966>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <tcp_receive+0x968>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4423      	add	r3, r4
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	4b65      	ldr	r3, [pc, #404]	; (8007e6c <tcp_receive+0xb04>)
 8007cd6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8007cd8:	4b64      	ldr	r3, [pc, #400]	; (8007e6c <tcp_receive+0xb04>)
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4b64      	ldr	r3, [pc, #400]	; (8007e70 <tcp_receive+0xb08>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	441a      	add	r2, r3
 8007ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d006      	beq.n	8007cfc <tcp_receive+0x994>
 8007cee:	4b62      	ldr	r3, [pc, #392]	; (8007e78 <tcp_receive+0xb10>)
 8007cf0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8007cf4:	4961      	ldr	r1, [pc, #388]	; (8007e7c <tcp_receive+0xb14>)
 8007cf6:	4862      	ldr	r0, [pc, #392]	; (8007e80 <tcp_receive+0xb18>)
 8007cf8:	f004 fc0c 	bl	800c514 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d00:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007d02:	4b5a      	ldr	r3, [pc, #360]	; (8007e6c <tcp_receive+0xb04>)
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	4b59      	ldr	r3, [pc, #356]	; (8007e70 <tcp_receive+0xb08>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	441a      	add	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007d16:	4b55      	ldr	r3, [pc, #340]	; (8007e6c <tcp_receive+0xb04>)
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d206      	bcs.n	8007d2c <tcp_receive+0x9c4>
 8007d1e:	4b56      	ldr	r3, [pc, #344]	; (8007e78 <tcp_receive+0xb10>)
 8007d20:	f240 6207 	movw	r2, #1543	; 0x607
 8007d24:	4957      	ldr	r1, [pc, #348]	; (8007e84 <tcp_receive+0xb1c>)
 8007d26:	4856      	ldr	r0, [pc, #344]	; (8007e80 <tcp_receive+0xb18>)
 8007d28:	f004 fbf4 	bl	800c514 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007d30:	4b4e      	ldr	r3, [pc, #312]	; (8007e6c <tcp_receive+0xb04>)
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7fc ffcd 	bl	8004cdc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8007d42:	4b4c      	ldr	r3, [pc, #304]	; (8007e74 <tcp_receive+0xb0c>)
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	891b      	ldrh	r3, [r3, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d006      	beq.n	8007d5a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8007d4c:	4b49      	ldr	r3, [pc, #292]	; (8007e74 <tcp_receive+0xb0c>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4a4d      	ldr	r2, [pc, #308]	; (8007e88 <tcp_receive+0xb20>)
 8007d52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007d54:	4b47      	ldr	r3, [pc, #284]	; (8007e74 <tcp_receive+0xb0c>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007d5a:	4b46      	ldr	r3, [pc, #280]	; (8007e74 <tcp_receive+0xb0c>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	899b      	ldrh	r3, [r3, #12]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fa ffb3 	bl	8002cce <lwip_htons>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 80b8 	beq.w	8007ee6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007d76:	4b45      	ldr	r3, [pc, #276]	; (8007e8c <tcp_receive+0xb24>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f043 0320 	orr.w	r3, r3, #32
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	4b42      	ldr	r3, [pc, #264]	; (8007e8c <tcp_receive+0xb24>)
 8007d82:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8007d84:	e0af      	b.n	8007ee6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d8a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4a36      	ldr	r2, [pc, #216]	; (8007e70 <tcp_receive+0xb08>)
 8007d96:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	891b      	ldrh	r3, [r3, #8]
 8007d9c:	461c      	mov	r4, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	899b      	ldrh	r3, [r3, #12]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fa ff91 	bl	8002cce <lwip_htons>
 8007dac:	4603      	mov	r3, r0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f003 0303 	and.w	r3, r3, #3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <tcp_receive+0xa54>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <tcp_receive+0xa56>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	191a      	adds	r2, r3, r4
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	441a      	add	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dce:	461c      	mov	r4, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	891b      	ldrh	r3, [r3, #8]
 8007dd4:	461d      	mov	r5, r3
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	899b      	ldrh	r3, [r3, #12]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fa ff75 	bl	8002cce <lwip_htons>
 8007de4:	4603      	mov	r3, r0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <tcp_receive+0xa8c>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e000      	b.n	8007df6 <tcp_receive+0xa8e>
 8007df4:	2300      	movs	r3, #0
 8007df6:	442b      	add	r3, r5
 8007df8:	429c      	cmp	r4, r3
 8007dfa:	d206      	bcs.n	8007e0a <tcp_receive+0xaa2>
 8007dfc:	4b1e      	ldr	r3, [pc, #120]	; (8007e78 <tcp_receive+0xb10>)
 8007dfe:	f240 622c 	movw	r2, #1580	; 0x62c
 8007e02:	4923      	ldr	r1, [pc, #140]	; (8007e90 <tcp_receive+0xb28>)
 8007e04:	481e      	ldr	r0, [pc, #120]	; (8007e80 <tcp_receive+0xb18>)
 8007e06:	f004 fb85 	bl	800c514 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	891b      	ldrh	r3, [r3, #8]
 8007e0e:	461c      	mov	r4, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	899b      	ldrh	r3, [r3, #12]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fa ff58 	bl	8002cce <lwip_htons>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <tcp_receive+0xac6>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <tcp_receive+0xac8>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	1919      	adds	r1, r3, r4
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007e36:	b28b      	uxth	r3, r1
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7fc ff4b 	bl	8004cdc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	891b      	ldrh	r3, [r3, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d028      	beq.n	8007ea2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8007e50:	4b0d      	ldr	r3, [pc, #52]	; (8007e88 <tcp_receive+0xb20>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01d      	beq.n	8007e94 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8007e58:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <tcp_receive+0xb20>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4619      	mov	r1, r3
 8007e62:	4610      	mov	r0, r2
 8007e64:	f7fc fa70 	bl	8004348 <pbuf_cat>
 8007e68:	e018      	b.n	8007e9c <tcp_receive+0xb34>
 8007e6a:	bf00      	nop
 8007e6c:	200000f6 	.word	0x200000f6
 8007e70:	200000ec 	.word	0x200000ec
 8007e74:	200000cc 	.word	0x200000cc
 8007e78:	0800e5a0 	.word	0x0800e5a0
 8007e7c:	0800e980 	.word	0x0800e980
 8007e80:	0800e5ec 	.word	0x0800e5ec
 8007e84:	0800e9bc 	.word	0x0800e9bc
 8007e88:	200000fc 	.word	0x200000fc
 8007e8c:	200000f9 	.word	0x200000f9
 8007e90:	0800e9dc 	.word	0x0800e9dc
            } else {
              recv_data = cseg->p;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	4a70      	ldr	r2, [pc, #448]	; (800805c <tcp_receive+0xcf4>)
 8007e9a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	899b      	ldrh	r3, [r3, #12]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fa ff0f 	bl	8002cce <lwip_htons>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00d      	beq.n	8007ed8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8007ebc:	4b68      	ldr	r3, [pc, #416]	; (8008060 <tcp_receive+0xcf8>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	f043 0320 	orr.w	r3, r3, #32
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	4b66      	ldr	r3, [pc, #408]	; (8008060 <tcp_receive+0xcf8>)
 8007ec8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	7d1b      	ldrb	r3, [r3, #20]
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d102      	bne.n	8007ed8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2207      	movs	r2, #7
 8007ed6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8007ee0:	68b8      	ldr	r0, [r7, #8]
 8007ee2:	f7fd fbd7 	bl	8005694 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d008      	beq.n	8007f00 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8007efa:	429a      	cmp	r2, r3
 8007efc:	f43f af43 	beq.w	8007d86 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	8b5b      	ldrh	r3, [r3, #26]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00e      	beq.n	8007f2a <tcp_receive+0xbc2>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8b5b      	ldrh	r3, [r3, #26]
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	835a      	strh	r2, [r3, #26]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	8b5b      	ldrh	r3, [r3, #26]
 8007f1e:	f043 0302 	orr.w	r3, r3, #2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007f28:	e188      	b.n	800823c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8b5b      	ldrh	r3, [r3, #26]
 8007f2e:	f043 0301 	orr.w	r3, r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007f38:	e180      	b.n	800823c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8007f42:	4848      	ldr	r0, [pc, #288]	; (8008064 <tcp_receive+0xcfc>)
 8007f44:	f7fd fbbe 	bl	80056c4 <tcp_seg_copy>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	675a      	str	r2, [r3, #116]	; 0x74
 8007f4e:	e16d      	b.n	800822c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f5a:	e157      	b.n	800820c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	4b41      	ldr	r3, [pc, #260]	; (8008068 <tcp_receive+0xd00>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d11d      	bne.n	8007fa6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8007f6a:	4b3e      	ldr	r3, [pc, #248]	; (8008064 <tcp_receive+0xcfc>)
 8007f6c:	891a      	ldrh	r2, [r3, #8]
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	891b      	ldrh	r3, [r3, #8]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	f240 814f 	bls.w	8008216 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8007f78:	483a      	ldr	r0, [pc, #232]	; (8008064 <tcp_receive+0xcfc>)
 8007f7a:	f7fd fba3 	bl	80056c4 <tcp_seg_copy>
 8007f7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 8149 	beq.w	800821a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8007f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e002      	b.n	8007f9c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8007f9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f9e:	6978      	ldr	r0, [r7, #20]
 8007fa0:	f7ff f8de 	bl	8007160 <tcp_oos_insert_segment>
                }
                break;
 8007fa4:	e139      	b.n	800821a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8007fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d117      	bne.n	8007fdc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007fac:	4b2e      	ldr	r3, [pc, #184]	; (8008068 <tcp_receive+0xd00>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	da57      	bge.n	800806c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8007fbc:	4829      	ldr	r0, [pc, #164]	; (8008064 <tcp_receive+0xcfc>)
 8007fbe:	f7fd fb81 	bl	80056c4 <tcp_seg_copy>
 8007fc2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 8129 	beq.w	800821e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8007fd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fd4:	69b8      	ldr	r0, [r7, #24]
 8007fd6:	f7ff f8c3 	bl	8007160 <tcp_oos_insert_segment>
                  }
                  break;
 8007fda:	e120      	b.n	800821e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8007fdc:	4b22      	ldr	r3, [pc, #136]	; (8008068 <tcp_receive+0xd00>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	db3e      	blt.n	800806c <tcp_receive+0xd04>
 8007fee:	4b1e      	ldr	r3, [pc, #120]	; (8008068 <tcp_receive+0xd00>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dc35      	bgt.n	800806c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008000:	4818      	ldr	r0, [pc, #96]	; (8008064 <tcp_receive+0xcfc>)
 8008002:	f7fd fb5f 	bl	80056c4 <tcp_seg_copy>
 8008006:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 8109 	beq.w	8008222 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008018:	8912      	ldrh	r2, [r2, #8]
 800801a:	441a      	add	r2, r3
 800801c:	4b12      	ldr	r3, [pc, #72]	; (8008068 <tcp_receive+0xd00>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	dd12      	ble.n	800804c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <tcp_receive+0xd00>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	b29a      	uxth	r2, r3
 800802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	b29b      	uxth	r3, r3
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	b29a      	uxth	r2, r3
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800803c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008042:	891b      	ldrh	r3, [r3, #8]
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f7fb ff36 	bl	8003eb8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008054:	69f8      	ldr	r0, [r7, #28]
 8008056:	f7ff f883 	bl	8007160 <tcp_oos_insert_segment>
                  }
                  break;
 800805a:	e0e2      	b.n	8008222 <tcp_receive+0xeba>
 800805c:	200000fc 	.word	0x200000fc
 8008060:	200000f9 	.word	0x200000f9
 8008064:	200000cc 	.word	0x200000cc
 8008068:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f040 80c6 	bne.w	8008206 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800807a:	4b80      	ldr	r3, [pc, #512]	; (800827c <tcp_receive+0xf14>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008086:	2b00      	cmp	r3, #0
 8008088:	f340 80bd 	ble.w	8008206 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	899b      	ldrh	r3, [r3, #12]
 8008092:	b29b      	uxth	r3, r3
 8008094:	4618      	mov	r0, r3
 8008096:	f7fa fe1a 	bl	8002cce <lwip_htons>
 800809a:	4603      	mov	r3, r0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f040 80bf 	bne.w	8008226 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80080a8:	4875      	ldr	r0, [pc, #468]	; (8008280 <tcp_receive+0xf18>)
 80080aa:	f7fd fb0b 	bl	80056c4 <tcp_seg_copy>
 80080ae:	4602      	mov	r2, r0
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80b6 	beq.w	800822a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080c6:	8912      	ldrh	r2, [r2, #8]
 80080c8:	441a      	add	r2, r3
 80080ca:	4b6c      	ldr	r3, [pc, #432]	; (800827c <tcp_receive+0xf14>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dd12      	ble.n	80080fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80080d4:	4b69      	ldr	r3, [pc, #420]	; (800827c <tcp_receive+0xf14>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	891b      	ldrh	r3, [r3, #8]
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fb fedf 	bl	8003eb8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80080fa:	4b62      	ldr	r3, [pc, #392]	; (8008284 <tcp_receive+0xf1c>)
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	4b5e      	ldr	r3, [pc, #376]	; (800827c <tcp_receive+0xf14>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	441a      	add	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800810e:	440b      	add	r3, r1
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	f340 8089 	ble.w	800822a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	899b      	ldrh	r3, [r3, #12]
 8008120:	b29b      	uxth	r3, r3
 8008122:	4618      	mov	r0, r3
 8008124:	f7fa fdd3 	bl	8002cce <lwip_htons>
 8008128:	4603      	mov	r3, r0
 800812a:	b2db      	uxtb	r3, r3
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d022      	beq.n	800817a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	899b      	ldrh	r3, [r3, #12]
 800813c:	b29b      	uxth	r3, r3
 800813e:	b21b      	sxth	r3, r3
 8008140:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008144:	b21c      	sxth	r4, r3
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	899b      	ldrh	r3, [r3, #12]
 800814e:	b29b      	uxth	r3, r3
 8008150:	4618      	mov	r0, r3
 8008152:	f7fa fdbc 	bl	8002cce <lwip_htons>
 8008156:	4603      	mov	r3, r0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	b29b      	uxth	r3, r3
 800815c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008160:	b29b      	uxth	r3, r3
 8008162:	4618      	mov	r0, r3
 8008164:	f7fa fdb3 	bl	8002cce <lwip_htons>
 8008168:	4603      	mov	r3, r0
 800816a:	b21b      	sxth	r3, r3
 800816c:	4323      	orrs	r3, r4
 800816e:	b21a      	sxth	r2, r3
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	b292      	uxth	r2, r2
 8008178:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	b29a      	uxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008184:	4413      	add	r3, r2
 8008186:	b299      	uxth	r1, r3
 8008188:	4b3c      	ldr	r3, [pc, #240]	; (800827c <tcp_receive+0xf14>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	b29a      	uxth	r2, r3
 800818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	1a8a      	subs	r2, r1, r2
 8008194:	b292      	uxth	r2, r2
 8008196:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	891b      	ldrh	r3, [r3, #8]
 80081a4:	4619      	mov	r1, r3
 80081a6:	4610      	mov	r0, r2
 80081a8:	f7fb fe86 	bl	8003eb8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	891c      	ldrh	r4, [r3, #8]
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	899b      	ldrh	r3, [r3, #12]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fa fd86 	bl	8002cce <lwip_htons>
 80081c2:	4603      	mov	r3, r0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <tcp_receive+0xe6a>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <tcp_receive+0xe6c>
 80081d2:	2300      	movs	r3, #0
 80081d4:	4423      	add	r3, r4
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	4b2a      	ldr	r3, [pc, #168]	; (8008284 <tcp_receive+0xf1c>)
 80081da:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80081dc:	4b29      	ldr	r3, [pc, #164]	; (8008284 <tcp_receive+0xf1c>)
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	4b26      	ldr	r3, [pc, #152]	; (800827c <tcp_receive+0xf14>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	441a      	add	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	6879      	ldr	r1, [r7, #4]
 80081ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80081f0:	440b      	add	r3, r1
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d019      	beq.n	800822a <tcp_receive+0xec2>
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <tcp_receive+0xf20>)
 80081f8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80081fc:	4923      	ldr	r1, [pc, #140]	; (800828c <tcp_receive+0xf24>)
 80081fe:	4824      	ldr	r0, [pc, #144]	; (8008290 <tcp_receive+0xf28>)
 8008200:	f004 f988 	bl	800c514 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008204:	e011      	b.n	800822a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	63bb      	str	r3, [r7, #56]	; 0x38
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	2b00      	cmp	r3, #0
 8008210:	f47f aea4 	bne.w	8007f5c <tcp_receive+0xbf4>
 8008214:	e00a      	b.n	800822c <tcp_receive+0xec4>
                break;
 8008216:	bf00      	nop
 8008218:	e008      	b.n	800822c <tcp_receive+0xec4>
                break;
 800821a:	bf00      	nop
 800821c:	e006      	b.n	800822c <tcp_receive+0xec4>
                  break;
 800821e:	bf00      	nop
 8008220:	e004      	b.n	800822c <tcp_receive+0xec4>
                  break;
 8008222:	bf00      	nop
 8008224:	e002      	b.n	800822c <tcp_receive+0xec4>
                  break;
 8008226:	bf00      	nop
 8008228:	e000      	b.n	800822c <tcp_receive+0xec4>
                break;
 800822a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 fa41 	bl	80096b4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008232:	e003      	b.n	800823c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 fa3d 	bl	80096b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800823a:	e01a      	b.n	8008272 <tcp_receive+0xf0a>
 800823c:	e019      	b.n	8008272 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <tcp_receive+0xf14>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	db0a      	blt.n	8008262 <tcp_receive+0xefa>
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <tcp_receive+0xf14>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008258:	440b      	add	r3, r1
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	3301      	adds	r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	dd07      	ble.n	8008272 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8b5b      	ldrh	r3, [r3, #26]
 8008266:	f043 0302 	orr.w	r3, r3, #2
 800826a:	b29a      	uxth	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008270:	e7ff      	b.n	8008272 <tcp_receive+0xf0a>
 8008272:	bf00      	nop
 8008274:	3750      	adds	r7, #80	; 0x50
 8008276:	46bd      	mov	sp, r7
 8008278:	bdb0      	pop	{r4, r5, r7, pc}
 800827a:	bf00      	nop
 800827c:	200000ec 	.word	0x200000ec
 8008280:	200000cc 	.word	0x200000cc
 8008284:	200000f6 	.word	0x200000f6
 8008288:	0800e5a0 	.word	0x0800e5a0
 800828c:	0800e948 	.word	0x0800e948
 8008290:	0800e5ec 	.word	0x0800e5ec

08008294 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800829a:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <tcp_get_next_optbyte+0x5c>)
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	b291      	uxth	r1, r2
 80082a2:	4a13      	ldr	r2, [pc, #76]	; (80082f0 <tcp_get_next_optbyte+0x5c>)
 80082a4:	8011      	strh	r1, [r2, #0]
 80082a6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80082a8:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <tcp_get_next_optbyte+0x60>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <tcp_get_next_optbyte+0x26>
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <tcp_get_next_optbyte+0x64>)
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	88fa      	ldrh	r2, [r7, #6]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d208      	bcs.n	80082cc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80082ba:	4b10      	ldr	r3, [pc, #64]	; (80082fc <tcp_get_next_optbyte+0x68>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3314      	adds	r3, #20
 80082c0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	4413      	add	r3, r2
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	e00b      	b.n	80082e4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80082cc:	88fb      	ldrh	r3, [r7, #6]
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <tcp_get_next_optbyte+0x64>)
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80082da:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <tcp_get_next_optbyte+0x60>)
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	797b      	ldrb	r3, [r7, #5]
 80082e0:	4413      	add	r3, r2
 80082e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	200000e8 	.word	0x200000e8
 80082f4:	200000e4 	.word	0x200000e4
 80082f8:	200000e2 	.word	0x200000e2
 80082fc:	200000dc 	.word	0x200000dc

08008300 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <tcp_parseopt+0x1c>
 800830e:	4b31      	ldr	r3, [pc, #196]	; (80083d4 <tcp_parseopt+0xd4>)
 8008310:	f240 727d 	movw	r2, #1917	; 0x77d
 8008314:	4930      	ldr	r1, [pc, #192]	; (80083d8 <tcp_parseopt+0xd8>)
 8008316:	4831      	ldr	r0, [pc, #196]	; (80083dc <tcp_parseopt+0xdc>)
 8008318:	f004 f8fc 	bl	800c514 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800831c:	4b30      	ldr	r3, [pc, #192]	; (80083e0 <tcp_parseopt+0xe0>)
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d053      	beq.n	80083cc <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008324:	4b2f      	ldr	r3, [pc, #188]	; (80083e4 <tcp_parseopt+0xe4>)
 8008326:	2200      	movs	r2, #0
 8008328:	801a      	strh	r2, [r3, #0]
 800832a:	e043      	b.n	80083b4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800832c:	f7ff ffb2 	bl	8008294 <tcp_get_next_optbyte>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d03c      	beq.n	80083b4 <tcp_parseopt+0xb4>
 800833a:	2b02      	cmp	r3, #2
 800833c:	d002      	beq.n	8008344 <tcp_parseopt+0x44>
 800833e:	2b00      	cmp	r3, #0
 8008340:	d03f      	beq.n	80083c2 <tcp_parseopt+0xc2>
 8008342:	e026      	b.n	8008392 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008344:	f7ff ffa6 	bl	8008294 <tcp_get_next_optbyte>
 8008348:	4603      	mov	r3, r0
 800834a:	2b04      	cmp	r3, #4
 800834c:	d13b      	bne.n	80083c6 <tcp_parseopt+0xc6>
 800834e:	4b25      	ldr	r3, [pc, #148]	; (80083e4 <tcp_parseopt+0xe4>)
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	3302      	adds	r3, #2
 8008354:	4a22      	ldr	r2, [pc, #136]	; (80083e0 <tcp_parseopt+0xe0>)
 8008356:	8812      	ldrh	r2, [r2, #0]
 8008358:	4293      	cmp	r3, r2
 800835a:	dc34      	bgt.n	80083c6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800835c:	f7ff ff9a 	bl	8008294 <tcp_get_next_optbyte>
 8008360:	4603      	mov	r3, r0
 8008362:	b29b      	uxth	r3, r3
 8008364:	021b      	lsls	r3, r3, #8
 8008366:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8008368:	f7ff ff94 	bl	8008294 <tcp_get_next_optbyte>
 800836c:	4603      	mov	r3, r0
 800836e:	b29a      	uxth	r2, r3
 8008370:	89bb      	ldrh	r3, [r7, #12]
 8008372:	4313      	orrs	r3, r2
 8008374:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008376:	89bb      	ldrh	r3, [r7, #12]
 8008378:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800837c:	d804      	bhi.n	8008388 <tcp_parseopt+0x88>
 800837e:	89bb      	ldrh	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <tcp_parseopt+0x88>
 8008384:	89ba      	ldrh	r2, [r7, #12]
 8008386:	e001      	b.n	800838c <tcp_parseopt+0x8c>
 8008388:	f44f 7206 	mov.w	r2, #536	; 0x218
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8008390:	e010      	b.n	80083b4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8008392:	f7ff ff7f 	bl	8008294 <tcp_get_next_optbyte>
 8008396:	4603      	mov	r3, r0
 8008398:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800839a:	7afb      	ldrb	r3, [r7, #11]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d914      	bls.n	80083ca <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <tcp_parseopt+0xe4>)
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	4413      	add	r3, r2
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3b02      	subs	r3, #2
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <tcp_parseopt+0xe4>)
 80083b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80083b4:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <tcp_parseopt+0xe4>)
 80083b6:	881a      	ldrh	r2, [r3, #0]
 80083b8:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <tcp_parseopt+0xe0>)
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d3b5      	bcc.n	800832c <tcp_parseopt+0x2c>
 80083c0:	e004      	b.n	80083cc <tcp_parseopt+0xcc>
          return;
 80083c2:	bf00      	nop
 80083c4:	e002      	b.n	80083cc <tcp_parseopt+0xcc>
            return;
 80083c6:	bf00      	nop
 80083c8:	e000      	b.n	80083cc <tcp_parseopt+0xcc>
            return;
 80083ca:	bf00      	nop
      }
    }
  }
}
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	0800e5a0 	.word	0x0800e5a0
 80083d8:	0800ea04 	.word	0x0800ea04
 80083dc:	0800e5ec 	.word	0x0800e5ec
 80083e0:	200000e0 	.word	0x200000e0
 80083e4:	200000e8 	.word	0x200000e8

080083e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80083ec:	4b05      	ldr	r3, [pc, #20]	; (8008404 <tcp_trigger_input_pcb_close+0x1c>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	f043 0310 	orr.w	r3, r3, #16
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	4b03      	ldr	r3, [pc, #12]	; (8008404 <tcp_trigger_input_pcb_close+0x1c>)
 80083f8:	701a      	strb	r2, [r3, #0]
}
 80083fa:	bf00      	nop
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	200000f9 	.word	0x200000f9

08008408 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <tcp_route+0x28>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	7a1b      	ldrb	r3, [r3, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d006      	beq.n	8008430 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	7a1b      	ldrb	r3, [r3, #8]
 8008426:	4618      	mov	r0, r3
 8008428:	f7fb fb90 	bl	8003b4c <netif_get_by_index>
 800842c:	4603      	mov	r3, r0
 800842e:	e003      	b.n	8008438 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f002 fe49 	bl	800b0c8 <ip4_route>
 8008436:	4603      	mov	r3, r0
  }
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8008440:	b590      	push	{r4, r7, lr}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	4613      	mov	r3, r2
 800844e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d105      	bne.n	8008462 <tcp_create_segment+0x22>
 8008456:	4b44      	ldr	r3, [pc, #272]	; (8008568 <tcp_create_segment+0x128>)
 8008458:	22a3      	movs	r2, #163	; 0xa3
 800845a:	4944      	ldr	r1, [pc, #272]	; (800856c <tcp_create_segment+0x12c>)
 800845c:	4844      	ldr	r0, [pc, #272]	; (8008570 <tcp_create_segment+0x130>)
 800845e:	f004 f859 	bl	800c514 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d105      	bne.n	8008474 <tcp_create_segment+0x34>
 8008468:	4b3f      	ldr	r3, [pc, #252]	; (8008568 <tcp_create_segment+0x128>)
 800846a:	22a4      	movs	r2, #164	; 0xa4
 800846c:	4941      	ldr	r1, [pc, #260]	; (8008574 <tcp_create_segment+0x134>)
 800846e:	4840      	ldr	r0, [pc, #256]	; (8008570 <tcp_create_segment+0x130>)
 8008470:	f004 f850 	bl	800c514 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008474:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008482:	2003      	movs	r0, #3
 8008484:	f7fb f878 	bl	8003578 <memp_malloc>
 8008488:	6138      	str	r0, [r7, #16]
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008490:	68b8      	ldr	r0, [r7, #8]
 8008492:	f7fb fe97 	bl	80041c4 <pbuf_free>
    return NULL;
 8008496:	2300      	movs	r3, #0
 8008498:	e061      	b.n	800855e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80084a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	891a      	ldrh	r2, [r3, #8]
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d205      	bcs.n	80084c6 <tcp_create_segment+0x86>
 80084ba:	4b2b      	ldr	r3, [pc, #172]	; (8008568 <tcp_create_segment+0x128>)
 80084bc:	22b0      	movs	r2, #176	; 0xb0
 80084be:	492e      	ldr	r1, [pc, #184]	; (8008578 <tcp_create_segment+0x138>)
 80084c0:	482b      	ldr	r0, [pc, #172]	; (8008570 <tcp_create_segment+0x130>)
 80084c2:	f004 f827 	bl	800c514 <iprintf>
  seg->len = p->tot_len - optlen;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	891a      	ldrh	r2, [r3, #8]
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80084d6:	2114      	movs	r1, #20
 80084d8:	68b8      	ldr	r0, [r7, #8]
 80084da:	f7fb fddd 	bl	8004098 <pbuf_add_header>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80084e4:	6938      	ldr	r0, [r7, #16]
 80084e6:	f7fd f8d5 	bl	8005694 <tcp_seg_free>
    return NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e037      	b.n	800855e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8ada      	ldrh	r2, [r3, #22]
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	68dc      	ldr	r4, [r3, #12]
 8008500:	4610      	mov	r0, r2
 8008502:	f7fa fbe4 	bl	8002cce <lwip_htons>
 8008506:	4603      	mov	r3, r0
 8008508:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8b1a      	ldrh	r2, [r3, #24]
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	68dc      	ldr	r4, [r3, #12]
 8008512:	4610      	mov	r0, r2
 8008514:	f7fa fbdb 	bl	8002cce <lwip_htons>
 8008518:	4603      	mov	r3, r0
 800851a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	68dc      	ldr	r4, [r3, #12]
 8008520:	6838      	ldr	r0, [r7, #0]
 8008522:	f7fa fbe9 	bl	8002cf8 <lwip_htonl>
 8008526:	4603      	mov	r3, r0
 8008528:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800852a:	7dfb      	ldrb	r3, [r7, #23]
 800852c:	089b      	lsrs	r3, r3, #2
 800852e:	b2db      	uxtb	r3, r3
 8008530:	b29b      	uxth	r3, r3
 8008532:	3305      	adds	r3, #5
 8008534:	b29b      	uxth	r3, r3
 8008536:	031b      	lsls	r3, r3, #12
 8008538:	b29a      	uxth	r2, r3
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	b29b      	uxth	r3, r3
 800853e:	4313      	orrs	r3, r2
 8008540:	b29a      	uxth	r2, r3
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	68dc      	ldr	r4, [r3, #12]
 8008546:	4610      	mov	r0, r2
 8008548:	f7fa fbc1 	bl	8002cce <lwip_htons>
 800854c:	4603      	mov	r3, r0
 800854e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	749a      	strb	r2, [r3, #18]
 8008558:	2200      	movs	r2, #0
 800855a:	74da      	strb	r2, [r3, #19]
  return seg;
 800855c:	693b      	ldr	r3, [r7, #16]
}
 800855e:	4618      	mov	r0, r3
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	bd90      	pop	{r4, r7, pc}
 8008566:	bf00      	nop
 8008568:	0800ea20 	.word	0x0800ea20
 800856c:	0800ea54 	.word	0x0800ea54
 8008570:	0800ea74 	.word	0x0800ea74
 8008574:	0800ea9c 	.word	0x0800ea9c
 8008578:	0800eac0 	.word	0x0800eac0

0800857c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b08b      	sub	sp, #44	; 0x2c
 8008580:	af02      	add	r7, sp, #8
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8008588:	2300      	movs	r3, #0
 800858a:	61fb      	str	r3, [r7, #28]
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <tcp_split_unsent_seg+0x2c>
 800859a:	4b95      	ldr	r3, [pc, #596]	; (80087f0 <tcp_split_unsent_seg+0x274>)
 800859c:	f240 324b 	movw	r2, #843	; 0x34b
 80085a0:	4994      	ldr	r1, [pc, #592]	; (80087f4 <tcp_split_unsent_seg+0x278>)
 80085a2:	4895      	ldr	r0, [pc, #596]	; (80087f8 <tcp_split_unsent_seg+0x27c>)
 80085a4:	f003 ffb6 	bl	800c514 <iprintf>

  useg = pcb->unsent;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d102      	bne.n	80085ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80085b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085b8:	e116      	b.n	80087e8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80085ba:	887b      	ldrh	r3, [r7, #2]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d109      	bne.n	80085d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80085c0:	4b8b      	ldr	r3, [pc, #556]	; (80087f0 <tcp_split_unsent_seg+0x274>)
 80085c2:	f240 3253 	movw	r2, #851	; 0x353
 80085c6:	498d      	ldr	r1, [pc, #564]	; (80087fc <tcp_split_unsent_seg+0x280>)
 80085c8:	488b      	ldr	r0, [pc, #556]	; (80087f8 <tcp_split_unsent_seg+0x27c>)
 80085ca:	f003 ffa3 	bl	800c514 <iprintf>
    return ERR_VAL;
 80085ce:	f06f 0305 	mvn.w	r3, #5
 80085d2:	e109      	b.n	80087e8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	891b      	ldrh	r3, [r3, #8]
 80085d8:	887a      	ldrh	r2, [r7, #2]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d301      	bcc.n	80085e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e102      	b.n	80087e8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80085e6:	887a      	ldrh	r2, [r7, #2]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d906      	bls.n	80085fa <tcp_split_unsent_seg+0x7e>
 80085ec:	4b80      	ldr	r3, [pc, #512]	; (80087f0 <tcp_split_unsent_seg+0x274>)
 80085ee:	f240 325b 	movw	r2, #859	; 0x35b
 80085f2:	4983      	ldr	r1, [pc, #524]	; (8008800 <tcp_split_unsent_seg+0x284>)
 80085f4:	4880      	ldr	r0, [pc, #512]	; (80087f8 <tcp_split_unsent_seg+0x27c>)
 80085f6:	f003 ff8d 	bl	800c514 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	891b      	ldrh	r3, [r3, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <tcp_split_unsent_seg+0x94>
 8008602:	4b7b      	ldr	r3, [pc, #492]	; (80087f0 <tcp_split_unsent_seg+0x274>)
 8008604:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8008608:	497e      	ldr	r1, [pc, #504]	; (8008804 <tcp_split_unsent_seg+0x288>)
 800860a:	487b      	ldr	r0, [pc, #492]	; (80087f8 <tcp_split_unsent_seg+0x27c>)
 800860c:	f003 ff82 	bl	800c514 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	7a9b      	ldrb	r3, [r3, #10]
 8008614:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	891a      	ldrh	r2, [r3, #8]
 8008626:	887b      	ldrh	r3, [r7, #2]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	b29a      	uxth	r2, r3
 8008630:	89bb      	ldrh	r3, [r7, #12]
 8008632:	4413      	add	r3, r2
 8008634:	b29b      	uxth	r3, r3
 8008636:	f44f 7220 	mov.w	r2, #640	; 0x280
 800863a:	4619      	mov	r1, r3
 800863c:	2036      	movs	r0, #54	; 0x36
 800863e:	f7fb fae1 	bl	8003c04 <pbuf_alloc>
 8008642:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 80b7 	beq.w	80087ba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	891a      	ldrh	r2, [r3, #8]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	891b      	ldrh	r3, [r3, #8]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	b29a      	uxth	r2, r3
 800865a:	887b      	ldrh	r3, [r7, #2]
 800865c:	4413      	add	r3, r2
 800865e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	6858      	ldr	r0, [r3, #4]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	18d1      	adds	r1, r2, r3
 800866c:	897b      	ldrh	r3, [r7, #10]
 800866e:	89ba      	ldrh	r2, [r7, #12]
 8008670:	f7fb ff92 	bl	8004598 <pbuf_copy_partial>
 8008674:	4603      	mov	r3, r0
 8008676:	461a      	mov	r2, r3
 8008678:	89bb      	ldrh	r3, [r7, #12]
 800867a:	4293      	cmp	r3, r2
 800867c:	f040 809f 	bne.w	80087be <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	899b      	ldrh	r3, [r3, #12]
 8008686:	b29b      	uxth	r3, r3
 8008688:	4618      	mov	r0, r3
 800868a:	f7fa fb20 	bl	8002cce <lwip_htons>
 800868e:	4603      	mov	r3, r0
 8008690:	b2db      	uxtb	r3, r3
 8008692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008696:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8008698:	2300      	movs	r3, #0
 800869a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800869c:	7efb      	ldrb	r3, [r7, #27]
 800869e:	f003 0308 	and.w	r3, r3, #8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d007      	beq.n	80086b6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80086a6:	7efb      	ldrb	r3, [r7, #27]
 80086a8:	f023 0308 	bic.w	r3, r3, #8
 80086ac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80086ae:	7ebb      	ldrb	r3, [r7, #26]
 80086b0:	f043 0308 	orr.w	r3, r3, #8
 80086b4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80086b6:	7efb      	ldrb	r3, [r7, #27]
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80086c0:	7efb      	ldrb	r3, [r7, #27]
 80086c2:	f023 0301 	bic.w	r3, r3, #1
 80086c6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80086c8:	7ebb      	ldrb	r3, [r7, #26]
 80086ca:	f043 0301 	orr.w	r3, r3, #1
 80086ce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fa fb0e 	bl	8002cf8 <lwip_htonl>
 80086dc:	4602      	mov	r2, r0
 80086de:	887b      	ldrh	r3, [r7, #2]
 80086e0:	18d1      	adds	r1, r2, r3
 80086e2:	7eba      	ldrb	r2, [r7, #26]
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	460b      	mov	r3, r1
 80086ea:	6939      	ldr	r1, [r7, #16]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff fea7 	bl	8008440 <tcp_create_segment>
 80086f2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d063      	beq.n	80087c2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fb fde8 	bl	80042d4 <pbuf_clen>
 8008704:	4603      	mov	r3, r0
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	b29a      	uxth	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	6858      	ldr	r0, [r3, #4]
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	891a      	ldrh	r2, [r3, #8]
 8008722:	89bb      	ldrh	r3, [r7, #12]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	b29b      	uxth	r3, r3
 8008728:	4619      	mov	r1, r3
 800872a:	f7fb fbc5 	bl	8003eb8 <pbuf_realloc>
  useg->len -= remainder;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	891a      	ldrh	r2, [r3, #8]
 8008732:	89bb      	ldrh	r3, [r7, #12]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	b29a      	uxth	r2, r3
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	899b      	ldrh	r3, [r3, #12]
 8008742:	b29c      	uxth	r4, r3
 8008744:	7efb      	ldrb	r3, [r7, #27]
 8008746:	b29b      	uxth	r3, r3
 8008748:	4618      	mov	r0, r3
 800874a:	f7fa fac0 	bl	8002cce <lwip_htons>
 800874e:	4603      	mov	r3, r0
 8008750:	461a      	mov	r2, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	4322      	orrs	r2, r4
 8008758:	b292      	uxth	r2, r2
 800875a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	4618      	mov	r0, r3
 8008762:	f7fb fdb7 	bl	80042d4 <pbuf_clen>
 8008766:	4603      	mov	r3, r0
 8008768:	461a      	mov	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008770:	4413      	add	r3, r2
 8008772:	b29a      	uxth	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	4618      	mov	r0, r3
 8008780:	f7fb fda8 	bl	80042d4 <pbuf_clen>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800878e:	4413      	add	r3, r2
 8008790:	b29a      	uxth	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d103      	bne.n	80087b6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e016      	b.n	80087e8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80087ba:	bf00      	nop
 80087bc:	e002      	b.n	80087c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80087be:	bf00      	nop
 80087c0:	e000      	b.n	80087c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80087c2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d006      	beq.n	80087d8 <tcp_split_unsent_seg+0x25c>
 80087ca:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <tcp_split_unsent_seg+0x274>)
 80087cc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80087d0:	490d      	ldr	r1, [pc, #52]	; (8008808 <tcp_split_unsent_seg+0x28c>)
 80087d2:	4809      	ldr	r0, [pc, #36]	; (80087f8 <tcp_split_unsent_seg+0x27c>)
 80087d4:	f003 fe9e 	bl	800c514 <iprintf>
  if (p != NULL) {
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80087de:	6938      	ldr	r0, [r7, #16]
 80087e0:	f7fb fcf0 	bl	80041c4 <pbuf_free>
  }

  return ERR_MEM;
 80087e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3724      	adds	r7, #36	; 0x24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}
 80087f0:	0800ea20 	.word	0x0800ea20
 80087f4:	0800edb4 	.word	0x0800edb4
 80087f8:	0800ea74 	.word	0x0800ea74
 80087fc:	0800edd8 	.word	0x0800edd8
 8008800:	0800edfc 	.word	0x0800edfc
 8008804:	0800ee0c 	.word	0x0800ee0c
 8008808:	0800ee1c 	.word	0x0800ee1c

0800880c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800880c:	b590      	push	{r4, r7, lr}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <tcp_send_fin+0x1c>
 800881a:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <tcp_send_fin+0x94>)
 800881c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8008820:	4920      	ldr	r1, [pc, #128]	; (80088a4 <tcp_send_fin+0x98>)
 8008822:	4821      	ldr	r0, [pc, #132]	; (80088a8 <tcp_send_fin+0x9c>)
 8008824:	f003 fe76 	bl	800c514 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d02e      	beq.n	800888e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	e002      	b.n	800883e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f8      	bne.n	8008838 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	899b      	ldrh	r3, [r3, #12]
 800884c:	b29b      	uxth	r3, r3
 800884e:	4618      	mov	r0, r3
 8008850:	f7fa fa3d 	bl	8002cce <lwip_htons>
 8008854:	4603      	mov	r3, r0
 8008856:	b2db      	uxtb	r3, r3
 8008858:	f003 0307 	and.w	r3, r3, #7
 800885c:	2b00      	cmp	r3, #0
 800885e:	d116      	bne.n	800888e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	899b      	ldrh	r3, [r3, #12]
 8008866:	b29c      	uxth	r4, r3
 8008868:	2001      	movs	r0, #1
 800886a:	f7fa fa30 	bl	8002cce <lwip_htons>
 800886e:	4603      	mov	r3, r0
 8008870:	461a      	mov	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	4322      	orrs	r2, r4
 8008878:	b292      	uxth	r2, r2
 800887a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8b5b      	ldrh	r3, [r3, #26]
 8008880:	f043 0320 	orr.w	r3, r3, #32
 8008884:	b29a      	uxth	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	e004      	b.n	8008898 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800888e:	2101      	movs	r1, #1
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f80b 	bl	80088ac <tcp_enqueue_flags>
 8008896:	4603      	mov	r3, r0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	bd90      	pop	{r4, r7, pc}
 80088a0:	0800ea20 	.word	0x0800ea20
 80088a4:	0800ee28 	.word	0x0800ee28
 80088a8:	0800ea74 	.word	0x0800ea74

080088ac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <tcp_enqueue_flags+0x2c>
 80088ca:	4b67      	ldr	r3, [pc, #412]	; (8008a68 <tcp_enqueue_flags+0x1bc>)
 80088cc:	f240 4212 	movw	r2, #1042	; 0x412
 80088d0:	4966      	ldr	r1, [pc, #408]	; (8008a6c <tcp_enqueue_flags+0x1c0>)
 80088d2:	4867      	ldr	r0, [pc, #412]	; (8008a70 <tcp_enqueue_flags+0x1c4>)
 80088d4:	f003 fe1e 	bl	800c514 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <tcp_enqueue_flags+0x40>
 80088de:	4b62      	ldr	r3, [pc, #392]	; (8008a68 <tcp_enqueue_flags+0x1bc>)
 80088e0:	f240 4213 	movw	r2, #1043	; 0x413
 80088e4:	4963      	ldr	r1, [pc, #396]	; (8008a74 <tcp_enqueue_flags+0x1c8>)
 80088e6:	4862      	ldr	r0, [pc, #392]	; (8008a70 <tcp_enqueue_flags+0x1c4>)
 80088e8:	f003 fe14 	bl	800c514 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80088f6:	2301      	movs	r3, #1
 80088f8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80088fa:	7ffb      	ldrb	r3, [r7, #31]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	b29b      	uxth	r3, r3
 800890a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800890e:	4619      	mov	r1, r3
 8008910:	2036      	movs	r0, #54	; 0x36
 8008912:	f7fb f977 	bl	8003c04 <pbuf_alloc>
 8008916:	6138      	str	r0, [r7, #16]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d109      	bne.n	8008932 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8b5b      	ldrh	r3, [r3, #26]
 8008922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800892c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008930:	e095      	b.n	8008a5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	895a      	ldrh	r2, [r3, #10]
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	b29b      	uxth	r3, r3
 800893a:	429a      	cmp	r2, r3
 800893c:	d206      	bcs.n	800894c <tcp_enqueue_flags+0xa0>
 800893e:	4b4a      	ldr	r3, [pc, #296]	; (8008a68 <tcp_enqueue_flags+0x1bc>)
 8008940:	f240 423a 	movw	r2, #1082	; 0x43a
 8008944:	494c      	ldr	r1, [pc, #304]	; (8008a78 <tcp_enqueue_flags+0x1cc>)
 8008946:	484a      	ldr	r0, [pc, #296]	; (8008a70 <tcp_enqueue_flags+0x1c4>)
 8008948:	f003 fde4 	bl	800c514 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	7ffb      	ldrb	r3, [r7, #31]
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	460b      	mov	r3, r1
 8008958:	6939      	ldr	r1, [r7, #16]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff fd70 	bl	8008440 <tcp_create_segment>
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d109      	bne.n	800897c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	8b5b      	ldrh	r3, [r3, #26]
 800896c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008970:	b29a      	uxth	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800897a:	e070      	b.n	8008a5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f003 0303 	and.w	r3, r3, #3
 8008984:	2b00      	cmp	r3, #0
 8008986:	d006      	beq.n	8008996 <tcp_enqueue_flags+0xea>
 8008988:	4b37      	ldr	r3, [pc, #220]	; (8008a68 <tcp_enqueue_flags+0x1bc>)
 800898a:	f240 4242 	movw	r2, #1090	; 0x442
 800898e:	493b      	ldr	r1, [pc, #236]	; (8008a7c <tcp_enqueue_flags+0x1d0>)
 8008990:	4837      	ldr	r0, [pc, #220]	; (8008a70 <tcp_enqueue_flags+0x1c4>)
 8008992:	f003 fdbf 	bl	800c514 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	891b      	ldrh	r3, [r3, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d006      	beq.n	80089ac <tcp_enqueue_flags+0x100>
 800899e:	4b32      	ldr	r3, [pc, #200]	; (8008a68 <tcp_enqueue_flags+0x1bc>)
 80089a0:	f240 4243 	movw	r2, #1091	; 0x443
 80089a4:	4936      	ldr	r1, [pc, #216]	; (8008a80 <tcp_enqueue_flags+0x1d4>)
 80089a6:	4832      	ldr	r0, [pc, #200]	; (8008a70 <tcp_enqueue_flags+0x1c4>)
 80089a8:	f003 fdb4 	bl	800c514 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80089ba:	e00d      	b.n	80089d8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089c0:	61bb      	str	r3, [r7, #24]
 80089c2:	e002      	b.n	80089ca <tcp_enqueue_flags+0x11e>
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1f8      	bne.n	80089c4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d104      	bne.n	80089f4 <tcp_enqueue_flags+0x148>
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d004      	beq.n	80089fe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089f8:	1c5a      	adds	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d006      	beq.n	8008a16 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	8b5b      	ldrh	r3, [r3, #26]
 8008a0c:	f043 0320 	orr.w	r3, r3, #32
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fb fc5a 	bl	80042d4 <pbuf_clen>
 8008a20:	4603      	mov	r3, r0
 8008a22:	461a      	mov	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008a2a:	4413      	add	r3, r2
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00e      	beq.n	8008a5c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <tcp_enqueue_flags+0x1b0>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d106      	bne.n	8008a5c <tcp_enqueue_flags+0x1b0>
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <tcp_enqueue_flags+0x1bc>)
 8008a50:	f240 4266 	movw	r2, #1126	; 0x466
 8008a54:	490b      	ldr	r1, [pc, #44]	; (8008a84 <tcp_enqueue_flags+0x1d8>)
 8008a56:	4806      	ldr	r0, [pc, #24]	; (8008a70 <tcp_enqueue_flags+0x1c4>)
 8008a58:	f003 fd5c 	bl	800c514 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	0800ea20 	.word	0x0800ea20
 8008a6c:	0800ee44 	.word	0x0800ee44
 8008a70:	0800ea74 	.word	0x0800ea74
 8008a74:	0800ee9c 	.word	0x0800ee9c
 8008a78:	0800eebc 	.word	0x0800eebc
 8008a7c:	0800eef8 	.word	0x0800eef8
 8008a80:	0800ef10 	.word	0x0800ef10
 8008a84:	0800ef3c 	.word	0x0800ef3c

08008a88 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008a88:	b5b0      	push	{r4, r5, r7, lr}
 8008a8a:	b08a      	sub	sp, #40	; 0x28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <tcp_output+0x1c>
 8008a96:	4ba0      	ldr	r3, [pc, #640]	; (8008d18 <tcp_output+0x290>)
 8008a98:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8008a9c:	499f      	ldr	r1, [pc, #636]	; (8008d1c <tcp_output+0x294>)
 8008a9e:	48a0      	ldr	r0, [pc, #640]	; (8008d20 <tcp_output+0x298>)
 8008aa0:	f003 fd38 	bl	800c514 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	7d1b      	ldrb	r3, [r3, #20]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d106      	bne.n	8008aba <tcp_output+0x32>
 8008aac:	4b9a      	ldr	r3, [pc, #616]	; (8008d18 <tcp_output+0x290>)
 8008aae:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8008ab2:	499c      	ldr	r1, [pc, #624]	; (8008d24 <tcp_output+0x29c>)
 8008ab4:	489a      	ldr	r0, [pc, #616]	; (8008d20 <tcp_output+0x298>)
 8008ab6:	f003 fd2d 	bl	800c514 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008aba:	4b9b      	ldr	r3, [pc, #620]	; (8008d28 <tcp_output+0x2a0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d101      	bne.n	8008ac8 <tcp_output+0x40>
    return ERR_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e1d2      	b.n	8008e6e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d203      	bcs.n	8008ae0 <tcp_output+0x58>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ade:	e002      	b.n	8008ae6 <tcp_output+0x5e>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ae6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10b      	bne.n	8008b0c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	8b5b      	ldrh	r3, [r3, #26]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 81a9 	beq.w	8008e54 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fdd6 	bl	80096b4 <tcp_send_empty_ack>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	e1b0      	b.n	8008e6e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3304      	adds	r3, #4
 8008b12:	461a      	mov	r2, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff fc77 	bl	8008408 <tcp_route>
 8008b1a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <tcp_output+0xa0>
    return ERR_RTE;
 8008b22:	f06f 0303 	mvn.w	r3, #3
 8008b26:	e1a2      	b.n	8008e6e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <tcp_output+0xae>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d111      	bne.n	8008b5a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <tcp_output+0xba>
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	e000      	b.n	8008b44 <tcp_output+0xbc>
 8008b42:	2300      	movs	r3, #0
 8008b44:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d102      	bne.n	8008b52 <tcp_output+0xca>
      return ERR_RTE;
 8008b4c:	f06f 0303 	mvn.w	r3, #3
 8008b50:	e18d      	b.n	8008e6e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fa f8c9 	bl	8002cf8 <lwip_htonl>
 8008b66:	4602      	mov	r2, r0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b70:	8912      	ldrh	r2, [r2, #8]
 8008b72:	4413      	add	r3, r2
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d227      	bcs.n	8008bca <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b80:	461a      	mov	r2, r3
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d114      	bne.n	8008bb2 <tcp_output+0x12a>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d110      	bne.n	8008bb2 <tcp_output+0x12a>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10b      	bne.n	8008bb2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	8b5b      	ldrh	r3, [r3, #26]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 814c 	beq.w	8008e58 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fd77 	bl	80096b4 <tcp_send_empty_ack>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	e151      	b.n	8008e6e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 811b 	beq.w	8008e16 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8008be0:	e002      	b.n	8008be8 <tcp_output+0x160>
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	623b      	str	r3, [r7, #32]
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1f8      	bne.n	8008be2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8008bf0:	e111      	b.n	8008e16 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	899b      	ldrh	r3, [r3, #12]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fa f867 	bl	8002cce <lwip_htons>
 8008c00:	4603      	mov	r3, r0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d006      	beq.n	8008c1a <tcp_output+0x192>
 8008c0c:	4b42      	ldr	r3, [pc, #264]	; (8008d18 <tcp_output+0x290>)
 8008c0e:	f240 5237 	movw	r2, #1335	; 0x537
 8008c12:	4946      	ldr	r1, [pc, #280]	; (8008d2c <tcp_output+0x2a4>)
 8008c14:	4842      	ldr	r0, [pc, #264]	; (8008d20 <tcp_output+0x298>)
 8008c16:	f003 fc7d 	bl	800c514 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d01f      	beq.n	8008c62 <tcp_output+0x1da>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	8b5b      	ldrh	r3, [r3, #26]
 8008c26:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d119      	bne.n	8008c62 <tcp_output+0x1da>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <tcp_output+0x1c6>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d110      	bne.n	8008c62 <tcp_output+0x1da>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c44:	891a      	ldrh	r2, [r3, #8]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d209      	bcs.n	8008c62 <tcp_output+0x1da>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d004      	beq.n	8008c62 <tcp_output+0x1da>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	d901      	bls.n	8008c66 <tcp_output+0x1de>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <tcp_output+0x1e0>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	8b5b      	ldrh	r3, [r3, #26]
 8008c70:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80e3 	beq.w	8008e40 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	7d1b      	ldrb	r3, [r3, #20]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d00d      	beq.n	8008c9e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	899b      	ldrh	r3, [r3, #12]
 8008c88:	b29c      	uxth	r4, r3
 8008c8a:	2010      	movs	r0, #16
 8008c8c:	f7fa f81f 	bl	8002cce <lwip_htons>
 8008c90:	4603      	mov	r3, r0
 8008c92:	461a      	mov	r2, r3
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	4322      	orrs	r2, r4
 8008c9a:	b292      	uxth	r2, r2
 8008c9c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ca4:	f000 f908 	bl	8008eb8 <tcp_output_segment>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8008cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d009      	beq.n	8008cc8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	8b5b      	ldrh	r3, [r3, #26]
 8008cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	835a      	strh	r2, [r3, #26]
      return err;
 8008cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cc6:	e0d2      	b.n	8008e6e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	7d1b      	ldrb	r3, [r3, #20]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d006      	beq.n	8008ce6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	8b5b      	ldrh	r3, [r3, #26]
 8008cdc:	f023 0303 	bic.w	r3, r3, #3
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fa f803 	bl	8002cf8 <lwip_htonl>
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	891b      	ldrh	r3, [r3, #8]
 8008cf8:	461d      	mov	r5, r3
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	899b      	ldrh	r3, [r3, #12]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f9 ffe3 	bl	8002cce <lwip_htons>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00d      	beq.n	8008d30 <tcp_output+0x2a8>
 8008d14:	2301      	movs	r3, #1
 8008d16:	e00c      	b.n	8008d32 <tcp_output+0x2aa>
 8008d18:	0800ea20 	.word	0x0800ea20
 8008d1c:	0800ef64 	.word	0x0800ef64
 8008d20:	0800ea74 	.word	0x0800ea74
 8008d24:	0800ef7c 	.word	0x0800ef7c
 8008d28:	2000689c 	.word	0x2000689c
 8008d2c:	0800efa4 	.word	0x0800efa4
 8008d30:	2300      	movs	r3, #0
 8008d32:	442b      	add	r3, r5
 8008d34:	4423      	add	r3, r4
 8008d36:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	da02      	bge.n	8008d4a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	891b      	ldrh	r3, [r3, #8]
 8008d4e:	461c      	mov	r4, r3
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	899b      	ldrh	r3, [r3, #12]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7f9 ffb8 	bl	8002cce <lwip_htons>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <tcp_output+0x2e6>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e000      	b.n	8008d70 <tcp_output+0x2e8>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	4423      	add	r3, r4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d049      	beq.n	8008e0a <tcp_output+0x382>
      seg->next = NULL;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d105      	bne.n	8008d90 <tcp_output+0x308>
        pcb->unacked = seg;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d88:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	623b      	str	r3, [r7, #32]
 8008d8e:	e03f      	b.n	8008e10 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7f9 ffae 	bl	8002cf8 <lwip_htonl>
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7f9 ffa7 	bl	8002cf8 <lwip_htonl>
 8008daa:	4603      	mov	r3, r0
 8008dac:	1ae3      	subs	r3, r4, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	da24      	bge.n	8008dfc <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3370      	adds	r3, #112	; 0x70
 8008db6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008db8:	e002      	b.n	8008dc0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d011      	beq.n	8008dec <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7f9 ff91 	bl	8002cf8 <lwip_htonl>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7f9 ff8a 	bl	8002cf8 <lwip_htonl>
 8008de4:	4603      	mov	r3, r0
 8008de6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	dbe6      	blt.n	8008dba <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e009      	b.n	8008e10 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e00:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	623b      	str	r3, [r7, #32]
 8008e08:	e002      	b.n	8008e10 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8008e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e0c:	f7fc fc42 	bl	8005694 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d012      	beq.n	8008e42 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f9 ff68 	bl	8002cf8 <lwip_htonl>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e32:	8912      	ldrh	r2, [r2, #8]
 8008e34:	4413      	add	r3, r2
  while (seg != NULL &&
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	f4bf aeda 	bcs.w	8008bf2 <tcp_output+0x16a>
 8008e3e:	e000      	b.n	8008e42 <tcp_output+0x3ba>
      break;
 8008e40:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d108      	bne.n	8008e5c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008e52:	e004      	b.n	8008e5e <tcp_output+0x3d6>
    goto output_done;
 8008e54:	bf00      	nop
 8008e56:	e002      	b.n	8008e5e <tcp_output+0x3d6>
    goto output_done;
 8008e58:	bf00      	nop
 8008e5a:	e000      	b.n	8008e5e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8008e5c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	8b5b      	ldrh	r3, [r3, #26]
 8008e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3728      	adds	r7, #40	; 0x28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bdb0      	pop	{r4, r5, r7, pc}
 8008e76:	bf00      	nop

08008e78 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <tcp_output_segment_busy+0x1c>
 8008e86:	4b09      	ldr	r3, [pc, #36]	; (8008eac <tcp_output_segment_busy+0x34>)
 8008e88:	f240 529a 	movw	r2, #1434	; 0x59a
 8008e8c:	4908      	ldr	r1, [pc, #32]	; (8008eb0 <tcp_output_segment_busy+0x38>)
 8008e8e:	4809      	ldr	r0, [pc, #36]	; (8008eb4 <tcp_output_segment_busy+0x3c>)
 8008e90:	f003 fb40 	bl	800c514 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	7b9b      	ldrb	r3, [r3, #14]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d001      	beq.n	8008ea2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	0800ea20 	.word	0x0800ea20
 8008eb0:	0800efbc 	.word	0x0800efbc
 8008eb4:	0800ea74 	.word	0x0800ea74

08008eb8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8008eb8:	b5b0      	push	{r4, r5, r7, lr}
 8008eba:	b08c      	sub	sp, #48	; 0x30
 8008ebc:	af04      	add	r7, sp, #16
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d106      	bne.n	8008ed8 <tcp_output_segment+0x20>
 8008eca:	4b64      	ldr	r3, [pc, #400]	; (800905c <tcp_output_segment+0x1a4>)
 8008ecc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8008ed0:	4963      	ldr	r1, [pc, #396]	; (8009060 <tcp_output_segment+0x1a8>)
 8008ed2:	4864      	ldr	r0, [pc, #400]	; (8009064 <tcp_output_segment+0x1ac>)
 8008ed4:	f003 fb1e 	bl	800c514 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d106      	bne.n	8008eec <tcp_output_segment+0x34>
 8008ede:	4b5f      	ldr	r3, [pc, #380]	; (800905c <tcp_output_segment+0x1a4>)
 8008ee0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008ee4:	4960      	ldr	r1, [pc, #384]	; (8009068 <tcp_output_segment+0x1b0>)
 8008ee6:	485f      	ldr	r0, [pc, #380]	; (8009064 <tcp_output_segment+0x1ac>)
 8008ee8:	f003 fb14 	bl	800c514 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <tcp_output_segment+0x48>
 8008ef2:	4b5a      	ldr	r3, [pc, #360]	; (800905c <tcp_output_segment+0x1a4>)
 8008ef4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8008ef8:	495c      	ldr	r1, [pc, #368]	; (800906c <tcp_output_segment+0x1b4>)
 8008efa:	485a      	ldr	r0, [pc, #360]	; (8009064 <tcp_output_segment+0x1ac>)
 8008efc:	f003 fb0a 	bl	800c514 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f7ff ffb9 	bl	8008e78 <tcp_output_segment_busy>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e0a0      	b.n	8009052 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68dc      	ldr	r4, [r3, #12]
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f7f9 feed 	bl	8002cf8 <lwip_htonl>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	68dc      	ldr	r4, [r3, #12]
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7f9 fecf 	bl	8002cce <lwip_htons>
 8008f30:	4603      	mov	r3, r0
 8008f32:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008f3c:	441a      	add	r2, r3
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	3314      	adds	r3, #20
 8008f48:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	7a9b      	ldrb	r3, [r3, #10]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d015      	beq.n	8008f82 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8008f62:	f7fc fe8d 	bl	8005c80 <tcp_eff_send_mss_netif>
 8008f66:	4603      	mov	r3, r0
 8008f68:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008f6a:	8b7b      	ldrh	r3, [r7, #26]
 8008f6c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f9 fec1 	bl	8002cf8 <lwip_htonl>
 8008f76:	4602      	mov	r2, r0
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	da02      	bge.n	8008f92 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10c      	bne.n	8008fb4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8008f9a:	4b35      	ldr	r3, [pc, #212]	; (8009070 <tcp_output_segment+0x1b8>)
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7f9 fea5 	bl	8002cf8 <lwip_htonl>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	8959      	ldrh	r1, [r3, #10]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	8b3a      	ldrh	r2, [r7, #24]
 8008fd0:	1a8a      	subs	r2, r1, r2
 8008fd2:	b292      	uxth	r2, r2
 8008fd4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	8919      	ldrh	r1, [r3, #8]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	8b3a      	ldrh	r2, [r7, #24]
 8008fe2:	1a8a      	subs	r2, r1, r2
 8008fe4:	b292      	uxth	r2, r2
 8008fe6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	68d2      	ldr	r2, [r2, #12]
 8008ff0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	741a      	strb	r2, [r3, #16]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f103 0214 	add.w	r2, r3, #20
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	7a9b      	ldrb	r3, [r3, #10]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	4413      	add	r3, r2
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	429a      	cmp	r2, r3
 8009016:	d006      	beq.n	8009026 <tcp_output_segment+0x16e>
 8009018:	4b10      	ldr	r3, [pc, #64]	; (800905c <tcp_output_segment+0x1a4>)
 800901a:	f240 621c 	movw	r2, #1564	; 0x61c
 800901e:	4915      	ldr	r1, [pc, #84]	; (8009074 <tcp_output_segment+0x1bc>)
 8009020:	4810      	ldr	r0, [pc, #64]	; (8009064 <tcp_output_segment+0x1ac>)
 8009022:	f003 fa77 	bl	800c514 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6858      	ldr	r0, [r3, #4]
 800902a:	68b9      	ldr	r1, [r7, #8]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	1d1c      	adds	r4, r3, #4
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	7add      	ldrb	r5, [r3, #11]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	7a9b      	ldrb	r3, [r3, #10]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	9202      	str	r2, [sp, #8]
 800903c:	2206      	movs	r2, #6
 800903e:	9201      	str	r2, [sp, #4]
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	462b      	mov	r3, r5
 8009044:	4622      	mov	r2, r4
 8009046:	f002 f9fb 	bl	800b440 <ip4_output_if>
 800904a:	4603      	mov	r3, r0
 800904c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800904e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3720      	adds	r7, #32
 8009056:	46bd      	mov	sp, r7
 8009058:	bdb0      	pop	{r4, r5, r7, pc}
 800905a:	bf00      	nop
 800905c:	0800ea20 	.word	0x0800ea20
 8009060:	0800efe4 	.word	0x0800efe4
 8009064:	0800ea74 	.word	0x0800ea74
 8009068:	0800f004 	.word	0x0800f004
 800906c:	0800f024 	.word	0x0800f024
 8009070:	2000688c 	.word	0x2000688c
 8009074:	0800f048 	.word	0x0800f048

08009078 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009078:	b5b0      	push	{r4, r5, r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <tcp_rexmit_rto_prepare+0x1c>
 8009086:	4b31      	ldr	r3, [pc, #196]	; (800914c <tcp_rexmit_rto_prepare+0xd4>)
 8009088:	f240 6263 	movw	r2, #1635	; 0x663
 800908c:	4930      	ldr	r1, [pc, #192]	; (8009150 <tcp_rexmit_rto_prepare+0xd8>)
 800908e:	4831      	ldr	r0, [pc, #196]	; (8009154 <tcp_rexmit_rto_prepare+0xdc>)
 8009090:	f003 fa40 	bl	800c514 <iprintf>

  if (pcb->unacked == NULL) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800909c:	f06f 0305 	mvn.w	r3, #5
 80090a0:	e050      	b.n	8009144 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	e00b      	b.n	80090c2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7ff fee4 	bl	8008e78 <tcp_output_segment_busy>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80090b6:	f06f 0305 	mvn.w	r3, #5
 80090ba:	e043      	b.n	8009144 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	60fb      	str	r3, [r7, #12]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1ef      	bne.n	80090aa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7ff fed4 	bl	8008e78 <tcp_output_segment_busy>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80090d6:	f06f 0305 	mvn.w	r3, #5
 80090da:	e033      	b.n	8009144 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	8b5b      	ldrh	r3, [r3, #26]
 80090f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	4618      	mov	r0, r3
 8009108:	f7f9 fdf6 	bl	8002cf8 <lwip_htonl>
 800910c:	4604      	mov	r4, r0
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	891b      	ldrh	r3, [r3, #8]
 8009112:	461d      	mov	r5, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	899b      	ldrh	r3, [r3, #12]
 800911a:	b29b      	uxth	r3, r3
 800911c:	4618      	mov	r0, r3
 800911e:	f7f9 fdd6 	bl	8002cce <lwip_htons>
 8009122:	4603      	mov	r3, r0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	f003 0303 	and.w	r3, r3, #3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <tcp_rexmit_rto_prepare+0xba>
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <tcp_rexmit_rto_prepare+0xbc>
 8009132:	2300      	movs	r3, #0
 8009134:	442b      	add	r3, r5
 8009136:	18e2      	adds	r2, r4, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bdb0      	pop	{r4, r5, r7, pc}
 800914c:	0800ea20 	.word	0x0800ea20
 8009150:	0800f05c 	.word	0x0800f05c
 8009154:	0800ea74 	.word	0x0800ea74

08009158 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d106      	bne.n	8009174 <tcp_rexmit_rto_commit+0x1c>
 8009166:	4b0d      	ldr	r3, [pc, #52]	; (800919c <tcp_rexmit_rto_commit+0x44>)
 8009168:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800916c:	490c      	ldr	r1, [pc, #48]	; (80091a0 <tcp_rexmit_rto_commit+0x48>)
 800916e:	480d      	ldr	r0, [pc, #52]	; (80091a4 <tcp_rexmit_rto_commit+0x4c>)
 8009170:	f003 f9d0 	bl	800c514 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800917a:	2bff      	cmp	r3, #255	; 0xff
 800917c:	d007      	beq.n	800918e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009184:	3301      	adds	r3, #1
 8009186:	b2da      	uxtb	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff fc7a 	bl	8008a88 <tcp_output>
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	0800ea20 	.word	0x0800ea20
 80091a0:	0800f080 	.word	0x0800f080
 80091a4:	0800ea74 	.word	0x0800ea74

080091a8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d106      	bne.n	80091c4 <tcp_rexmit_rto+0x1c>
 80091b6:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <tcp_rexmit_rto+0x38>)
 80091b8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80091bc:	4909      	ldr	r1, [pc, #36]	; (80091e4 <tcp_rexmit_rto+0x3c>)
 80091be:	480a      	ldr	r0, [pc, #40]	; (80091e8 <tcp_rexmit_rto+0x40>)
 80091c0:	f003 f9a8 	bl	800c514 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff ff57 	bl	8009078 <tcp_rexmit_rto_prepare>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff ffc1 	bl	8009158 <tcp_rexmit_rto_commit>
  }
}
 80091d6:	bf00      	nop
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	0800ea20 	.word	0x0800ea20
 80091e4:	0800f0a4 	.word	0x0800f0a4
 80091e8:	0800ea74 	.word	0x0800ea74

080091ec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80091ec:	b590      	push	{r4, r7, lr}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <tcp_rexmit+0x1c>
 80091fa:	4b2f      	ldr	r3, [pc, #188]	; (80092b8 <tcp_rexmit+0xcc>)
 80091fc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009200:	492e      	ldr	r1, [pc, #184]	; (80092bc <tcp_rexmit+0xd0>)
 8009202:	482f      	ldr	r0, [pc, #188]	; (80092c0 <tcp_rexmit+0xd4>)
 8009204:	f003 f986 	bl	800c514 <iprintf>

  if (pcb->unacked == NULL) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009210:	f06f 0305 	mvn.w	r3, #5
 8009214:	e04c      	b.n	80092b0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800921c:	68b8      	ldr	r0, [r7, #8]
 800921e:	f7ff fe2b 	bl	8008e78 <tcp_output_segment_busy>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009228:	f06f 0305 	mvn.w	r3, #5
 800922c:	e040      	b.n	80092b0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	336c      	adds	r3, #108	; 0x6c
 800923a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800923c:	e002      	b.n	8009244 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d011      	beq.n	8009270 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	4618      	mov	r0, r3
 8009256:	f7f9 fd4f 	bl	8002cf8 <lwip_htonl>
 800925a:	4604      	mov	r4, r0
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	4618      	mov	r0, r3
 8009264:	f7f9 fd48 	bl	8002cf8 <lwip_htonl>
 8009268:	4603      	mov	r3, r0
 800926a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800926c:	2b00      	cmp	r3, #0
 800926e:	dbe6      	blt.n	800923e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d103      	bne.n	800928e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009294:	2bff      	cmp	r3, #255	; 0xff
 8009296:	d007      	beq.n	80092a8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800929e:	3301      	adds	r3, #1
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd90      	pop	{r4, r7, pc}
 80092b8:	0800ea20 	.word	0x0800ea20
 80092bc:	0800f0c0 	.word	0x0800f0c0
 80092c0:	0800ea74 	.word	0x0800ea74

080092c4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d106      	bne.n	80092e0 <tcp_rexmit_fast+0x1c>
 80092d2:	4b2e      	ldr	r3, [pc, #184]	; (800938c <tcp_rexmit_fast+0xc8>)
 80092d4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80092d8:	492d      	ldr	r1, [pc, #180]	; (8009390 <tcp_rexmit_fast+0xcc>)
 80092da:	482e      	ldr	r0, [pc, #184]	; (8009394 <tcp_rexmit_fast+0xd0>)
 80092dc:	f003 f91a 	bl	800c514 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d04d      	beq.n	8009384 <tcp_rexmit_fast+0xc0>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	8b5b      	ldrh	r3, [r3, #26]
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d147      	bne.n	8009384 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff ff79 	bl	80091ec <tcp_rexmit>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d141      	bne.n	8009384 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800930c:	429a      	cmp	r2, r3
 800930e:	d207      	bcs.n	8009320 <tcp_rexmit_fast+0x5c>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009316:	0fda      	lsrs	r2, r3, #31
 8009318:	4413      	add	r3, r2
 800931a:	105b      	asrs	r3, r3, #1
 800931c:	b29b      	uxth	r3, r3
 800931e:	e006      	b.n	800932e <tcp_rexmit_fast+0x6a>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009326:	0fda      	lsrs	r2, r3, #31
 8009328:	4413      	add	r3, r2
 800932a:	105b      	asrs	r3, r3, #1
 800932c:	b29b      	uxth	r3, r3
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800933a:	461a      	mov	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	429a      	cmp	r2, r3
 8009344:	d206      	bcs.n	8009354 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800935e:	4619      	mov	r1, r3
 8009360:	0049      	lsls	r1, r1, #1
 8009362:	440b      	add	r3, r1
 8009364:	b29b      	uxth	r3, r3
 8009366:	4413      	add	r3, r2
 8009368:	b29a      	uxth	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	8b5b      	ldrh	r3, [r3, #26]
 8009374:	f043 0304 	orr.w	r3, r3, #4
 8009378:	b29a      	uxth	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	0800ea20 	.word	0x0800ea20
 8009390:	0800f0d8 	.word	0x0800f0d8
 8009394:	0800ea74 	.word	0x0800ea74

08009398 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	607b      	str	r3, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	817b      	strh	r3, [r7, #10]
 80093a6:	4613      	mov	r3, r2
 80093a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80093aa:	897a      	ldrh	r2, [r7, #10]
 80093ac:	893b      	ldrh	r3, [r7, #8]
 80093ae:	4413      	add	r3, r2
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	3314      	adds	r3, #20
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80093ba:	4619      	mov	r1, r3
 80093bc:	2022      	movs	r0, #34	; 0x22
 80093be:	f7fa fc21 	bl	8003c04 <pbuf_alloc>
 80093c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d04e      	beq.n	8009468 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	895b      	ldrh	r3, [r3, #10]
 80093ce:	461a      	mov	r2, r3
 80093d0:	897b      	ldrh	r3, [r7, #10]
 80093d2:	3314      	adds	r3, #20
 80093d4:	429a      	cmp	r2, r3
 80093d6:	da06      	bge.n	80093e6 <tcp_output_alloc_header_common+0x4e>
 80093d8:	4b26      	ldr	r3, [pc, #152]	; (8009474 <tcp_output_alloc_header_common+0xdc>)
 80093da:	f240 7224 	movw	r2, #1828	; 0x724
 80093de:	4926      	ldr	r1, [pc, #152]	; (8009478 <tcp_output_alloc_header_common+0xe0>)
 80093e0:	4826      	ldr	r0, [pc, #152]	; (800947c <tcp_output_alloc_header_common+0xe4>)
 80093e2:	f003 f897 	bl	800c514 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80093ec:	8c3b      	ldrh	r3, [r7, #32]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7f9 fc6d 	bl	8002cce <lwip_htons>
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80093fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093fe:	4618      	mov	r0, r3
 8009400:	f7f9 fc65 	bl	8002cce <lwip_htons>
 8009404:	4603      	mov	r3, r0
 8009406:	461a      	mov	r2, r3
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f7f9 fc70 	bl	8002cf8 <lwip_htonl>
 8009418:	4602      	mov	r2, r0
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800941e:	897b      	ldrh	r3, [r7, #10]
 8009420:	089b      	lsrs	r3, r3, #2
 8009422:	b29b      	uxth	r3, r3
 8009424:	3305      	adds	r3, #5
 8009426:	b29b      	uxth	r3, r3
 8009428:	031b      	lsls	r3, r3, #12
 800942a:	b29a      	uxth	r2, r3
 800942c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009430:	b29b      	uxth	r3, r3
 8009432:	4313      	orrs	r3, r2
 8009434:	b29b      	uxth	r3, r3
 8009436:	4618      	mov	r0, r3
 8009438:	f7f9 fc49 	bl	8002cce <lwip_htons>
 800943c:	4603      	mov	r3, r0
 800943e:	461a      	mov	r2, r3
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8009444:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009446:	4618      	mov	r0, r3
 8009448:	f7f9 fc41 	bl	8002cce <lwip_htons>
 800944c:	4603      	mov	r3, r0
 800944e:	461a      	mov	r2, r3
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2200      	movs	r2, #0
 8009458:	741a      	strb	r2, [r3, #16]
 800945a:	2200      	movs	r2, #0
 800945c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2200      	movs	r2, #0
 8009462:	749a      	strb	r2, [r3, #18]
 8009464:	2200      	movs	r2, #0
 8009466:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8009468:	697b      	ldr	r3, [r7, #20]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3718      	adds	r7, #24
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	0800ea20 	.word	0x0800ea20
 8009478:	0800f0f8 	.word	0x0800f0f8
 800947c:	0800ea74 	.word	0x0800ea74

08009480 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8009480:	b5b0      	push	{r4, r5, r7, lr}
 8009482:	b08a      	sub	sp, #40	; 0x28
 8009484:	af04      	add	r7, sp, #16
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	607b      	str	r3, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	817b      	strh	r3, [r7, #10]
 800948e:	4613      	mov	r3, r2
 8009490:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <tcp_output_alloc_header+0x26>
 8009498:	4b15      	ldr	r3, [pc, #84]	; (80094f0 <tcp_output_alloc_header+0x70>)
 800949a:	f240 7242 	movw	r2, #1858	; 0x742
 800949e:	4915      	ldr	r1, [pc, #84]	; (80094f4 <tcp_output_alloc_header+0x74>)
 80094a0:	4815      	ldr	r0, [pc, #84]	; (80094f8 <tcp_output_alloc_header+0x78>)
 80094a2:	f003 f837 	bl	800c514 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	8adb      	ldrh	r3, [r3, #22]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	8b12      	ldrh	r2, [r2, #24]
 80094b2:	68f9      	ldr	r1, [r7, #12]
 80094b4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80094b6:	893d      	ldrh	r5, [r7, #8]
 80094b8:	897c      	ldrh	r4, [r7, #10]
 80094ba:	9103      	str	r1, [sp, #12]
 80094bc:	2110      	movs	r1, #16
 80094be:	9102      	str	r1, [sp, #8]
 80094c0:	9201      	str	r2, [sp, #4]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	462a      	mov	r2, r5
 80094c8:	4621      	mov	r1, r4
 80094ca:	f7ff ff65 	bl	8009398 <tcp_output_alloc_header_common>
 80094ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d006      	beq.n	80094e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80094de:	441a      	add	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80094e4:	697b      	ldr	r3, [r7, #20]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bdb0      	pop	{r4, r5, r7, pc}
 80094ee:	bf00      	nop
 80094f0:	0800ea20 	.word	0x0800ea20
 80094f4:	0800f128 	.word	0x0800f128
 80094f8:	0800ea74 	.word	0x0800ea74

080094fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4611      	mov	r1, r2
 8009508:	461a      	mov	r2, r3
 800950a:	460b      	mov	r3, r1
 800950c:	71fb      	strb	r3, [r7, #7]
 800950e:	4613      	mov	r3, r2
 8009510:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d106      	bne.n	800952a <tcp_output_fill_options+0x2e>
 800951c:	4b13      	ldr	r3, [pc, #76]	; (800956c <tcp_output_fill_options+0x70>)
 800951e:	f240 7256 	movw	r2, #1878	; 0x756
 8009522:	4913      	ldr	r1, [pc, #76]	; (8009570 <tcp_output_fill_options+0x74>)
 8009524:	4813      	ldr	r0, [pc, #76]	; (8009574 <tcp_output_fill_options+0x78>)
 8009526:	f002 fff5 	bl	800c514 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	3314      	adds	r3, #20
 8009534:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f103 0214 	add.w	r2, r3, #20
 800953c:	8bfb      	ldrh	r3, [r7, #30]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4619      	mov	r1, r3
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	f003 0304 	and.w	r3, r3, #4
 800954a:	440b      	add	r3, r1
 800954c:	4413      	add	r3, r2
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	429a      	cmp	r2, r3
 8009552:	d006      	beq.n	8009562 <tcp_output_fill_options+0x66>
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <tcp_output_fill_options+0x70>)
 8009556:	f240 7275 	movw	r2, #1909	; 0x775
 800955a:	4907      	ldr	r1, [pc, #28]	; (8009578 <tcp_output_fill_options+0x7c>)
 800955c:	4805      	ldr	r0, [pc, #20]	; (8009574 <tcp_output_fill_options+0x78>)
 800955e:	f002 ffd9 	bl	800c514 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8009562:	bf00      	nop
 8009564:	3720      	adds	r7, #32
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	0800ea20 	.word	0x0800ea20
 8009570:	0800f150 	.word	0x0800f150
 8009574:	0800ea74 	.word	0x0800ea74
 8009578:	0800f048 	.word	0x0800f048

0800957c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08a      	sub	sp, #40	; 0x28
 8009580:	af04      	add	r7, sp, #16
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d106      	bne.n	800959e <tcp_output_control_segment+0x22>
 8009590:	4b1c      	ldr	r3, [pc, #112]	; (8009604 <tcp_output_control_segment+0x88>)
 8009592:	f240 7287 	movw	r2, #1927	; 0x787
 8009596:	491c      	ldr	r1, [pc, #112]	; (8009608 <tcp_output_control_segment+0x8c>)
 8009598:	481c      	ldr	r0, [pc, #112]	; (800960c <tcp_output_control_segment+0x90>)
 800959a:	f002 ffbb 	bl	800c514 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f7fe ff30 	bl	8008408 <tcp_route>
 80095a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80095b0:	23fc      	movs	r3, #252	; 0xfc
 80095b2:	75fb      	strb	r3, [r7, #23]
 80095b4:	e01c      	b.n	80095f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d006      	beq.n	80095ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	7adb      	ldrb	r3, [r3, #11]
 80095c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	7a9b      	ldrb	r3, [r3, #10]
 80095c6:	757b      	strb	r3, [r7, #21]
 80095c8:	e003      	b.n	80095d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80095ca:	23ff      	movs	r3, #255	; 0xff
 80095cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80095d2:	7dba      	ldrb	r2, [r7, #22]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	2306      	movs	r3, #6
 80095da:	9301      	str	r3, [sp, #4]
 80095dc:	7d7b      	ldrb	r3, [r7, #21]
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	4613      	mov	r3, r2
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	68b8      	ldr	r0, [r7, #8]
 80095e8:	f001 ff2a 	bl	800b440 <ip4_output_if>
 80095ec:	4603      	mov	r3, r0
 80095ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80095f0:	68b8      	ldr	r0, [r7, #8]
 80095f2:	f7fa fde7 	bl	80041c4 <pbuf_free>
  return err;
 80095f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	0800ea20 	.word	0x0800ea20
 8009608:	0800f178 	.word	0x0800f178
 800960c:	0800ea74 	.word	0x0800ea74

08009610 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8009610:	b590      	push	{r4, r7, lr}
 8009612:	b08b      	sub	sp, #44	; 0x2c
 8009614:	af04      	add	r7, sp, #16
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d106      	bne.n	8009632 <tcp_rst+0x22>
 8009624:	4b1f      	ldr	r3, [pc, #124]	; (80096a4 <tcp_rst+0x94>)
 8009626:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800962a:	491f      	ldr	r1, [pc, #124]	; (80096a8 <tcp_rst+0x98>)
 800962c:	481f      	ldr	r0, [pc, #124]	; (80096ac <tcp_rst+0x9c>)
 800962e:	f002 ff71 	bl	800c514 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <tcp_rst+0x36>
 8009638:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <tcp_rst+0x94>)
 800963a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800963e:	491c      	ldr	r1, [pc, #112]	; (80096b0 <tcp_rst+0xa0>)
 8009640:	481a      	ldr	r0, [pc, #104]	; (80096ac <tcp_rst+0x9c>)
 8009642:	f002 ff67 	bl	800c514 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009646:	2300      	movs	r3, #0
 8009648:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800964a:	f246 0308 	movw	r3, #24584	; 0x6008
 800964e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	b29c      	uxth	r4, r3
 8009654:	68b8      	ldr	r0, [r7, #8]
 8009656:	f7f9 fb4f 	bl	8002cf8 <lwip_htonl>
 800965a:	4602      	mov	r2, r0
 800965c:	8abb      	ldrh	r3, [r7, #20]
 800965e:	9303      	str	r3, [sp, #12]
 8009660:	2314      	movs	r3, #20
 8009662:	9302      	str	r3, [sp, #8]
 8009664:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	4613      	mov	r3, r2
 800966e:	2200      	movs	r2, #0
 8009670:	4621      	mov	r1, r4
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff fe90 	bl	8009398 <tcp_output_alloc_header_common>
 8009678:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00c      	beq.n	800969a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	2200      	movs	r2, #0
 8009684:	6939      	ldr	r1, [r7, #16]
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff ff38 	bl	80094fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	6939      	ldr	r1, [r7, #16]
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff ff72 	bl	800957c <tcp_output_control_segment>
 8009698:	e000      	b.n	800969c <tcp_rst+0x8c>
    return;
 800969a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800969c:	371c      	adds	r7, #28
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd90      	pop	{r4, r7, pc}
 80096a2:	bf00      	nop
 80096a4:	0800ea20 	.word	0x0800ea20
 80096a8:	0800f1a4 	.word	0x0800f1a4
 80096ac:	0800ea74 	.word	0x0800ea74
 80096b0:	0800f1c0 	.word	0x0800f1c0

080096b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80096b4:	b590      	push	{r4, r7, lr}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d106      	bne.n	80096d8 <tcp_send_empty_ack+0x24>
 80096ca:	4b28      	ldr	r3, [pc, #160]	; (800976c <tcp_send_empty_ack+0xb8>)
 80096cc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80096d0:	4927      	ldr	r1, [pc, #156]	; (8009770 <tcp_send_empty_ack+0xbc>)
 80096d2:	4828      	ldr	r0, [pc, #160]	; (8009774 <tcp_send_empty_ack+0xc0>)
 80096d4:	f002 ff1e 	bl	800c514 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 0304 	and.w	r3, r3, #4
 80096e2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80096e4:	7d7b      	ldrb	r3, [r7, #21]
 80096e6:	b29c      	uxth	r4, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7f9 fb03 	bl	8002cf8 <lwip_htonl>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2200      	movs	r2, #0
 80096f6:	4621      	mov	r1, r4
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff fec1 	bl	8009480 <tcp_output_alloc_header>
 80096fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d109      	bne.n	800971a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	8b5b      	ldrh	r3, [r3, #26]
 800970a:	f043 0303 	orr.w	r3, r3, #3
 800970e:	b29a      	uxth	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009714:	f06f 0301 	mvn.w	r3, #1
 8009718:	e023      	b.n	8009762 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800971a:	7dbb      	ldrb	r3, [r7, #22]
 800971c:	7dfa      	ldrb	r2, [r7, #23]
 800971e:	6939      	ldr	r1, [r7, #16]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff feeb 	bl	80094fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3304      	adds	r3, #4
 800972c:	6939      	ldr	r1, [r7, #16]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7ff ff24 	bl	800957c <tcp_output_control_segment>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d007      	beq.n	8009750 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8b5b      	ldrh	r3, [r3, #26]
 8009744:	f043 0303 	orr.w	r3, r3, #3
 8009748:	b29a      	uxth	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	835a      	strh	r2, [r3, #26]
 800974e:	e006      	b.n	800975e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	8b5b      	ldrh	r3, [r3, #26]
 8009754:	f023 0303 	bic.w	r3, r3, #3
 8009758:	b29a      	uxth	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800975e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009762:	4618      	mov	r0, r3
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	bd90      	pop	{r4, r7, pc}
 800976a:	bf00      	nop
 800976c:	0800ea20 	.word	0x0800ea20
 8009770:	0800f1dc 	.word	0x0800f1dc
 8009774:	0800ea74 	.word	0x0800ea74

08009778 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009778:	b590      	push	{r4, r7, lr}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009780:	2300      	movs	r3, #0
 8009782:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d106      	bne.n	8009798 <tcp_keepalive+0x20>
 800978a:	4b18      	ldr	r3, [pc, #96]	; (80097ec <tcp_keepalive+0x74>)
 800978c:	f640 0224 	movw	r2, #2084	; 0x824
 8009790:	4917      	ldr	r1, [pc, #92]	; (80097f0 <tcp_keepalive+0x78>)
 8009792:	4818      	ldr	r0, [pc, #96]	; (80097f4 <tcp_keepalive+0x7c>)
 8009794:	f002 febe 	bl	800c514 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	b29c      	uxth	r4, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a0:	3b01      	subs	r3, #1
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7f9 faa8 	bl	8002cf8 <lwip_htonl>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2200      	movs	r2, #0
 80097ac:	4621      	mov	r1, r4
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff fe66 	bl	8009480 <tcp_output_alloc_header>
 80097b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d102      	bne.n	80097c2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80097bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097c0:	e010      	b.n	80097e4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	2200      	movs	r2, #0
 80097c6:	6939      	ldr	r1, [r7, #16]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff fe97 	bl	80094fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	6939      	ldr	r1, [r7, #16]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff fed0 	bl	800957c <tcp_output_control_segment>
 80097dc:	4603      	mov	r3, r0
 80097de:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80097e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd90      	pop	{r4, r7, pc}
 80097ec:	0800ea20 	.word	0x0800ea20
 80097f0:	0800f1fc 	.word	0x0800f1fc
 80097f4:	0800ea74 	.word	0x0800ea74

080097f8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b08b      	sub	sp, #44	; 0x2c
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009800:	2300      	movs	r3, #0
 8009802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d106      	bne.n	800981a <tcp_zero_window_probe+0x22>
 800980c:	4b4c      	ldr	r3, [pc, #304]	; (8009940 <tcp_zero_window_probe+0x148>)
 800980e:	f640 024f 	movw	r2, #2127	; 0x84f
 8009812:	494c      	ldr	r1, [pc, #304]	; (8009944 <tcp_zero_window_probe+0x14c>)
 8009814:	484c      	ldr	r0, [pc, #304]	; (8009948 <tcp_zero_window_probe+0x150>)
 8009816:	f002 fe7d 	bl	800c514 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800981e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	e086      	b.n	8009938 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009830:	2bff      	cmp	r3, #255	; 0xff
 8009832:	d007      	beq.n	8009844 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800983a:	3301      	adds	r3, #1
 800983c:	b2da      	uxtb	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	899b      	ldrh	r3, [r3, #12]
 800984a:	b29b      	uxth	r3, r3
 800984c:	4618      	mov	r0, r3
 800984e:	f7f9 fa3e 	bl	8002cce <lwip_htons>
 8009852:	4603      	mov	r3, r0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <tcp_zero_window_probe+0x72>
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	891b      	ldrh	r3, [r3, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <tcp_zero_window_probe+0x72>
 8009866:	2301      	movs	r3, #1
 8009868:	e000      	b.n	800986c <tcp_zero_window_probe+0x74>
 800986a:	2300      	movs	r3, #0
 800986c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800986e:	7ffb      	ldrb	r3, [r7, #31]
 8009870:	2b00      	cmp	r3, #0
 8009872:	bf0c      	ite	eq
 8009874:	2301      	moveq	r3, #1
 8009876:	2300      	movne	r3, #0
 8009878:	b2db      	uxtb	r3, r3
 800987a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800987c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009880:	b299      	uxth	r1, r3
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	8bba      	ldrh	r2, [r7, #28]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7ff fdf8 	bl	8009480 <tcp_output_alloc_header>
 8009890:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8009898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800989c:	e04c      	b.n	8009938 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80098a4:	7ffb      	ldrb	r3, [r7, #31]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d011      	beq.n	80098ce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	899b      	ldrh	r3, [r3, #12]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	b21b      	sxth	r3, r3
 80098b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098b6:	b21c      	sxth	r4, r3
 80098b8:	2011      	movs	r0, #17
 80098ba:	f7f9 fa08 	bl	8002cce <lwip_htons>
 80098be:	4603      	mov	r3, r0
 80098c0:	b21b      	sxth	r3, r3
 80098c2:	4323      	orrs	r3, r4
 80098c4:	b21b      	sxth	r3, r3
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	819a      	strh	r2, [r3, #12]
 80098cc:	e010      	b.n	80098f0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	3314      	adds	r3, #20
 80098d4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	6858      	ldr	r0, [r3, #4]
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	891a      	ldrh	r2, [r3, #8]
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	891b      	ldrh	r3, [r3, #8]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	2201      	movs	r2, #1
 80098ea:	6939      	ldr	r1, [r7, #16]
 80098ec:	f7fa fe54 	bl	8004598 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7f9 f9fe 	bl	8002cf8 <lwip_htonl>
 80098fc:	4603      	mov	r3, r0
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	da02      	bge.n	8009914 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009918:	2200      	movs	r2, #0
 800991a:	69b9      	ldr	r1, [r7, #24]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff fded 	bl	80094fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	69b9      	ldr	r1, [r7, #24]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff fe26 	bl	800957c <tcp_output_control_segment>
 8009930:	4603      	mov	r3, r0
 8009932:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009934:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009938:	4618      	mov	r0, r3
 800993a:	372c      	adds	r7, #44	; 0x2c
 800993c:	46bd      	mov	sp, r7
 800993e:	bd90      	pop	{r4, r7, pc}
 8009940:	0800ea20 	.word	0x0800ea20
 8009944:	0800f218 	.word	0x0800f218
 8009948:	0800ea74 	.word	0x0800ea74

0800994c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009954:	f7fa ff0e 	bl	8004774 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009958:	4b0a      	ldr	r3, [pc, #40]	; (8009984 <tcpip_tcp_timer+0x38>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d103      	bne.n	8009968 <tcpip_tcp_timer+0x1c>
 8009960:	4b09      	ldr	r3, [pc, #36]	; (8009988 <tcpip_tcp_timer+0x3c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009968:	2200      	movs	r2, #0
 800996a:	4908      	ldr	r1, [pc, #32]	; (800998c <tcpip_tcp_timer+0x40>)
 800996c:	20fa      	movs	r0, #250	; 0xfa
 800996e:	f000 f8f1 	bl	8009b54 <sys_timeout>
 8009972:	e002      	b.n	800997a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009974:	4b06      	ldr	r3, [pc, #24]	; (8009990 <tcpip_tcp_timer+0x44>)
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]
  }
}
 800997a:	bf00      	nop
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20006888 	.word	0x20006888
 8009988:	20006898 	.word	0x20006898
 800998c:	0800994d 	.word	0x0800994d
 8009990:	20000108 	.word	0x20000108

08009994 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009998:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <tcp_timer_needed+0x30>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10f      	bne.n	80099c0 <tcp_timer_needed+0x2c>
 80099a0:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <tcp_timer_needed+0x34>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d103      	bne.n	80099b0 <tcp_timer_needed+0x1c>
 80099a8:	4b08      	ldr	r3, [pc, #32]	; (80099cc <tcp_timer_needed+0x38>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d007      	beq.n	80099c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80099b0:	4b04      	ldr	r3, [pc, #16]	; (80099c4 <tcp_timer_needed+0x30>)
 80099b2:	2201      	movs	r2, #1
 80099b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80099b6:	2200      	movs	r2, #0
 80099b8:	4905      	ldr	r1, [pc, #20]	; (80099d0 <tcp_timer_needed+0x3c>)
 80099ba:	20fa      	movs	r0, #250	; 0xfa
 80099bc:	f000 f8ca 	bl	8009b54 <sys_timeout>
  }
}
 80099c0:	bf00      	nop
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000108 	.word	0x20000108
 80099c8:	20006888 	.word	0x20006888
 80099cc:	20006898 	.word	0x20006898
 80099d0:	0800994d 	.word	0x0800994d

080099d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80099e0:	2006      	movs	r0, #6
 80099e2:	f7f9 fdc9 	bl	8003578 <memp_malloc>
 80099e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d109      	bne.n	8009a02 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d151      	bne.n	8009a98 <sys_timeout_abs+0xc4>
 80099f4:	4b2a      	ldr	r3, [pc, #168]	; (8009aa0 <sys_timeout_abs+0xcc>)
 80099f6:	22be      	movs	r2, #190	; 0xbe
 80099f8:	492a      	ldr	r1, [pc, #168]	; (8009aa4 <sys_timeout_abs+0xd0>)
 80099fa:	482b      	ldr	r0, [pc, #172]	; (8009aa8 <sys_timeout_abs+0xd4>)
 80099fc:	f002 fd8a 	bl	800c514 <iprintf>
    return;
 8009a00:	e04a      	b.n	8009a98 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8009a1a:	4b24      	ldr	r3, [pc, #144]	; (8009aac <sys_timeout_abs+0xd8>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d103      	bne.n	8009a2a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8009a22:	4a22      	ldr	r2, [pc, #136]	; (8009aac <sys_timeout_abs+0xd8>)
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	6013      	str	r3, [r2, #0]
    return;
 8009a28:	e037      	b.n	8009a9a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	4b1f      	ldr	r3, [pc, #124]	; (8009aac <sys_timeout_abs+0xd8>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	0fdb      	lsrs	r3, r3, #31
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d007      	beq.n	8009a52 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8009a42:	4b1a      	ldr	r3, [pc, #104]	; (8009aac <sys_timeout_abs+0xd8>)
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8009a4a:	4a18      	ldr	r2, [pc, #96]	; (8009aac <sys_timeout_abs+0xd8>)
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	e023      	b.n	8009a9a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8009a52:	4b16      	ldr	r3, [pc, #88]	; (8009aac <sys_timeout_abs+0xd8>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	e01a      	b.n	8009a90 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00b      	beq.n	8009a7a <sys_timeout_abs+0xa6>
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	0fdb      	lsrs	r3, r3, #31
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d007      	beq.n	8009a8a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	601a      	str	r2, [r3, #0]
        break;
 8009a88:	e007      	b.n	8009a9a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e1      	bne.n	8009a5a <sys_timeout_abs+0x86>
 8009a96:	e000      	b.n	8009a9a <sys_timeout_abs+0xc6>
    return;
 8009a98:	bf00      	nop
      }
    }
  }
}
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	0800f23c 	.word	0x0800f23c
 8009aa4:	0800f270 	.word	0x0800f270
 8009aa8:	0800f2b0 	.word	0x0800f2b0
 8009aac:	20000100 	.word	0x20000100

08009ab0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	4798      	blx	r3

  now = sys_now();
 8009ac2:	f7f9 f8fd 	bl	8002cc0 <sys_now>
 8009ac6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	4b0f      	ldr	r3, [pc, #60]	; (8009b0c <lwip_cyclic_timer+0x5c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	0fdb      	lsrs	r3, r3, #31
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d009      	beq.n	8009afa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	4413      	add	r3, r2
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	4907      	ldr	r1, [pc, #28]	; (8009b10 <lwip_cyclic_timer+0x60>)
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff ff6e 	bl	80099d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8009af8:	e004      	b.n	8009b04 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4904      	ldr	r1, [pc, #16]	; (8009b10 <lwip_cyclic_timer+0x60>)
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7ff ff68 	bl	80099d4 <sys_timeout_abs>
}
 8009b04:	bf00      	nop
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20000104 	.word	0x20000104
 8009b10:	08009ab1 	.word	0x08009ab1

08009b14 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	607b      	str	r3, [r7, #4]
 8009b1e:	e00e      	b.n	8009b3e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8009b20:	4a0a      	ldr	r2, [pc, #40]	; (8009b4c <sys_timeouts_init+0x38>)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	4a07      	ldr	r2, [pc, #28]	; (8009b4c <sys_timeouts_init+0x38>)
 8009b2e:	4413      	add	r3, r2
 8009b30:	461a      	mov	r2, r3
 8009b32:	4907      	ldr	r1, [pc, #28]	; (8009b50 <sys_timeouts_init+0x3c>)
 8009b34:	f000 f80e 	bl	8009b54 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	607b      	str	r3, [r7, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d9ed      	bls.n	8009b20 <sys_timeouts_init+0xc>
  }
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	0800fe14 	.word	0x0800fe14
 8009b50:	08009ab1 	.word	0x08009ab1

08009b54 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b66:	d306      	bcc.n	8009b76 <sys_timeout+0x22>
 8009b68:	4b0a      	ldr	r3, [pc, #40]	; (8009b94 <sys_timeout+0x40>)
 8009b6a:	f240 1229 	movw	r2, #297	; 0x129
 8009b6e:	490a      	ldr	r1, [pc, #40]	; (8009b98 <sys_timeout+0x44>)
 8009b70:	480a      	ldr	r0, [pc, #40]	; (8009b9c <sys_timeout+0x48>)
 8009b72:	f002 fccf 	bl	800c514 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8009b76:	f7f9 f8a3 	bl	8002cc0 <sys_now>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	6978      	ldr	r0, [r7, #20]
 8009b88:	f7ff ff24 	bl	80099d4 <sys_timeout_abs>
#endif
}
 8009b8c:	bf00      	nop
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	0800f23c 	.word	0x0800f23c
 8009b98:	0800f2d8 	.word	0x0800f2d8
 8009b9c:	0800f2b0 	.word	0x0800f2b0

08009ba0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009ba4:	f002 fcce 	bl	800c544 <rand>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	4b01      	ldr	r3, [pc, #4]	; (8009bc0 <udp_init+0x20>)
 8009bba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009bbc:	bf00      	nop
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20000010 	.word	0x20000010

08009bc4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d105      	bne.n	8009be4 <udp_input_local_match+0x20>
 8009bd8:	4b27      	ldr	r3, [pc, #156]	; (8009c78 <udp_input_local_match+0xb4>)
 8009bda:	2287      	movs	r2, #135	; 0x87
 8009bdc:	4927      	ldr	r1, [pc, #156]	; (8009c7c <udp_input_local_match+0xb8>)
 8009bde:	4828      	ldr	r0, [pc, #160]	; (8009c80 <udp_input_local_match+0xbc>)
 8009be0:	f002 fc98 	bl	800c514 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d105      	bne.n	8009bf6 <udp_input_local_match+0x32>
 8009bea:	4b23      	ldr	r3, [pc, #140]	; (8009c78 <udp_input_local_match+0xb4>)
 8009bec:	2288      	movs	r2, #136	; 0x88
 8009bee:	4925      	ldr	r1, [pc, #148]	; (8009c84 <udp_input_local_match+0xc0>)
 8009bf0:	4823      	ldr	r0, [pc, #140]	; (8009c80 <udp_input_local_match+0xbc>)
 8009bf2:	f002 fc8f 	bl	800c514 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	7a1b      	ldrb	r3, [r3, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	7a1a      	ldrb	r2, [r3, #8]
 8009c02:	4b21      	ldr	r3, [pc, #132]	; (8009c88 <udp_input_local_match+0xc4>)
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d001      	beq.n	8009c16 <udp_input_local_match+0x52>
    return 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	e02b      	b.n	8009c6e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d018      	beq.n	8009c4e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d013      	beq.n	8009c4a <udp_input_local_match+0x86>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00f      	beq.n	8009c4a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009c2a:	4b17      	ldr	r3, [pc, #92]	; (8009c88 <udp_input_local_match+0xc4>)
 8009c2c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c32:	d00a      	beq.n	8009c4a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	4b13      	ldr	r3, [pc, #76]	; (8009c88 <udp_input_local_match+0xc4>)
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	405a      	eors	r2, r3
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	3308      	adds	r3, #8
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d110      	bne.n	8009c6c <udp_input_local_match+0xa8>
          return 1;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e00f      	b.n	8009c6e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d009      	beq.n	8009c68 <udp_input_local_match+0xa4>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <udp_input_local_match+0xa4>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <udp_input_local_match+0xc4>)
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d101      	bne.n	8009c6c <udp_input_local_match+0xa8>
        return 1;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e000      	b.n	8009c6e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	0800f324 	.word	0x0800f324
 8009c7c:	0800f354 	.word	0x0800f354
 8009c80:	0800f378 	.word	0x0800f378
 8009c84:	0800f3a0 	.word	0x0800f3a0
 8009c88:	20003344 	.word	0x20003344

08009c8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8009c8c:	b590      	push	{r4, r7, lr}
 8009c8e:	b08d      	sub	sp, #52	; 0x34
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d105      	bne.n	8009cac <udp_input+0x20>
 8009ca0:	4b7c      	ldr	r3, [pc, #496]	; (8009e94 <udp_input+0x208>)
 8009ca2:	22cf      	movs	r2, #207	; 0xcf
 8009ca4:	497c      	ldr	r1, [pc, #496]	; (8009e98 <udp_input+0x20c>)
 8009ca6:	487d      	ldr	r0, [pc, #500]	; (8009e9c <udp_input+0x210>)
 8009ca8:	f002 fc34 	bl	800c514 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d105      	bne.n	8009cbe <udp_input+0x32>
 8009cb2:	4b78      	ldr	r3, [pc, #480]	; (8009e94 <udp_input+0x208>)
 8009cb4:	22d0      	movs	r2, #208	; 0xd0
 8009cb6:	497a      	ldr	r1, [pc, #488]	; (8009ea0 <udp_input+0x214>)
 8009cb8:	4878      	ldr	r0, [pc, #480]	; (8009e9c <udp_input+0x210>)
 8009cba:	f002 fc2b 	bl	800c514 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	895b      	ldrh	r3, [r3, #10]
 8009cc2:	2b07      	cmp	r3, #7
 8009cc4:	d803      	bhi.n	8009cce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7fa fa7c 	bl	80041c4 <pbuf_free>
    goto end;
 8009ccc:	e0de      	b.n	8009e8c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009cd4:	4b73      	ldr	r3, [pc, #460]	; (8009ea4 <udp_input+0x218>)
 8009cd6:	695a      	ldr	r2, [r3, #20]
 8009cd8:	4b72      	ldr	r3, [pc, #456]	; (8009ea4 <udp_input+0x218>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f001 fc86 	bl	800b5f0 <ip4_addr_isbroadcast_u32>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7f8 ffed 	bl	8002cce <lwip_htons>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	885b      	ldrh	r3, [r3, #2]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7f8 ffe5 	bl	8002cce <lwip_htons>
 8009d04:	4603      	mov	r3, r0
 8009d06:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8009d10:	2300      	movs	r3, #0
 8009d12:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d14:	4b64      	ldr	r3, [pc, #400]	; (8009ea8 <udp_input+0x21c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
 8009d1a:	e054      	b.n	8009dc6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	8a5b      	ldrh	r3, [r3, #18]
 8009d20:	89fa      	ldrh	r2, [r7, #14]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d14a      	bne.n	8009dbc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8009d26:	7cfb      	ldrb	r3, [r7, #19]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d2e:	f7ff ff49 	bl	8009bc4 <udp_input_local_match>
 8009d32:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d041      	beq.n	8009dbc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	7c1b      	ldrb	r3, [r3, #16]
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d11d      	bne.n	8009d80 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	61fb      	str	r3, [r7, #28]
 8009d4e:	e017      	b.n	8009d80 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8009d50:	7cfb      	ldrb	r3, [r7, #19]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d014      	beq.n	8009d80 <udp_input+0xf4>
 8009d56:	4b53      	ldr	r3, [pc, #332]	; (8009ea4 <udp_input+0x218>)
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d5e:	d10f      	bne.n	8009d80 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	3304      	adds	r3, #4
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d008      	beq.n	8009d80 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	3304      	adds	r3, #4
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d101      	bne.n	8009d80 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	8a9b      	ldrh	r3, [r3, #20]
 8009d84:	8a3a      	ldrh	r2, [r7, #16]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d118      	bne.n	8009dbc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d005      	beq.n	8009d9e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	4b43      	ldr	r3, [pc, #268]	; (8009ea4 <udp_input+0x218>)
 8009d98:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d10e      	bne.n	8009dbc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d014      	beq.n	8009dce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	68da      	ldr	r2, [r3, #12]
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8009dac:	4b3e      	ldr	r3, [pc, #248]	; (8009ea8 <udp_input+0x21c>)
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8009db4:	4a3c      	ldr	r2, [pc, #240]	; (8009ea8 <udp_input+0x21c>)
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8009dba:	e008      	b.n	8009dce <udp_input+0x142>
      }
    }

    prev = pcb;
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1a7      	bne.n	8009d1c <udp_input+0x90>
 8009dcc:	e000      	b.n	8009dd0 <udp_input+0x144>
        break;
 8009dce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <udp_input+0x14e>
    pcb = uncon_pcb;
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <udp_input+0x15a>
    for_us = 1;
 8009de0:	2301      	movs	r3, #1
 8009de2:	76fb      	strb	r3, [r7, #27]
 8009de4:	e00a      	b.n	8009dfc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	3304      	adds	r3, #4
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	4b2d      	ldr	r3, [pc, #180]	; (8009ea4 <udp_input+0x218>)
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	bf0c      	ite	eq
 8009df4:	2301      	moveq	r3, #1
 8009df6:	2300      	movne	r3, #0
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8009dfc:	7efb      	ldrb	r3, [r7, #27]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d041      	beq.n	8009e86 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8009e02:	2108      	movs	r1, #8
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7fa f957 	bl	80040b8 <pbuf_remove_header>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00a      	beq.n	8009e26 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8009e10:	4b20      	ldr	r3, [pc, #128]	; (8009e94 <udp_input+0x208>)
 8009e12:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8009e16:	4925      	ldr	r1, [pc, #148]	; (8009eac <udp_input+0x220>)
 8009e18:	4820      	ldr	r0, [pc, #128]	; (8009e9c <udp_input+0x210>)
 8009e1a:	f002 fb7b 	bl	800c514 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7fa f9d0 	bl	80041c4 <pbuf_free>
      goto end;
 8009e24:	e032      	b.n	8009e8c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d012      	beq.n	8009e52 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00a      	beq.n	8009e4a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	699c      	ldr	r4, [r3, #24]
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	69d8      	ldr	r0, [r3, #28]
 8009e3c:	8a3b      	ldrh	r3, [r7, #16]
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	4b1b      	ldr	r3, [pc, #108]	; (8009eb0 <udp_input+0x224>)
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e46:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8009e48:	e021      	b.n	8009e8e <udp_input+0x202>
        pbuf_free(p);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7fa f9ba 	bl	80041c4 <pbuf_free>
        goto end;
 8009e50:	e01c      	b.n	8009e8c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009e52:	7cfb      	ldrb	r3, [r7, #19]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d112      	bne.n	8009e7e <udp_input+0x1f2>
 8009e58:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <udp_input+0x218>)
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e60:	2be0      	cmp	r3, #224	; 0xe0
 8009e62:	d00c      	beq.n	8009e7e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009e64:	4b0f      	ldr	r3, [pc, #60]	; (8009ea4 <udp_input+0x218>)
 8009e66:	899b      	ldrh	r3, [r3, #12]
 8009e68:	3308      	adds	r3, #8
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	b21b      	sxth	r3, r3
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7fa f994 	bl	800419e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009e76:	2103      	movs	r1, #3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 f89b 	bl	800afb4 <icmp_dest_unreach>
      pbuf_free(p);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7fa f9a0 	bl	80041c4 <pbuf_free>
  return;
 8009e84:	e003      	b.n	8009e8e <udp_input+0x202>
    pbuf_free(p);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7fa f99c 	bl	80041c4 <pbuf_free>
  return;
 8009e8c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009e8e:	372c      	adds	r7, #44	; 0x2c
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd90      	pop	{r4, r7, pc}
 8009e94:	0800f324 	.word	0x0800f324
 8009e98:	0800f3c8 	.word	0x0800f3c8
 8009e9c:	0800f378 	.word	0x0800f378
 8009ea0:	0800f3e0 	.word	0x0800f3e0
 8009ea4:	20003344 	.word	0x20003344
 8009ea8:	200068a0 	.word	0x200068a0
 8009eac:	0800f3fc 	.word	0x0800f3fc
 8009eb0:	20003354 	.word	0x20003354

08009eb4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01e      	beq.n	8009f02 <udp_netif_ip_addr_changed+0x4e>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01a      	beq.n	8009f02 <udp_netif_ip_addr_changed+0x4e>
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d017      	beq.n	8009f02 <udp_netif_ip_addr_changed+0x4e>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d013      	beq.n	8009f02 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009eda:	4b0d      	ldr	r3, [pc, #52]	; (8009f10 <udp_netif_ip_addr_changed+0x5c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e00c      	b.n	8009efc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d103      	bne.n	8009ef6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1ef      	bne.n	8009ee2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8009f02:	bf00      	nop
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	200068a0 	.word	0x200068a0

08009f14 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009f1c:	4915      	ldr	r1, [pc, #84]	; (8009f74 <etharp_free_entry+0x60>)
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	4613      	mov	r3, r2
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	4413      	add	r3, r2
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	440b      	add	r3, r1
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d013      	beq.n	8009f58 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009f30:	4910      	ldr	r1, [pc, #64]	; (8009f74 <etharp_free_entry+0x60>)
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	4613      	mov	r3, r2
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	4413      	add	r3, r2
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	440b      	add	r3, r1
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fa f93f 	bl	80041c4 <pbuf_free>
    arp_table[i].q = NULL;
 8009f46:	490b      	ldr	r1, [pc, #44]	; (8009f74 <etharp_free_entry+0x60>)
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	4413      	add	r3, r2
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	440b      	add	r3, r1
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009f58:	4906      	ldr	r1, [pc, #24]	; (8009f74 <etharp_free_entry+0x60>)
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	4413      	add	r3, r2
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	440b      	add	r3, r1
 8009f66:	3314      	adds	r3, #20
 8009f68:	2200      	movs	r2, #0
 8009f6a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	2000010c 	.word	0x2000010c

08009f78 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009f7e:	2300      	movs	r3, #0
 8009f80:	607b      	str	r3, [r7, #4]
 8009f82:	e096      	b.n	800a0b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8009f84:	494f      	ldr	r1, [pc, #316]	; (800a0c4 <etharp_tmr+0x14c>)
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	4413      	add	r3, r2
 8009f8e:	00db      	lsls	r3, r3, #3
 8009f90:	440b      	add	r3, r1
 8009f92:	3314      	adds	r3, #20
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 8086 	beq.w	800a0ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8009fa0:	4948      	ldr	r1, [pc, #288]	; (800a0c4 <etharp_tmr+0x14c>)
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	4413      	add	r3, r2
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	440b      	add	r3, r1
 8009fae:	3312      	adds	r3, #18
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	b298      	uxth	r0, r3
 8009fb6:	4943      	ldr	r1, [pc, #268]	; (800a0c4 <etharp_tmr+0x14c>)
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	4413      	add	r3, r2
 8009fc0:	00db      	lsls	r3, r3, #3
 8009fc2:	440b      	add	r3, r1
 8009fc4:	3312      	adds	r3, #18
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009fca:	493e      	ldr	r1, [pc, #248]	; (800a0c4 <etharp_tmr+0x14c>)
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	4413      	add	r3, r2
 8009fd4:	00db      	lsls	r3, r3, #3
 8009fd6:	440b      	add	r3, r1
 8009fd8:	3312      	adds	r3, #18
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009fe0:	d215      	bcs.n	800a00e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009fe2:	4938      	ldr	r1, [pc, #224]	; (800a0c4 <etharp_tmr+0x14c>)
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	4413      	add	r3, r2
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	440b      	add	r3, r1
 8009ff0:	3314      	adds	r3, #20
 8009ff2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d10e      	bne.n	800a016 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009ff8:	4932      	ldr	r1, [pc, #200]	; (800a0c4 <etharp_tmr+0x14c>)
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	4413      	add	r3, r2
 800a002:	00db      	lsls	r3, r3, #3
 800a004:	440b      	add	r3, r1
 800a006:	3312      	adds	r3, #18
 800a008:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a00a:	2b04      	cmp	r3, #4
 800a00c:	d903      	bls.n	800a016 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff ff80 	bl	8009f14 <etharp_free_entry>
 800a014:	e04a      	b.n	800a0ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a016:	492b      	ldr	r1, [pc, #172]	; (800a0c4 <etharp_tmr+0x14c>)
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	4613      	mov	r3, r2
 800a01c:	005b      	lsls	r3, r3, #1
 800a01e:	4413      	add	r3, r2
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	440b      	add	r3, r1
 800a024:	3314      	adds	r3, #20
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d10a      	bne.n	800a042 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a02c:	4925      	ldr	r1, [pc, #148]	; (800a0c4 <etharp_tmr+0x14c>)
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	4613      	mov	r3, r2
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	4413      	add	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	440b      	add	r3, r1
 800a03a:	3314      	adds	r3, #20
 800a03c:	2204      	movs	r2, #4
 800a03e:	701a      	strb	r2, [r3, #0]
 800a040:	e034      	b.n	800a0ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a042:	4920      	ldr	r1, [pc, #128]	; (800a0c4 <etharp_tmr+0x14c>)
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	4613      	mov	r3, r2
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	4413      	add	r3, r2
 800a04c:	00db      	lsls	r3, r3, #3
 800a04e:	440b      	add	r3, r1
 800a050:	3314      	adds	r3, #20
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b04      	cmp	r3, #4
 800a056:	d10a      	bne.n	800a06e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a058:	491a      	ldr	r1, [pc, #104]	; (800a0c4 <etharp_tmr+0x14c>)
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	4613      	mov	r3, r2
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	4413      	add	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	440b      	add	r3, r1
 800a066:	3314      	adds	r3, #20
 800a068:	2202      	movs	r2, #2
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	e01e      	b.n	800a0ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a06e:	4915      	ldr	r1, [pc, #84]	; (800a0c4 <etharp_tmr+0x14c>)
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	4613      	mov	r3, r2
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	4413      	add	r3, r2
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	440b      	add	r3, r1
 800a07c:	3314      	adds	r3, #20
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d113      	bne.n	800a0ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a084:	490f      	ldr	r1, [pc, #60]	; (800a0c4 <etharp_tmr+0x14c>)
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	4613      	mov	r3, r2
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	4413      	add	r3, r2
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	440b      	add	r3, r1
 800a092:	3308      	adds	r3, #8
 800a094:	6818      	ldr	r0, [r3, #0]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	4613      	mov	r3, r2
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	4413      	add	r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	4a08      	ldr	r2, [pc, #32]	; (800a0c4 <etharp_tmr+0x14c>)
 800a0a2:	4413      	add	r3, r2
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f000 fe6e 	bl	800ad88 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	607b      	str	r3, [r7, #4]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b09      	cmp	r3, #9
 800a0b6:	f77f af65 	ble.w	8009f84 <etharp_tmr+0xc>
      }
    }
  }
}
 800a0ba:	bf00      	nop
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	2000010c 	.word	0x2000010c

0800a0c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08a      	sub	sp, #40	; 0x28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a0d6:	230a      	movs	r3, #10
 800a0d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0da:	230a      	movs	r3, #10
 800a0dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a0de:	230a      	movs	r3, #10
 800a0e0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a0e6:	230a      	movs	r3, #10
 800a0e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	83bb      	strh	r3, [r7, #28]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	837b      	strh	r3, [r7, #26]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	843b      	strh	r3, [r7, #32]
 800a0fa:	e0ae      	b.n	800a25a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a0fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a100:	49a6      	ldr	r1, [pc, #664]	; (800a39c <etharp_find_entry+0x2d4>)
 800a102:	4613      	mov	r3, r2
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	4413      	add	r3, r2
 800a108:	00db      	lsls	r3, r3, #3
 800a10a:	440b      	add	r3, r1
 800a10c:	3314      	adds	r3, #20
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a112:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a116:	2b0a      	cmp	r3, #10
 800a118:	d105      	bne.n	800a126 <etharp_find_entry+0x5e>
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d102      	bne.n	800a126 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a120:	8c3b      	ldrh	r3, [r7, #32]
 800a122:	847b      	strh	r3, [r7, #34]	; 0x22
 800a124:	e095      	b.n	800a252 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 8092 	beq.w	800a252 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d009      	beq.n	800a148 <etharp_find_entry+0x80>
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d806      	bhi.n	800a148 <etharp_find_entry+0x80>
 800a13a:	4b99      	ldr	r3, [pc, #612]	; (800a3a0 <etharp_find_entry+0x2d8>)
 800a13c:	f44f 7292 	mov.w	r2, #292	; 0x124
 800a140:	4998      	ldr	r1, [pc, #608]	; (800a3a4 <etharp_find_entry+0x2dc>)
 800a142:	4899      	ldr	r0, [pc, #612]	; (800a3a8 <etharp_find_entry+0x2e0>)
 800a144:	f002 f9e6 	bl	800c514 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d020      	beq.n	800a190 <etharp_find_entry+0xc8>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6819      	ldr	r1, [r3, #0]
 800a152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a156:	4891      	ldr	r0, [pc, #580]	; (800a39c <etharp_find_entry+0x2d4>)
 800a158:	4613      	mov	r3, r2
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	4413      	add	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4403      	add	r3, r0
 800a162:	3304      	adds	r3, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4299      	cmp	r1, r3
 800a168:	d112      	bne.n	800a190 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00c      	beq.n	800a18a <etharp_find_entry+0xc2>
 800a170:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a174:	4989      	ldr	r1, [pc, #548]	; (800a39c <etharp_find_entry+0x2d4>)
 800a176:	4613      	mov	r3, r2
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	4413      	add	r3, r2
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	440b      	add	r3, r1
 800a180:	3308      	adds	r3, #8
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	429a      	cmp	r2, r3
 800a188:	d102      	bne.n	800a190 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a18a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a18e:	e100      	b.n	800a392 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d140      	bne.n	800a218 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a19a:	4980      	ldr	r1, [pc, #512]	; (800a39c <etharp_find_entry+0x2d4>)
 800a19c:	4613      	mov	r3, r2
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	4413      	add	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	440b      	add	r3, r1
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d01a      	beq.n	800a1e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800a1ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a1b0:	497a      	ldr	r1, [pc, #488]	; (800a39c <etharp_find_entry+0x2d4>)
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3312      	adds	r3, #18
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	8bba      	ldrh	r2, [r7, #28]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d845      	bhi.n	800a252 <etharp_find_entry+0x18a>
            old_queue = i;
 800a1c6:	8c3b      	ldrh	r3, [r7, #32]
 800a1c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800a1ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a1ce:	4973      	ldr	r1, [pc, #460]	; (800a39c <etharp_find_entry+0x2d4>)
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	4413      	add	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	440b      	add	r3, r1
 800a1da:	3312      	adds	r3, #18
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	83bb      	strh	r3, [r7, #28]
 800a1e0:	e037      	b.n	800a252 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a1e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a1e6:	496d      	ldr	r1, [pc, #436]	; (800a39c <etharp_find_entry+0x2d4>)
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	4413      	add	r3, r2
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	440b      	add	r3, r1
 800a1f2:	3312      	adds	r3, #18
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	8b7a      	ldrh	r2, [r7, #26]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d82a      	bhi.n	800a252 <etharp_find_entry+0x18a>
            old_pending = i;
 800a1fc:	8c3b      	ldrh	r3, [r7, #32]
 800a1fe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800a200:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a204:	4965      	ldr	r1, [pc, #404]	; (800a39c <etharp_find_entry+0x2d4>)
 800a206:	4613      	mov	r3, r2
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	4413      	add	r3, r2
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	440b      	add	r3, r1
 800a210:	3312      	adds	r3, #18
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	837b      	strh	r3, [r7, #26]
 800a216:	e01c      	b.n	800a252 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d919      	bls.n	800a252 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a21e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a222:	495e      	ldr	r1, [pc, #376]	; (800a39c <etharp_find_entry+0x2d4>)
 800a224:	4613      	mov	r3, r2
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	4413      	add	r3, r2
 800a22a:	00db      	lsls	r3, r3, #3
 800a22c:	440b      	add	r3, r1
 800a22e:	3312      	adds	r3, #18
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	8b3a      	ldrh	r2, [r7, #24]
 800a234:	429a      	cmp	r2, r3
 800a236:	d80c      	bhi.n	800a252 <etharp_find_entry+0x18a>
            old_stable = i;
 800a238:	8c3b      	ldrh	r3, [r7, #32]
 800a23a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800a23c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a240:	4956      	ldr	r1, [pc, #344]	; (800a39c <etharp_find_entry+0x2d4>)
 800a242:	4613      	mov	r3, r2
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	4413      	add	r3, r2
 800a248:	00db      	lsls	r3, r3, #3
 800a24a:	440b      	add	r3, r1
 800a24c:	3312      	adds	r3, #18
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a252:	8c3b      	ldrh	r3, [r7, #32]
 800a254:	3301      	adds	r3, #1
 800a256:	b29b      	uxth	r3, r3
 800a258:	843b      	strh	r3, [r7, #32]
 800a25a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a25e:	2b09      	cmp	r3, #9
 800a260:	f77f af4c 	ble.w	800a0fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a264:	7afb      	ldrb	r3, [r7, #11]
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d108      	bne.n	800a280 <etharp_find_entry+0x1b8>
 800a26e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a272:	2b0a      	cmp	r3, #10
 800a274:	d107      	bne.n	800a286 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a276:	7afb      	ldrb	r3, [r7, #11]
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d102      	bne.n	800a286 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800a280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a284:	e085      	b.n	800a392 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a286:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a28a:	2b09      	cmp	r3, #9
 800a28c:	dc02      	bgt.n	800a294 <etharp_find_entry+0x1cc>
    i = empty;
 800a28e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a290:	843b      	strh	r3, [r7, #32]
 800a292:	e039      	b.n	800a308 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a294:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a298:	2b09      	cmp	r3, #9
 800a29a:	dc14      	bgt.n	800a2c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800a29c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a29e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a2a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a2a4:	493d      	ldr	r1, [pc, #244]	; (800a39c <etharp_find_entry+0x2d4>)
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4413      	add	r3, r2
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	440b      	add	r3, r1
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d018      	beq.n	800a2e8 <etharp_find_entry+0x220>
 800a2b6:	4b3a      	ldr	r3, [pc, #232]	; (800a3a0 <etharp_find_entry+0x2d8>)
 800a2b8:	f240 126d 	movw	r2, #365	; 0x16d
 800a2bc:	493b      	ldr	r1, [pc, #236]	; (800a3ac <etharp_find_entry+0x2e4>)
 800a2be:	483a      	ldr	r0, [pc, #232]	; (800a3a8 <etharp_find_entry+0x2e0>)
 800a2c0:	f002 f928 	bl	800c514 <iprintf>
 800a2c4:	e010      	b.n	800a2e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a2c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a2ca:	2b09      	cmp	r3, #9
 800a2cc:	dc02      	bgt.n	800a2d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800a2ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2d0:	843b      	strh	r3, [r7, #32]
 800a2d2:	e009      	b.n	800a2e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a2d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a2d8:	2b09      	cmp	r3, #9
 800a2da:	dc02      	bgt.n	800a2e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a2dc:	8bfb      	ldrh	r3, [r7, #30]
 800a2de:	843b      	strh	r3, [r7, #32]
 800a2e0:	e002      	b.n	800a2e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800a2e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2e6:	e054      	b.n	800a392 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a2e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a2ec:	2b09      	cmp	r3, #9
 800a2ee:	dd06      	ble.n	800a2fe <etharp_find_entry+0x236>
 800a2f0:	4b2b      	ldr	r3, [pc, #172]	; (800a3a0 <etharp_find_entry+0x2d8>)
 800a2f2:	f240 127f 	movw	r2, #383	; 0x17f
 800a2f6:	492e      	ldr	r1, [pc, #184]	; (800a3b0 <etharp_find_entry+0x2e8>)
 800a2f8:	482b      	ldr	r0, [pc, #172]	; (800a3a8 <etharp_find_entry+0x2e0>)
 800a2fa:	f002 f90b 	bl	800c514 <iprintf>
    etharp_free_entry(i);
 800a2fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fe06 	bl	8009f14 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a308:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a30c:	2b09      	cmp	r3, #9
 800a30e:	dd06      	ble.n	800a31e <etharp_find_entry+0x256>
 800a310:	4b23      	ldr	r3, [pc, #140]	; (800a3a0 <etharp_find_entry+0x2d8>)
 800a312:	f240 1283 	movw	r2, #387	; 0x183
 800a316:	4926      	ldr	r1, [pc, #152]	; (800a3b0 <etharp_find_entry+0x2e8>)
 800a318:	4823      	ldr	r0, [pc, #140]	; (800a3a8 <etharp_find_entry+0x2e0>)
 800a31a:	f002 f8fb 	bl	800c514 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a31e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a322:	491e      	ldr	r1, [pc, #120]	; (800a39c <etharp_find_entry+0x2d4>)
 800a324:	4613      	mov	r3, r2
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	4413      	add	r3, r2
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	440b      	add	r3, r1
 800a32e:	3314      	adds	r3, #20
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d006      	beq.n	800a344 <etharp_find_entry+0x27c>
 800a336:	4b1a      	ldr	r3, [pc, #104]	; (800a3a0 <etharp_find_entry+0x2d8>)
 800a338:	f240 1285 	movw	r2, #389	; 0x185
 800a33c:	491d      	ldr	r1, [pc, #116]	; (800a3b4 <etharp_find_entry+0x2ec>)
 800a33e:	481a      	ldr	r0, [pc, #104]	; (800a3a8 <etharp_find_entry+0x2e0>)
 800a340:	f002 f8e8 	bl	800c514 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a34a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6819      	ldr	r1, [r3, #0]
 800a352:	4812      	ldr	r0, [pc, #72]	; (800a39c <etharp_find_entry+0x2d4>)
 800a354:	4613      	mov	r3, r2
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	4413      	add	r3, r2
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	4403      	add	r3, r0
 800a35e:	3304      	adds	r3, #4
 800a360:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a362:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a366:	490d      	ldr	r1, [pc, #52]	; (800a39c <etharp_find_entry+0x2d4>)
 800a368:	4613      	mov	r3, r2
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	4413      	add	r3, r2
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	440b      	add	r3, r1
 800a372:	3312      	adds	r3, #18
 800a374:	2200      	movs	r2, #0
 800a376:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800a378:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a37c:	4907      	ldr	r1, [pc, #28]	; (800a39c <etharp_find_entry+0x2d4>)
 800a37e:	4613      	mov	r3, r2
 800a380:	005b      	lsls	r3, r3, #1
 800a382:	4413      	add	r3, r2
 800a384:	00db      	lsls	r3, r3, #3
 800a386:	440b      	add	r3, r1
 800a388:	3308      	adds	r3, #8
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800a38e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3728      	adds	r7, #40	; 0x28
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	2000010c 	.word	0x2000010c
 800a3a0:	0800f688 	.word	0x0800f688
 800a3a4:	0800f6c0 	.word	0x0800f6c0
 800a3a8:	0800f700 	.word	0x0800f700
 800a3ac:	0800f728 	.word	0x0800f728
 800a3b0:	0800f740 	.word	0x0800f740
 800a3b4:	0800f754 	.word	0x0800f754

0800a3b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3cc:	2b06      	cmp	r3, #6
 800a3ce:	d006      	beq.n	800a3de <etharp_update_arp_entry+0x26>
 800a3d0:	4b48      	ldr	r3, [pc, #288]	; (800a4f4 <etharp_update_arp_entry+0x13c>)
 800a3d2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800a3d6:	4948      	ldr	r1, [pc, #288]	; (800a4f8 <etharp_update_arp_entry+0x140>)
 800a3d8:	4848      	ldr	r0, [pc, #288]	; (800a4fc <etharp_update_arp_entry+0x144>)
 800a3da:	f002 f89b 	bl	800c514 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d012      	beq.n	800a40a <etharp_update_arp_entry+0x52>
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00e      	beq.n	800a40a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68f9      	ldr	r1, [r7, #12]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f001 f8fc 	bl	800b5f0 <ip4_addr_isbroadcast_u32>
 800a3f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d105      	bne.n	800a40a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a406:	2be0      	cmp	r3, #224	; 0xe0
 800a408:	d102      	bne.n	800a410 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a40a:	f06f 030f 	mvn.w	r3, #15
 800a40e:	e06c      	b.n	800a4ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	4619      	mov	r1, r3
 800a416:	68b8      	ldr	r0, [r7, #8]
 800a418:	f7ff fe56 	bl	800a0c8 <etharp_find_entry>
 800a41c:	4603      	mov	r3, r0
 800a41e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a420:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a424:	2b00      	cmp	r3, #0
 800a426:	da02      	bge.n	800a42e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a428:	8afb      	ldrh	r3, [r7, #22]
 800a42a:	b25b      	sxtb	r3, r3
 800a42c:	e05d      	b.n	800a4ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a42e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a432:	4933      	ldr	r1, [pc, #204]	; (800a500 <etharp_update_arp_entry+0x148>)
 800a434:	4613      	mov	r3, r2
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	4413      	add	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	440b      	add	r3, r1
 800a43e:	3314      	adds	r3, #20
 800a440:	2202      	movs	r2, #2
 800a442:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a444:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a448:	492d      	ldr	r1, [pc, #180]	; (800a500 <etharp_update_arp_entry+0x148>)
 800a44a:	4613      	mov	r3, r2
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	4413      	add	r3, r2
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	440b      	add	r3, r1
 800a454:	3308      	adds	r3, #8
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800a45a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a45e:	4613      	mov	r3, r2
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	4413      	add	r3, r2
 800a464:	00db      	lsls	r3, r3, #3
 800a466:	3308      	adds	r3, #8
 800a468:	4a25      	ldr	r2, [pc, #148]	; (800a500 <etharp_update_arp_entry+0x148>)
 800a46a:	4413      	add	r3, r2
 800a46c:	3304      	adds	r3, #4
 800a46e:	2206      	movs	r2, #6
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	4618      	mov	r0, r3
 800a474:	f002 f83b 	bl	800c4ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a478:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a47c:	4920      	ldr	r1, [pc, #128]	; (800a500 <etharp_update_arp_entry+0x148>)
 800a47e:	4613      	mov	r3, r2
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	4413      	add	r3, r2
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	440b      	add	r3, r1
 800a488:	3312      	adds	r3, #18
 800a48a:	2200      	movs	r2, #0
 800a48c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a48e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a492:	491b      	ldr	r1, [pc, #108]	; (800a500 <etharp_update_arp_entry+0x148>)
 800a494:	4613      	mov	r3, r2
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	4413      	add	r3, r2
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	440b      	add	r3, r1
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d021      	beq.n	800a4e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a4a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a4a8:	4915      	ldr	r1, [pc, #84]	; (800a500 <etharp_update_arp_entry+0x148>)
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	4413      	add	r3, r2
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	440b      	add	r3, r1
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a4b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a4bc:	4910      	ldr	r1, [pc, #64]	; (800a500 <etharp_update_arp_entry+0x148>)
 800a4be:	4613      	mov	r3, r2
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	4413      	add	r3, r2
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	440b      	add	r3, r1
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800a4d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6939      	ldr	r1, [r7, #16]
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f001 ff8b 	bl	800c3f8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a4e2:	6938      	ldr	r0, [r7, #16]
 800a4e4:	f7f9 fe6e 	bl	80041c4 <pbuf_free>
  }
  return ERR_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	0800f688 	.word	0x0800f688
 800a4f8:	0800f780 	.word	0x0800f780
 800a4fc:	0800f700 	.word	0x0800f700
 800a500:	2000010c 	.word	0x2000010c

0800a504 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	e01e      	b.n	800a550 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800a512:	4913      	ldr	r1, [pc, #76]	; (800a560 <etharp_cleanup_netif+0x5c>)
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4613      	mov	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4413      	add	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	440b      	add	r3, r1
 800a520:	3314      	adds	r3, #20
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a526:	7afb      	ldrb	r3, [r7, #11]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00e      	beq.n	800a54a <etharp_cleanup_netif+0x46>
 800a52c:	490c      	ldr	r1, [pc, #48]	; (800a560 <etharp_cleanup_netif+0x5c>)
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	4613      	mov	r3, r2
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	4413      	add	r3, r2
 800a536:	00db      	lsls	r3, r3, #3
 800a538:	440b      	add	r3, r1
 800a53a:	3308      	adds	r3, #8
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d102      	bne.n	800a54a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7ff fce5 	bl	8009f14 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b09      	cmp	r3, #9
 800a554:	dddd      	ble.n	800a512 <etharp_cleanup_netif+0xe>
    }
  }
}
 800a556:	bf00      	nop
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	2000010c 	.word	0x2000010c

0800a564 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a564:	b5b0      	push	{r4, r5, r7, lr}
 800a566:	b08a      	sub	sp, #40	; 0x28
 800a568:	af04      	add	r7, sp, #16
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d107      	bne.n	800a584 <etharp_input+0x20>
 800a574:	4b3d      	ldr	r3, [pc, #244]	; (800a66c <etharp_input+0x108>)
 800a576:	f240 228a 	movw	r2, #650	; 0x28a
 800a57a:	493d      	ldr	r1, [pc, #244]	; (800a670 <etharp_input+0x10c>)
 800a57c:	483d      	ldr	r0, [pc, #244]	; (800a674 <etharp_input+0x110>)
 800a57e:	f001 ffc9 	bl	800c514 <iprintf>
 800a582:	e06f      	b.n	800a664 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	b29b      	uxth	r3, r3
 800a590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a594:	d10c      	bne.n	800a5b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a59a:	2b06      	cmp	r3, #6
 800a59c:	d108      	bne.n	800a5b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a5a2:	2b04      	cmp	r3, #4
 800a5a4:	d104      	bne.n	800a5b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	885b      	ldrh	r3, [r3, #2]
 800a5aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d003      	beq.n	800a5b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f7f9 fe07 	bl	80041c4 <pbuf_free>
    return;
 800a5b6:	e055      	b.n	800a664 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	330e      	adds	r3, #14
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	3318      	adds	r3, #24
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d102      	bne.n	800a5d8 <etharp_input+0x74>
    for_us = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	75fb      	strb	r3, [r7, #23]
 800a5d6:	e009      	b.n	800a5ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	bf0c      	ite	eq
 800a5e4:	2301      	moveq	r3, #1
 800a5e6:	2300      	movne	r3, #0
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f103 0208 	add.w	r2, r3, #8
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <etharp_input+0x98>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <etharp_input+0x9a>
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	f107 010c 	add.w	r1, r7, #12
 800a602:	6838      	ldr	r0, [r7, #0]
 800a604:	f7ff fed8 	bl	800a3b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	88db      	ldrh	r3, [r3, #6]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a612:	d003      	beq.n	800a61c <etharp_input+0xb8>
 800a614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a618:	d01e      	beq.n	800a658 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800a61a:	e020      	b.n	800a65e <etharp_input+0xfa>
      if (for_us) {
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d01c      	beq.n	800a65c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	f103 0522 	add.w	r5, r3, #34	; 0x22
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800a63c:	2102      	movs	r1, #2
 800a63e:	9103      	str	r1, [sp, #12]
 800a640:	f107 010c 	add.w	r1, r7, #12
 800a644:	9102      	str	r1, [sp, #8]
 800a646:	9201      	str	r2, [sp, #4]
 800a648:	9300      	str	r3, [sp, #0]
 800a64a:	462b      	mov	r3, r5
 800a64c:	4622      	mov	r2, r4
 800a64e:	4601      	mov	r1, r0
 800a650:	6838      	ldr	r0, [r7, #0]
 800a652:	f000 faeb 	bl	800ac2c <etharp_raw>
      break;
 800a656:	e001      	b.n	800a65c <etharp_input+0xf8>
      break;
 800a658:	bf00      	nop
 800a65a:	e000      	b.n	800a65e <etharp_input+0xfa>
      break;
 800a65c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7f9 fdb0 	bl	80041c4 <pbuf_free>
}
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bdb0      	pop	{r4, r5, r7, pc}
 800a66a:	bf00      	nop
 800a66c:	0800f688 	.word	0x0800f688
 800a670:	0800f7d8 	.word	0x0800f7d8
 800a674:	0800f700 	.word	0x0800f700

0800a678 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	4613      	mov	r3, r2
 800a684:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a686:	79fa      	ldrb	r2, [r7, #7]
 800a688:	4944      	ldr	r1, [pc, #272]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a68a:	4613      	mov	r3, r2
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	4413      	add	r3, r2
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	440b      	add	r3, r1
 800a694:	3314      	adds	r3, #20
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d806      	bhi.n	800a6aa <etharp_output_to_arp_index+0x32>
 800a69c:	4b40      	ldr	r3, [pc, #256]	; (800a7a0 <etharp_output_to_arp_index+0x128>)
 800a69e:	f240 22ef 	movw	r2, #751	; 0x2ef
 800a6a2:	4940      	ldr	r1, [pc, #256]	; (800a7a4 <etharp_output_to_arp_index+0x12c>)
 800a6a4:	4840      	ldr	r0, [pc, #256]	; (800a7a8 <etharp_output_to_arp_index+0x130>)
 800a6a6:	f001 ff35 	bl	800c514 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a6aa:	79fa      	ldrb	r2, [r7, #7]
 800a6ac:	493b      	ldr	r1, [pc, #236]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	4413      	add	r3, r2
 800a6b4:	00db      	lsls	r3, r3, #3
 800a6b6:	440b      	add	r3, r1
 800a6b8:	3314      	adds	r3, #20
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d153      	bne.n	800a768 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a6c0:	79fa      	ldrb	r2, [r7, #7]
 800a6c2:	4936      	ldr	r1, [pc, #216]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	4413      	add	r3, r2
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	440b      	add	r3, r1
 800a6ce:	3312      	adds	r3, #18
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a6d6:	d919      	bls.n	800a70c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a6d8:	79fa      	ldrb	r2, [r7, #7]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	4413      	add	r3, r2
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	4a2e      	ldr	r2, [pc, #184]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a6e4:	4413      	add	r3, r2
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 fb4c 	bl	800ad88 <etharp_request>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d138      	bne.n	800a768 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a6f6:	79fa      	ldrb	r2, [r7, #7]
 800a6f8:	4928      	ldr	r1, [pc, #160]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	005b      	lsls	r3, r3, #1
 800a6fe:	4413      	add	r3, r2
 800a700:	00db      	lsls	r3, r3, #3
 800a702:	440b      	add	r3, r1
 800a704:	3314      	adds	r3, #20
 800a706:	2203      	movs	r2, #3
 800a708:	701a      	strb	r2, [r3, #0]
 800a70a:	e02d      	b.n	800a768 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a70c:	79fa      	ldrb	r2, [r7, #7]
 800a70e:	4923      	ldr	r1, [pc, #140]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a710:	4613      	mov	r3, r2
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	4413      	add	r3, r2
 800a716:	00db      	lsls	r3, r3, #3
 800a718:	440b      	add	r3, r1
 800a71a:	3312      	adds	r3, #18
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a722:	d321      	bcc.n	800a768 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a724:	79fa      	ldrb	r2, [r7, #7]
 800a726:	4613      	mov	r3, r2
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	4413      	add	r3, r2
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	4a1b      	ldr	r2, [pc, #108]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a730:	4413      	add	r3, r2
 800a732:	1d19      	adds	r1, r3, #4
 800a734:	79fa      	ldrb	r2, [r7, #7]
 800a736:	4613      	mov	r3, r2
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	4413      	add	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	3308      	adds	r3, #8
 800a740:	4a16      	ldr	r2, [pc, #88]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a742:	4413      	add	r3, r2
 800a744:	3304      	adds	r3, #4
 800a746:	461a      	mov	r2, r3
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f000 fafb 	bl	800ad44 <etharp_request_dst>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d109      	bne.n	800a768 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a754:	79fa      	ldrb	r2, [r7, #7]
 800a756:	4911      	ldr	r1, [pc, #68]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a758:	4613      	mov	r3, r2
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	4413      	add	r3, r2
 800a75e:	00db      	lsls	r3, r3, #3
 800a760:	440b      	add	r3, r1
 800a762:	3314      	adds	r3, #20
 800a764:	2203      	movs	r2, #3
 800a766:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f103 0122 	add.w	r1, r3, #34	; 0x22
 800a76e:	79fa      	ldrb	r2, [r7, #7]
 800a770:	4613      	mov	r3, r2
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	4413      	add	r3, r2
 800a776:	00db      	lsls	r3, r3, #3
 800a778:	3308      	adds	r3, #8
 800a77a:	4a08      	ldr	r2, [pc, #32]	; (800a79c <etharp_output_to_arp_index+0x124>)
 800a77c:	4413      	add	r3, r2
 800a77e:	1d1a      	adds	r2, r3, #4
 800a780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	4613      	mov	r3, r2
 800a788:	460a      	mov	r2, r1
 800a78a:	68b9      	ldr	r1, [r7, #8]
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f001 fe33 	bl	800c3f8 <ethernet_output>
 800a792:	4603      	mov	r3, r0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	2000010c 	.word	0x2000010c
 800a7a0:	0800f688 	.word	0x0800f688
 800a7a4:	0800f7f8 	.word	0x0800f7f8
 800a7a8:	0800f700 	.word	0x0800f700

0800a7ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08a      	sub	sp, #40	; 0x28
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d106      	bne.n	800a7d0 <etharp_output+0x24>
 800a7c2:	4b73      	ldr	r3, [pc, #460]	; (800a990 <etharp_output+0x1e4>)
 800a7c4:	f240 321e 	movw	r2, #798	; 0x31e
 800a7c8:	4972      	ldr	r1, [pc, #456]	; (800a994 <etharp_output+0x1e8>)
 800a7ca:	4873      	ldr	r0, [pc, #460]	; (800a998 <etharp_output+0x1ec>)
 800a7cc:	f001 fea2 	bl	800c514 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <etharp_output+0x38>
 800a7d6:	4b6e      	ldr	r3, [pc, #440]	; (800a990 <etharp_output+0x1e4>)
 800a7d8:	f240 321f 	movw	r2, #799	; 0x31f
 800a7dc:	496f      	ldr	r1, [pc, #444]	; (800a99c <etharp_output+0x1f0>)
 800a7de:	486e      	ldr	r0, [pc, #440]	; (800a998 <etharp_output+0x1ec>)
 800a7e0:	f001 fe98 	bl	800c514 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d106      	bne.n	800a7f8 <etharp_output+0x4c>
 800a7ea:	4b69      	ldr	r3, [pc, #420]	; (800a990 <etharp_output+0x1e4>)
 800a7ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a7f0:	496b      	ldr	r1, [pc, #428]	; (800a9a0 <etharp_output+0x1f4>)
 800a7f2:	4869      	ldr	r0, [pc, #420]	; (800a998 <etharp_output+0x1ec>)
 800a7f4:	f001 fe8e 	bl	800c514 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68f9      	ldr	r1, [r7, #12]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fef6 	bl	800b5f0 <ip4_addr_isbroadcast_u32>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a80a:	4b66      	ldr	r3, [pc, #408]	; (800a9a4 <etharp_output+0x1f8>)
 800a80c:	61fb      	str	r3, [r7, #28]
 800a80e:	e0af      	b.n	800a970 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a818:	2be0      	cmp	r3, #224	; 0xe0
 800a81a:	d118      	bne.n	800a84e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a81c:	2301      	movs	r3, #1
 800a81e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a820:	2300      	movs	r3, #0
 800a822:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a824:	235e      	movs	r3, #94	; 0x5e
 800a826:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3301      	adds	r3, #1
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a832:	b2db      	uxtb	r3, r3
 800a834:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3302      	adds	r3, #2
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3303      	adds	r3, #3
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a846:	f107 0310 	add.w	r3, r7, #16
 800a84a:	61fb      	str	r3, [r7, #28]
 800a84c:	e090      	b.n	800a970 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3304      	adds	r3, #4
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	405a      	eors	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3308      	adds	r3, #8
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4013      	ands	r3, r2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d012      	beq.n	800a88c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a86c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a870:	4293      	cmp	r3, r2
 800a872:	d00b      	beq.n	800a88c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	330c      	adds	r3, #12
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	330c      	adds	r3, #12
 800a882:	61bb      	str	r3, [r7, #24]
 800a884:	e002      	b.n	800a88c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800a886:	f06f 0303 	mvn.w	r3, #3
 800a88a:	e07d      	b.n	800a988 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a88c:	4b46      	ldr	r3, [pc, #280]	; (800a9a8 <etharp_output+0x1fc>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	4619      	mov	r1, r3
 800a892:	4a46      	ldr	r2, [pc, #280]	; (800a9ac <etharp_output+0x200>)
 800a894:	460b      	mov	r3, r1
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	440b      	add	r3, r1
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	3314      	adds	r3, #20
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d925      	bls.n	800a8f2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a8a6:	4b40      	ldr	r3, [pc, #256]	; (800a9a8 <etharp_output+0x1fc>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4a3f      	ldr	r2, [pc, #252]	; (800a9ac <etharp_output+0x200>)
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	440b      	add	r3, r1
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	4413      	add	r3, r2
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d117      	bne.n	800a8f2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	4b38      	ldr	r3, [pc, #224]	; (800a9a8 <etharp_output+0x1fc>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	4937      	ldr	r1, [pc, #220]	; (800a9ac <etharp_output+0x200>)
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	005b      	lsls	r3, r3, #1
 800a8d2:	4403      	add	r3, r0
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	440b      	add	r3, r1
 800a8d8:	3304      	adds	r3, #4
 800a8da:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d108      	bne.n	800a8f2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a8e0:	4b31      	ldr	r3, [pc, #196]	; (800a9a8 <etharp_output+0x1fc>)
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	68b9      	ldr	r1, [r7, #8]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f7ff fec5 	bl	800a678 <etharp_output_to_arp_index>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	e04a      	b.n	800a988 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	75fb      	strb	r3, [r7, #23]
 800a8f6:	e031      	b.n	800a95c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a8f8:	7dfa      	ldrb	r2, [r7, #23]
 800a8fa:	492c      	ldr	r1, [pc, #176]	; (800a9ac <etharp_output+0x200>)
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	4413      	add	r3, r2
 800a902:	00db      	lsls	r3, r3, #3
 800a904:	440b      	add	r3, r1
 800a906:	3314      	adds	r3, #20
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d923      	bls.n	800a956 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800a90e:	7dfa      	ldrb	r2, [r7, #23]
 800a910:	4926      	ldr	r1, [pc, #152]	; (800a9ac <etharp_output+0x200>)
 800a912:	4613      	mov	r3, r2
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	4413      	add	r3, r2
 800a918:	00db      	lsls	r3, r3, #3
 800a91a:	440b      	add	r3, r1
 800a91c:	3308      	adds	r3, #8
 800a91e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	429a      	cmp	r2, r3
 800a924:	d117      	bne.n	800a956 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	6819      	ldr	r1, [r3, #0]
 800a92a:	7dfa      	ldrb	r2, [r7, #23]
 800a92c:	481f      	ldr	r0, [pc, #124]	; (800a9ac <etharp_output+0x200>)
 800a92e:	4613      	mov	r3, r2
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	4413      	add	r3, r2
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	4403      	add	r3, r0
 800a938:	3304      	adds	r3, #4
 800a93a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800a93c:	4299      	cmp	r1, r3
 800a93e:	d10a      	bne.n	800a956 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800a940:	4a19      	ldr	r2, [pc, #100]	; (800a9a8 <etharp_output+0x1fc>)
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	461a      	mov	r2, r3
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f7ff fe93 	bl	800a678 <etharp_output_to_arp_index>
 800a952:	4603      	mov	r3, r0
 800a954:	e018      	b.n	800a988 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a956:	7dfb      	ldrb	r3, [r7, #23]
 800a958:	3301      	adds	r3, #1
 800a95a:	75fb      	strb	r3, [r7, #23]
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	2b09      	cmp	r3, #9
 800a960:	d9ca      	bls.n	800a8f8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	69b9      	ldr	r1, [r7, #24]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 f822 	bl	800a9b0 <etharp_query>
 800a96c:	4603      	mov	r3, r0
 800a96e:	e00b      	b.n	800a988 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800a976:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	68b9      	ldr	r1, [r7, #8]
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f001 fd39 	bl	800c3f8 <ethernet_output>
 800a986:	4603      	mov	r3, r0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3720      	adds	r7, #32
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	0800f688 	.word	0x0800f688
 800a994:	0800f7d8 	.word	0x0800f7d8
 800a998:	0800f700 	.word	0x0800f700
 800a99c:	0800f828 	.word	0x0800f828
 800a9a0:	0800f7c8 	.word	0x0800f7c8
 800a9a4:	0800fe30 	.word	0x0800fe30
 800a9a8:	200001fc 	.word	0x200001fc
 800a9ac:	2000010c 	.word	0x2000010c

0800a9b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08c      	sub	sp, #48	; 0x30
 800a9b4:	af02      	add	r7, sp, #8
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3322      	adds	r3, #34	; 0x22
 800a9c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800a9c2:	23ff      	movs	r3, #255	; 0xff
 800a9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68f9      	ldr	r1, [r7, #12]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fe0c 	bl	800b5f0 <ip4_addr_isbroadcast_u32>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10c      	bne.n	800a9f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a9e6:	2be0      	cmp	r3, #224	; 0xe0
 800a9e8:	d006      	beq.n	800a9f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d003      	beq.n	800a9f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a9f8:	f06f 030f 	mvn.w	r3, #15
 800a9fc:	e102      	b.n	800ac04 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	2101      	movs	r1, #1
 800aa02:	68b8      	ldr	r0, [r7, #8]
 800aa04:	f7ff fb60 	bl	800a0c8 <etharp_find_entry>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800aa0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	da02      	bge.n	800aa1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800aa14:	8a7b      	ldrh	r3, [r7, #18]
 800aa16:	b25b      	sxtb	r3, r3
 800aa18:	e0f4      	b.n	800ac04 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800aa1a:	8a7b      	ldrh	r3, [r7, #18]
 800aa1c:	2b7e      	cmp	r3, #126	; 0x7e
 800aa1e:	d906      	bls.n	800aa2e <etharp_query+0x7e>
 800aa20:	4b7a      	ldr	r3, [pc, #488]	; (800ac0c <etharp_query+0x25c>)
 800aa22:	f240 32c1 	movw	r2, #961	; 0x3c1
 800aa26:	497a      	ldr	r1, [pc, #488]	; (800ac10 <etharp_query+0x260>)
 800aa28:	487a      	ldr	r0, [pc, #488]	; (800ac14 <etharp_query+0x264>)
 800aa2a:	f001 fd73 	bl	800c514 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800aa2e:	8a7b      	ldrh	r3, [r7, #18]
 800aa30:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800aa32:	7c7a      	ldrb	r2, [r7, #17]
 800aa34:	4978      	ldr	r1, [pc, #480]	; (800ac18 <etharp_query+0x268>)
 800aa36:	4613      	mov	r3, r2
 800aa38:	005b      	lsls	r3, r3, #1
 800aa3a:	4413      	add	r3, r2
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	440b      	add	r3, r1
 800aa40:	3314      	adds	r3, #20
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d115      	bne.n	800aa74 <etharp_query+0xc4>
    is_new_entry = 1;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800aa4c:	7c7a      	ldrb	r2, [r7, #17]
 800aa4e:	4972      	ldr	r1, [pc, #456]	; (800ac18 <etharp_query+0x268>)
 800aa50:	4613      	mov	r3, r2
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	4413      	add	r3, r2
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	440b      	add	r3, r1
 800aa5a:	3314      	adds	r3, #20
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800aa60:	7c7a      	ldrb	r2, [r7, #17]
 800aa62:	496d      	ldr	r1, [pc, #436]	; (800ac18 <etharp_query+0x268>)
 800aa64:	4613      	mov	r3, r2
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	4413      	add	r3, r2
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	440b      	add	r3, r1
 800aa6e:	3308      	adds	r3, #8
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800aa74:	7c7a      	ldrb	r2, [r7, #17]
 800aa76:	4968      	ldr	r1, [pc, #416]	; (800ac18 <etharp_query+0x268>)
 800aa78:	4613      	mov	r3, r2
 800aa7a:	005b      	lsls	r3, r3, #1
 800aa7c:	4413      	add	r3, r2
 800aa7e:	00db      	lsls	r3, r3, #3
 800aa80:	440b      	add	r3, r1
 800aa82:	3314      	adds	r3, #20
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d011      	beq.n	800aaae <etharp_query+0xfe>
 800aa8a:	7c7a      	ldrb	r2, [r7, #17]
 800aa8c:	4962      	ldr	r1, [pc, #392]	; (800ac18 <etharp_query+0x268>)
 800aa8e:	4613      	mov	r3, r2
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	4413      	add	r3, r2
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	440b      	add	r3, r1
 800aa98:	3314      	adds	r3, #20
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d806      	bhi.n	800aaae <etharp_query+0xfe>
 800aaa0:	4b5a      	ldr	r3, [pc, #360]	; (800ac0c <etharp_query+0x25c>)
 800aaa2:	f240 32cf 	movw	r2, #975	; 0x3cf
 800aaa6:	495d      	ldr	r1, [pc, #372]	; (800ac1c <etharp_query+0x26c>)
 800aaa8:	485a      	ldr	r0, [pc, #360]	; (800ac14 <etharp_query+0x264>)
 800aaaa:	f001 fd33 	bl	800c514 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d102      	bne.n	800aaba <etharp_query+0x10a>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10c      	bne.n	800aad4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800aaba:	68b9      	ldr	r1, [r7, #8]
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 f963 	bl	800ad88 <etharp_request>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d102      	bne.n	800aad4 <etharp_query+0x124>
      return result;
 800aace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aad2:	e097      	b.n	800ac04 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <etharp_query+0x138>
 800aada:	4b4c      	ldr	r3, [pc, #304]	; (800ac0c <etharp_query+0x25c>)
 800aadc:	f240 32e1 	movw	r2, #993	; 0x3e1
 800aae0:	494f      	ldr	r1, [pc, #316]	; (800ac20 <etharp_query+0x270>)
 800aae2:	484c      	ldr	r0, [pc, #304]	; (800ac14 <etharp_query+0x264>)
 800aae4:	f001 fd16 	bl	800c514 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800aae8:	7c7a      	ldrb	r2, [r7, #17]
 800aaea:	494b      	ldr	r1, [pc, #300]	; (800ac18 <etharp_query+0x268>)
 800aaec:	4613      	mov	r3, r2
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	4413      	add	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	440b      	add	r3, r1
 800aaf6:	3314      	adds	r3, #20
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d918      	bls.n	800ab30 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800aafe:	4a49      	ldr	r2, [pc, #292]	; (800ac24 <etharp_query+0x274>)
 800ab00:	7c7b      	ldrb	r3, [r7, #17]
 800ab02:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ab04:	7c7a      	ldrb	r2, [r7, #17]
 800ab06:	4613      	mov	r3, r2
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	4413      	add	r3, r2
 800ab0c:	00db      	lsls	r3, r3, #3
 800ab0e:	3308      	adds	r3, #8
 800ab10:	4a41      	ldr	r2, [pc, #260]	; (800ac18 <etharp_query+0x268>)
 800ab12:	4413      	add	r3, r2
 800ab14:	1d1a      	adds	r2, r3, #4
 800ab16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f001 fc68 	bl	800c3f8 <ethernet_output>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab2e:	e067      	b.n	800ac00 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ab30:	7c7a      	ldrb	r2, [r7, #17]
 800ab32:	4939      	ldr	r1, [pc, #228]	; (800ac18 <etharp_query+0x268>)
 800ab34:	4613      	mov	r3, r2
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	4413      	add	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	440b      	add	r3, r1
 800ab3e:	3314      	adds	r3, #20
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d15c      	bne.n	800ac00 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ab4e:	e01c      	b.n	800ab8a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	895a      	ldrh	r2, [r3, #10]
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	891b      	ldrh	r3, [r3, #8]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d10a      	bne.n	800ab72 <etharp_query+0x1c2>
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d006      	beq.n	800ab72 <etharp_query+0x1c2>
 800ab64:	4b29      	ldr	r3, [pc, #164]	; (800ac0c <etharp_query+0x25c>)
 800ab66:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ab6a:	492f      	ldr	r1, [pc, #188]	; (800ac28 <etharp_query+0x278>)
 800ab6c:	4829      	ldr	r0, [pc, #164]	; (800ac14 <etharp_query+0x264>)
 800ab6e:	f001 fcd1 	bl	800c514 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	7b1b      	ldrb	r3, [r3, #12]
 800ab76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <etharp_query+0x1d4>
        copy_needed = 1;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	61bb      	str	r3, [r7, #24]
        break;
 800ab82:	e005      	b.n	800ab90 <etharp_query+0x1e0>
      }
      p = p->next;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1df      	bne.n	800ab50 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d007      	beq.n	800aba6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ab9c:	200e      	movs	r0, #14
 800ab9e:	f7f9 fd6d 	bl	800467c <pbuf_clone>
 800aba2:	61f8      	str	r0, [r7, #28]
 800aba4:	e004      	b.n	800abb0 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800abaa:	69f8      	ldr	r0, [r7, #28]
 800abac:	f7f9 fbaa 	bl	8004304 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d021      	beq.n	800abfa <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800abb6:	7c7a      	ldrb	r2, [r7, #17]
 800abb8:	4917      	ldr	r1, [pc, #92]	; (800ac18 <etharp_query+0x268>)
 800abba:	4613      	mov	r3, r2
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	4413      	add	r3, r2
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	440b      	add	r3, r1
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800abca:	7c7a      	ldrb	r2, [r7, #17]
 800abcc:	4912      	ldr	r1, [pc, #72]	; (800ac18 <etharp_query+0x268>)
 800abce:	4613      	mov	r3, r2
 800abd0:	005b      	lsls	r3, r3, #1
 800abd2:	4413      	add	r3, r2
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	440b      	add	r3, r1
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7f9 faf2 	bl	80041c4 <pbuf_free>
      }
      arp_table[i].q = p;
 800abe0:	7c7a      	ldrb	r2, [r7, #17]
 800abe2:	490d      	ldr	r1, [pc, #52]	; (800ac18 <etharp_query+0x268>)
 800abe4:	4613      	mov	r3, r2
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	4413      	add	r3, r2
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	440b      	add	r3, r1
 800abee:	69fa      	ldr	r2, [r7, #28]
 800abf0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abf8:	e002      	b.n	800ac00 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800abfa:	23ff      	movs	r3, #255	; 0xff
 800abfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ac00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3728      	adds	r7, #40	; 0x28
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	0800f688 	.word	0x0800f688
 800ac10:	0800f834 	.word	0x0800f834
 800ac14:	0800f700 	.word	0x0800f700
 800ac18:	2000010c 	.word	0x2000010c
 800ac1c:	0800f844 	.word	0x0800f844
 800ac20:	0800f828 	.word	0x0800f828
 800ac24:	200001fc 	.word	0x200001fc
 800ac28:	0800f86c 	.word	0x0800f86c

0800ac2c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af02      	add	r7, sp, #8
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d106      	bne.n	800ac52 <etharp_raw+0x26>
 800ac44:	4b3a      	ldr	r3, [pc, #232]	; (800ad30 <etharp_raw+0x104>)
 800ac46:	f240 4257 	movw	r2, #1111	; 0x457
 800ac4a:	493a      	ldr	r1, [pc, #232]	; (800ad34 <etharp_raw+0x108>)
 800ac4c:	483a      	ldr	r0, [pc, #232]	; (800ad38 <etharp_raw+0x10c>)
 800ac4e:	f001 fc61 	bl	800c514 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ac52:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ac56:	211c      	movs	r1, #28
 800ac58:	200e      	movs	r0, #14
 800ac5a:	f7f8 ffd3 	bl	8003c04 <pbuf_alloc>
 800ac5e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d102      	bne.n	800ac6c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ac66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac6a:	e05d      	b.n	800ad28 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	895b      	ldrh	r3, [r3, #10]
 800ac70:	2b1b      	cmp	r3, #27
 800ac72:	d806      	bhi.n	800ac82 <etharp_raw+0x56>
 800ac74:	4b2e      	ldr	r3, [pc, #184]	; (800ad30 <etharp_raw+0x104>)
 800ac76:	f240 4263 	movw	r2, #1123	; 0x463
 800ac7a:	4930      	ldr	r1, [pc, #192]	; (800ad3c <etharp_raw+0x110>)
 800ac7c:	482e      	ldr	r0, [pc, #184]	; (800ad38 <etharp_raw+0x10c>)
 800ac7e:	f001 fc49 	bl	800c514 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ac88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f8 f81f 	bl	8002cce <lwip_htons>
 800ac90:	4603      	mov	r3, r0
 800ac92:	461a      	mov	r2, r3
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac9e:	2b06      	cmp	r3, #6
 800aca0:	d006      	beq.n	800acb0 <etharp_raw+0x84>
 800aca2:	4b23      	ldr	r3, [pc, #140]	; (800ad30 <etharp_raw+0x104>)
 800aca4:	f240 426a 	movw	r2, #1130	; 0x46a
 800aca8:	4925      	ldr	r1, [pc, #148]	; (800ad40 <etharp_raw+0x114>)
 800acaa:	4823      	ldr	r0, [pc, #140]	; (800ad38 <etharp_raw+0x10c>)
 800acac:	f001 fc32 	bl	800c514 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	3308      	adds	r3, #8
 800acb4:	2206      	movs	r2, #6
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 fc18 	bl	800c4ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	3312      	adds	r3, #18
 800acc2:	2206      	movs	r2, #6
 800acc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acc6:	4618      	mov	r0, r3
 800acc8:	f001 fc11 	bl	800c4ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	330e      	adds	r3, #14
 800acd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd2:	6812      	ldr	r2, [r2, #0]
 800acd4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	3318      	adds	r3, #24
 800acda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acdc:	6812      	ldr	r2, [r2, #0]
 800acde:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	2200      	movs	r2, #0
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f042 0201 	orr.w	r2, r2, #1
 800acec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f042 0208 	orr.w	r2, r2, #8
 800acf6:	709a      	strb	r2, [r3, #2]
 800acf8:	2200      	movs	r2, #0
 800acfa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2206      	movs	r2, #6
 800ad00:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2204      	movs	r2, #4
 800ad06:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ad08:	f640 0306 	movw	r3, #2054	; 0x806
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	69b9      	ldr	r1, [r7, #24]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f001 fb6f 	bl	800c3f8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ad1a:	69b8      	ldr	r0, [r7, #24]
 800ad1c:	f7f9 fa52 	bl	80041c4 <pbuf_free>
  p = NULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ad24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3720      	adds	r7, #32
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	0800f688 	.word	0x0800f688
 800ad34:	0800f7d8 	.word	0x0800f7d8
 800ad38:	0800f700 	.word	0x0800f700
 800ad3c:	0800f888 	.word	0x0800f888
 800ad40:	0800f8bc 	.word	0x0800f8bc

0800ad44 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b088      	sub	sp, #32
 800ad48:	af04      	add	r7, sp, #16
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ad60:	2201      	movs	r2, #1
 800ad62:	9203      	str	r2, [sp, #12]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	9202      	str	r2, [sp, #8]
 800ad68:	4a06      	ldr	r2, [pc, #24]	; (800ad84 <etharp_request_dst+0x40>)
 800ad6a:	9201      	str	r2, [sp, #4]
 800ad6c:	9300      	str	r3, [sp, #0]
 800ad6e:	4603      	mov	r3, r0
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f7ff ff5a 	bl	800ac2c <etharp_raw>
 800ad78:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	0800fe38 	.word	0x0800fe38

0800ad88 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ad92:	4a05      	ldr	r2, [pc, #20]	; (800ada8 <etharp_request+0x20>)
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff ffd4 	bl	800ad44 <etharp_request_dst>
 800ad9c:	4603      	mov	r3, r0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	0800fe30 	.word	0x0800fe30

0800adac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08e      	sub	sp, #56	; 0x38
 800adb0:	af04      	add	r7, sp, #16
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800adb6:	4b79      	ldr	r3, [pc, #484]	; (800af9c <icmp_input+0x1f0>)
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	f003 030f 	and.w	r3, r3, #15
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800adcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800adce:	2b13      	cmp	r3, #19
 800add0:	f240 80cd 	bls.w	800af6e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	895b      	ldrh	r3, [r3, #10]
 800add8:	2b03      	cmp	r3, #3
 800adda:	f240 80ca 	bls.w	800af72 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ade8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 80b7 	beq.w	800af60 <icmp_input+0x1b4>
 800adf2:	2b08      	cmp	r3, #8
 800adf4:	f040 80b7 	bne.w	800af66 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800adf8:	4b69      	ldr	r3, [pc, #420]	; (800afa0 <icmp_input+0x1f4>)
 800adfa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800adfc:	4b67      	ldr	r3, [pc, #412]	; (800af9c <icmp_input+0x1f0>)
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae04:	2be0      	cmp	r3, #224	; 0xe0
 800ae06:	f000 80bb 	beq.w	800af80 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ae0a:	4b64      	ldr	r3, [pc, #400]	; (800af9c <icmp_input+0x1f0>)
 800ae0c:	695a      	ldr	r2, [r3, #20]
 800ae0e:	4b63      	ldr	r3, [pc, #396]	; (800af9c <icmp_input+0x1f0>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4619      	mov	r1, r3
 800ae14:	4610      	mov	r0, r2
 800ae16:	f000 fbeb 	bl	800b5f0 <ip4_addr_isbroadcast_u32>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f040 80b1 	bne.w	800af84 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	891b      	ldrh	r3, [r3, #8]
 800ae26:	2b07      	cmp	r3, #7
 800ae28:	f240 80a5 	bls.w	800af76 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ae2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae2e:	330e      	adds	r3, #14
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7f9 f930 	bl	8004098 <pbuf_add_header>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d04b      	beq.n	800aed6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	891a      	ldrh	r2, [r3, #8]
 800ae42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae44:	4413      	add	r3, r2
 800ae46:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	891b      	ldrh	r3, [r3, #8]
 800ae4c:	8b7a      	ldrh	r2, [r7, #26]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	f0c0 809a 	bcc.w	800af88 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ae54:	8b7b      	ldrh	r3, [r7, #26]
 800ae56:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	200e      	movs	r0, #14
 800ae5e:	f7f8 fed1 	bl	8003c04 <pbuf_alloc>
 800ae62:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f000 8090 	beq.w	800af8c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	895b      	ldrh	r3, [r3, #10]
 800ae70:	461a      	mov	r2, r3
 800ae72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae74:	3308      	adds	r3, #8
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d203      	bcs.n	800ae82 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ae7a:	6978      	ldr	r0, [r7, #20]
 800ae7c:	f7f9 f9a2 	bl	80041c4 <pbuf_free>
          goto icmperr;
 800ae80:	e085      	b.n	800af8e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ae88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f001 fb2f 	bl	800c4ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ae90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae92:	4619      	mov	r1, r3
 800ae94:	6978      	ldr	r0, [r7, #20]
 800ae96:	f7f9 f90f 	bl	80040b8 <pbuf_remove_header>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d009      	beq.n	800aeb4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800aea0:	4b40      	ldr	r3, [pc, #256]	; (800afa4 <icmp_input+0x1f8>)
 800aea2:	22b6      	movs	r2, #182	; 0xb6
 800aea4:	4940      	ldr	r1, [pc, #256]	; (800afa8 <icmp_input+0x1fc>)
 800aea6:	4841      	ldr	r0, [pc, #260]	; (800afac <icmp_input+0x200>)
 800aea8:	f001 fb34 	bl	800c514 <iprintf>
          pbuf_free(r);
 800aeac:	6978      	ldr	r0, [r7, #20]
 800aeae:	f7f9 f989 	bl	80041c4 <pbuf_free>
          goto icmperr;
 800aeb2:	e06c      	b.n	800af8e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	6978      	ldr	r0, [r7, #20]
 800aeb8:	f7f9 fa9c 	bl	80043f4 <pbuf_copy>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800aec2:	6978      	ldr	r0, [r7, #20]
 800aec4:	f7f9 f97e 	bl	80041c4 <pbuf_free>
          goto icmperr;
 800aec8:	e061      	b.n	800af8e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f7f9 f97a 	bl	80041c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	607b      	str	r3, [r7, #4]
 800aed4:	e00f      	b.n	800aef6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800aed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aed8:	330e      	adds	r3, #14
 800aeda:	4619      	mov	r1, r3
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7f9 f8eb 	bl	80040b8 <pbuf_remove_header>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d006      	beq.n	800aef6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800aee8:	4b2e      	ldr	r3, [pc, #184]	; (800afa4 <icmp_input+0x1f8>)
 800aeea:	22c7      	movs	r2, #199	; 0xc7
 800aeec:	4930      	ldr	r1, [pc, #192]	; (800afb0 <icmp_input+0x204>)
 800aeee:	482f      	ldr	r0, [pc, #188]	; (800afac <icmp_input+0x200>)
 800aef0:	f001 fb10 	bl	800c514 <iprintf>
          goto icmperr;
 800aef4:	e04b      	b.n	800af8e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800aefc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7f9 f8c9 	bl	8004098 <pbuf_add_header>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d12b      	bne.n	800af64 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800af1a:	4b20      	ldr	r3, [pc, #128]	; (800af9c <icmp_input+0x1f0>)
 800af1c:	691a      	ldr	r2, [r3, #16]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	2200      	movs	r2, #0
 800af26:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	2200      	movs	r2, #0
 800af2c:	709a      	strb	r2, [r3, #2]
 800af2e:	2200      	movs	r2, #0
 800af30:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	22ff      	movs	r2, #255	; 0xff
 800af36:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	729a      	strb	r2, [r3, #10]
 800af3e:	2200      	movs	r2, #0
 800af40:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	9302      	str	r3, [sp, #8]
 800af46:	2301      	movs	r3, #1
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	2300      	movs	r3, #0
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	23ff      	movs	r3, #255	; 0xff
 800af50:	2200      	movs	r2, #0
 800af52:	69f9      	ldr	r1, [r7, #28]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fa73 	bl	800b440 <ip4_output_if>
 800af5a:	4603      	mov	r3, r0
 800af5c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800af5e:	e001      	b.n	800af64 <icmp_input+0x1b8>
      break;
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <icmp_input+0x1ba>
      break;
 800af64:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7f9 f92c 	bl	80041c4 <pbuf_free>
  return;
 800af6c:	e013      	b.n	800af96 <icmp_input+0x1ea>
    goto lenerr;
 800af6e:	bf00      	nop
 800af70:	e002      	b.n	800af78 <icmp_input+0x1cc>
    goto lenerr;
 800af72:	bf00      	nop
 800af74:	e000      	b.n	800af78 <icmp_input+0x1cc>
        goto lenerr;
 800af76:	bf00      	nop
lenerr:
  pbuf_free(p);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7f9 f923 	bl	80041c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800af7e:	e00a      	b.n	800af96 <icmp_input+0x1ea>
        goto icmperr;
 800af80:	bf00      	nop
 800af82:	e004      	b.n	800af8e <icmp_input+0x1e2>
        goto icmperr;
 800af84:	bf00      	nop
 800af86:	e002      	b.n	800af8e <icmp_input+0x1e2>
          goto icmperr;
 800af88:	bf00      	nop
 800af8a:	e000      	b.n	800af8e <icmp_input+0x1e2>
          goto icmperr;
 800af8c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7f9 f918 	bl	80041c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800af94:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800af96:	3728      	adds	r7, #40	; 0x28
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	20003344 	.word	0x20003344
 800afa0:	20003358 	.word	0x20003358
 800afa4:	0800f900 	.word	0x0800f900
 800afa8:	0800f938 	.word	0x0800f938
 800afac:	0800f970 	.word	0x0800f970
 800afb0:	0800f998 	.word	0x0800f998

0800afb4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	460b      	mov	r3, r1
 800afbe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800afc0:	78fb      	ldrb	r3, [r7, #3]
 800afc2:	461a      	mov	r2, r3
 800afc4:	2103      	movs	r1, #3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f814 	bl	800aff4 <icmp_send_response>
}
 800afcc:	bf00      	nop
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800afe0:	78fb      	ldrb	r3, [r7, #3]
 800afe2:	461a      	mov	r2, r3
 800afe4:	210b      	movs	r1, #11
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f804 	bl	800aff4 <icmp_send_response>
}
 800afec:	bf00      	nop
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08c      	sub	sp, #48	; 0x30
 800aff8:	af04      	add	r7, sp, #16
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	70fb      	strb	r3, [r7, #3]
 800b000:	4613      	mov	r3, r2
 800b002:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b004:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b008:	2124      	movs	r1, #36	; 0x24
 800b00a:	2022      	movs	r0, #34	; 0x22
 800b00c:	f7f8 fdfa 	bl	8003c04 <pbuf_alloc>
 800b010:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d04c      	beq.n	800b0b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	895b      	ldrh	r3, [r3, #10]
 800b01c:	2b23      	cmp	r3, #35	; 0x23
 800b01e:	d806      	bhi.n	800b02e <icmp_send_response+0x3a>
 800b020:	4b26      	ldr	r3, [pc, #152]	; (800b0bc <icmp_send_response+0xc8>)
 800b022:	f240 1269 	movw	r2, #361	; 0x169
 800b026:	4926      	ldr	r1, [pc, #152]	; (800b0c0 <icmp_send_response+0xcc>)
 800b028:	4826      	ldr	r0, [pc, #152]	; (800b0c4 <icmp_send_response+0xd0>)
 800b02a:	f001 fa73 	bl	800c514 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	78fa      	ldrb	r2, [r7, #3]
 800b03e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	78ba      	ldrb	r2, [r7, #2]
 800b044:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2200      	movs	r2, #0
 800b04a:	711a      	strb	r2, [r3, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2200      	movs	r2, #0
 800b054:	719a      	strb	r2, [r3, #6]
 800b056:	2200      	movs	r2, #0
 800b058:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	f103 0008 	add.w	r0, r3, #8
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	221c      	movs	r2, #28
 800b068:	4619      	mov	r1, r3
 800b06a:	f001 fa40 	bl	800c4ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b074:	f107 030c 	add.w	r3, r7, #12
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 f825 	bl	800b0c8 <ip4_route>
 800b07e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d011      	beq.n	800b0aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	2200      	movs	r2, #0
 800b08a:	709a      	strb	r2, [r3, #2]
 800b08c:	2200      	movs	r2, #0
 800b08e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b090:	f107 020c 	add.w	r2, r7, #12
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	9302      	str	r3, [sp, #8]
 800b098:	2301      	movs	r3, #1
 800b09a:	9301      	str	r3, [sp, #4]
 800b09c:	2300      	movs	r3, #0
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	23ff      	movs	r3, #255	; 0xff
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	69f8      	ldr	r0, [r7, #28]
 800b0a6:	f000 f9cb 	bl	800b440 <ip4_output_if>
  }
  pbuf_free(q);
 800b0aa:	69f8      	ldr	r0, [r7, #28]
 800b0ac:	f7f9 f88a 	bl	80041c4 <pbuf_free>
 800b0b0:	e000      	b.n	800b0b4 <icmp_send_response+0xc0>
    return;
 800b0b2:	bf00      	nop
}
 800b0b4:	3720      	adds	r7, #32
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	0800f900 	.word	0x0800f900
 800b0c0:	0800f9cc 	.word	0x0800f9cc
 800b0c4:	0800f970 	.word	0x0800f970

0800b0c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b0d0:	4b33      	ldr	r3, [pc, #204]	; (800b1a0 <ip4_route+0xd8>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	e036      	b.n	800b146 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d02b      	beq.n	800b140 <ip4_route+0x78>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b0ee:	089b      	lsrs	r3, r3, #2
 800b0f0:	f003 0301 	and.w	r3, r3, #1
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d022      	beq.n	800b140 <ip4_route+0x78>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d01d      	beq.n	800b140 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3304      	adds	r3, #4
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	405a      	eors	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	3308      	adds	r3, #8
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4013      	ands	r3, r2
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	e038      	b.n	800b192 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b126:	f003 0302 	and.w	r3, r3, #2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d108      	bne.n	800b140 <ip4_route+0x78>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	330c      	adds	r3, #12
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d101      	bne.n	800b140 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	e028      	b.n	800b192 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1c5      	bne.n	800b0d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b14c:	4b15      	ldr	r3, [pc, #84]	; (800b1a4 <ip4_route+0xdc>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d01a      	beq.n	800b18a <ip4_route+0xc2>
 800b154:	4b13      	ldr	r3, [pc, #76]	; (800b1a4 <ip4_route+0xdc>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	d012      	beq.n	800b18a <ip4_route+0xc2>
 800b164:	4b0f      	ldr	r3, [pc, #60]	; (800b1a4 <ip4_route+0xdc>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b16c:	f003 0304 	and.w	r3, r3, #4
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00a      	beq.n	800b18a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b174:	4b0b      	ldr	r3, [pc, #44]	; (800b1a4 <ip4_route+0xdc>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3304      	adds	r3, #4
 800b17a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d004      	beq.n	800b18a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b7f      	cmp	r3, #127	; 0x7f
 800b188:	d101      	bne.n	800b18e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b18a:	2300      	movs	r3, #0
 800b18c:	e001      	b.n	800b192 <ip4_route+0xca>
  }

  return netif_default;
 800b18e:	4b05      	ldr	r3, [pc, #20]	; (800b1a4 <ip4_route+0xdc>)
 800b190:	681b      	ldr	r3, [r3, #0]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	20006878 	.word	0x20006878
 800b1a4:	2000687c 	.word	0x2000687c

0800b1a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d016      	beq.n	800b1ee <ip4_input_accept+0x46>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d011      	beq.n	800b1ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <ip4_input_accept+0x50>)
 800b1cc:	695a      	ldr	r2, [r3, #20]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d008      	beq.n	800b1ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b1d8:	4b07      	ldr	r3, [pc, #28]	; (800b1f8 <ip4_input_accept+0x50>)
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	6879      	ldr	r1, [r7, #4]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 fa06 	bl	800b5f0 <ip4_addr_isbroadcast_u32>
 800b1e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e000      	b.n	800b1f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20003344 	.word	0x20003344

0800b1fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	091b      	lsrs	r3, r3, #4
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b04      	cmp	r3, #4
 800b216:	d004      	beq.n	800b222 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7f8 ffd3 	bl	80041c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	e105      	b.n	800b42e <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 030f 	and.w	r3, r3, #15
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	885b      	ldrh	r3, [r3, #2]
 800b236:	b29b      	uxth	r3, r3
 800b238:	4618      	mov	r0, r3
 800b23a:	f7f7 fd48 	bl	8002cce <lwip_htons>
 800b23e:	4603      	mov	r3, r0
 800b240:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	891b      	ldrh	r3, [r3, #8]
 800b246:	89ba      	ldrh	r2, [r7, #12]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d204      	bcs.n	800b256 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800b24c:	89bb      	ldrh	r3, [r7, #12]
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7f8 fe31 	bl	8003eb8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	895b      	ldrh	r3, [r3, #10]
 800b25a:	89fa      	ldrh	r2, [r7, #14]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d807      	bhi.n	800b270 <ip4_input+0x74>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	891b      	ldrh	r3, [r3, #8]
 800b264:	89ba      	ldrh	r2, [r7, #12]
 800b266:	429a      	cmp	r2, r3
 800b268:	d802      	bhi.n	800b270 <ip4_input+0x74>
 800b26a:	89fb      	ldrh	r3, [r7, #14]
 800b26c:	2b13      	cmp	r3, #19
 800b26e:	d804      	bhi.n	800b27a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7f8 ffa7 	bl	80041c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	e0d9      	b.n	800b42e <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	4a6e      	ldr	r2, [pc, #440]	; (800b438 <ip4_input+0x23c>)
 800b280:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	4a6c      	ldr	r2, [pc, #432]	; (800b438 <ip4_input+0x23c>)
 800b288:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b28a:	4b6b      	ldr	r3, [pc, #428]	; (800b438 <ip4_input+0x23c>)
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b292:	2be0      	cmp	r3, #224	; 0xe0
 800b294:	d112      	bne.n	800b2bc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b29c:	f003 0301 	and.w	r3, r3, #1
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d007      	beq.n	800b2b6 <ip4_input+0xba>
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <ip4_input+0xba>
      netif = inp;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	613b      	str	r3, [r7, #16]
 800b2b4:	e02a      	b.n	800b30c <ip4_input+0x110>
    } else {
      netif = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	613b      	str	r3, [r7, #16]
 800b2ba:	e027      	b.n	800b30c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800b2bc:	6838      	ldr	r0, [r7, #0]
 800b2be:	f7ff ff73 	bl	800b1a8 <ip4_input_accept>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <ip4_input+0xd2>
      netif = inp;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	e01e      	b.n	800b30c <ip4_input+0x110>
    } else {
      netif = NULL;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b2d2:	4b59      	ldr	r3, [pc, #356]	; (800b438 <ip4_input+0x23c>)
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	2b7f      	cmp	r3, #127	; 0x7f
 800b2da:	d017      	beq.n	800b30c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800b2dc:	4b57      	ldr	r3, [pc, #348]	; (800b43c <ip4_input+0x240>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	613b      	str	r3, [r7, #16]
 800b2e2:	e00e      	b.n	800b302 <ip4_input+0x106>
          if (netif == inp) {
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d006      	beq.n	800b2fa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800b2ec:	6938      	ldr	r0, [r7, #16]
 800b2ee:	f7ff ff5b 	bl	800b1a8 <ip4_input_accept>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d108      	bne.n	800b30a <ip4_input+0x10e>
 800b2f8:	e000      	b.n	800b2fc <ip4_input+0x100>
            continue;
 800b2fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	613b      	str	r3, [r7, #16]
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1ed      	bne.n	800b2e4 <ip4_input+0xe8>
 800b308:	e000      	b.n	800b30c <ip4_input+0x110>
            break;
 800b30a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b30c:	4b4a      	ldr	r3, [pc, #296]	; (800b438 <ip4_input+0x23c>)
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	4618      	mov	r0, r3
 800b314:	f000 f96c 	bl	800b5f0 <ip4_addr_isbroadcast_u32>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d105      	bne.n	800b32a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b31e:	4b46      	ldr	r3, [pc, #280]	; (800b438 <ip4_input+0x23c>)
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b326:	2be0      	cmp	r3, #224	; 0xe0
 800b328:	d104      	bne.n	800b334 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7f8 ff4a 	bl	80041c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	e07c      	b.n	800b42e <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d104      	bne.n	800b344 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7f8 ff42 	bl	80041c4 <pbuf_free>
    return ERR_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	e074      	b.n	800b42e <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	88db      	ldrh	r3, [r3, #6]
 800b348:	b29b      	uxth	r3, r3
 800b34a:	461a      	mov	r2, r3
 800b34c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b350:	4013      	ands	r3, r2
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00b      	beq.n	800b36e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fc90 	bl	800bc7c <ip4_reass>
 800b35c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <ip4_input+0x16c>
      return ERR_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	e062      	b.n	800b42e <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b36e:	4a32      	ldr	r2, [pc, #200]	; (800b438 <ip4_input+0x23c>)
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b374:	4a30      	ldr	r2, [pc, #192]	; (800b438 <ip4_input+0x23c>)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b37a:	4a2f      	ldr	r2, [pc, #188]	; (800b438 <ip4_input+0x23c>)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f003 030f 	and.w	r3, r3, #15
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	b29a      	uxth	r2, r3
 800b390:	4b29      	ldr	r3, [pc, #164]	; (800b438 <ip4_input+0x23c>)
 800b392:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b394:	89fb      	ldrh	r3, [r7, #14]
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7f8 fe8d 	bl	80040b8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	7a5b      	ldrb	r3, [r3, #9]
 800b3a2:	2b06      	cmp	r3, #6
 800b3a4:	d009      	beq.n	800b3ba <ip4_input+0x1be>
 800b3a6:	2b11      	cmp	r3, #17
 800b3a8:	d002      	beq.n	800b3b0 <ip4_input+0x1b4>
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d00a      	beq.n	800b3c4 <ip4_input+0x1c8>
 800b3ae:	e00e      	b.n	800b3ce <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7fe fc6a 	bl	8009c8c <udp_input>
        break;
 800b3b8:	e026      	b.n	800b408 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7fa fd1d 	bl	8005dfc <tcp_input>
        break;
 800b3c2:	e021      	b.n	800b408 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7ff fcf0 	bl	800adac <icmp_input>
        break;
 800b3cc:	e01c      	b.n	800b408 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b3ce:	4b1a      	ldr	r3, [pc, #104]	; (800b438 <ip4_input+0x23c>)
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	6939      	ldr	r1, [r7, #16]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 f90b 	bl	800b5f0 <ip4_addr_isbroadcast_u32>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10f      	bne.n	800b400 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b3e0:	4b15      	ldr	r3, [pc, #84]	; (800b438 <ip4_input+0x23c>)
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b3e8:	2be0      	cmp	r3, #224	; 0xe0
 800b3ea:	d009      	beq.n	800b400 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800b3ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7f8 fed3 	bl	800419e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b3f8:	2102      	movs	r1, #2
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fdda 	bl	800afb4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7f8 fedf 	bl	80041c4 <pbuf_free>
        break;
 800b406:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b408:	4b0b      	ldr	r3, [pc, #44]	; (800b438 <ip4_input+0x23c>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b40e:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <ip4_input+0x23c>)
 800b410:	2200      	movs	r2, #0
 800b412:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b414:	4b08      	ldr	r3, [pc, #32]	; (800b438 <ip4_input+0x23c>)
 800b416:	2200      	movs	r2, #0
 800b418:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b41a:	4b07      	ldr	r3, [pc, #28]	; (800b438 <ip4_input+0x23c>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <ip4_input+0x23c>)
 800b422:	2200      	movs	r2, #0
 800b424:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b426:	4b04      	ldr	r3, [pc, #16]	; (800b438 <ip4_input+0x23c>)
 800b428:	2200      	movs	r2, #0
 800b42a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3718      	adds	r7, #24
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	20003344 	.word	0x20003344
 800b43c:	20006878 	.word	0x20006878

0800b440 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08a      	sub	sp, #40	; 0x28
 800b444:	af04      	add	r7, sp, #16
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d009      	beq.n	800b46c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d003      	beq.n	800b466 <ip4_output_if+0x26>
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d102      	bne.n	800b46c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b468:	3304      	adds	r3, #4
 800b46a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b46c:	78fa      	ldrb	r2, [r7, #3]
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	9302      	str	r3, [sp, #8]
 800b472:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	4613      	mov	r3, r2
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6979      	ldr	r1, [r7, #20]
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f000 f805 	bl	800b494 <ip4_output_if_src>
 800b48a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	7b9b      	ldrb	r3, [r3, #14]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d006      	beq.n	800b4b8 <ip4_output_if_src+0x24>
 800b4aa:	4b4b      	ldr	r3, [pc, #300]	; (800b5d8 <ip4_output_if_src+0x144>)
 800b4ac:	f44f 7255 	mov.w	r2, #852	; 0x354
 800b4b0:	494a      	ldr	r1, [pc, #296]	; (800b5dc <ip4_output_if_src+0x148>)
 800b4b2:	484b      	ldr	r0, [pc, #300]	; (800b5e0 <ip4_output_if_src+0x14c>)
 800b4b4:	f001 f82e 	bl	800c514 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d060      	beq.n	800b580 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b4be:	2314      	movs	r3, #20
 800b4c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800b4c2:	2114      	movs	r1, #20
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f7f8 fde7 	bl	8004098 <pbuf_add_header>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b4d0:	f06f 0301 	mvn.w	r3, #1
 800b4d4:	e07c      	b.n	800b5d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	895b      	ldrh	r3, [r3, #10]
 800b4e0:	2b13      	cmp	r3, #19
 800b4e2:	d806      	bhi.n	800b4f2 <ip4_output_if_src+0x5e>
 800b4e4:	4b3c      	ldr	r3, [pc, #240]	; (800b5d8 <ip4_output_if_src+0x144>)
 800b4e6:	f240 3289 	movw	r2, #905	; 0x389
 800b4ea:	493e      	ldr	r1, [pc, #248]	; (800b5e4 <ip4_output_if_src+0x150>)
 800b4ec:	483c      	ldr	r0, [pc, #240]	; (800b5e0 <ip4_output_if_src+0x14c>)
 800b4ee:	f001 f811 	bl	800c514 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	78fa      	ldrb	r2, [r7, #3]
 800b4f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b4fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b508:	8b7b      	ldrh	r3, [r7, #26]
 800b50a:	089b      	lsrs	r3, r3, #2
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b514:	b2da      	uxtb	r2, r3
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b520:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	891b      	ldrh	r3, [r3, #8]
 800b526:	4618      	mov	r0, r3
 800b528:	f7f7 fbd1 	bl	8002cce <lwip_htons>
 800b52c:	4603      	mov	r3, r0
 800b52e:	461a      	mov	r2, r3
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	2200      	movs	r2, #0
 800b538:	719a      	strb	r2, [r3, #6]
 800b53a:	2200      	movs	r2, #0
 800b53c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b53e:	4b2a      	ldr	r3, [pc, #168]	; (800b5e8 <ip4_output_if_src+0x154>)
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	4618      	mov	r0, r3
 800b544:	f7f7 fbc3 	bl	8002cce <lwip_htons>
 800b548:	4603      	mov	r3, r0
 800b54a:	461a      	mov	r2, r3
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b550:	4b25      	ldr	r3, [pc, #148]	; (800b5e8 <ip4_output_if_src+0x154>)
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	4b23      	ldr	r3, [pc, #140]	; (800b5e8 <ip4_output_if_src+0x154>)
 800b55a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d104      	bne.n	800b56c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b562:	4b22      	ldr	r3, [pc, #136]	; (800b5ec <ip4_output_if_src+0x158>)
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	60da      	str	r2, [r3, #12]
 800b56a:	e003      	b.n	800b574 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	2200      	movs	r2, #0
 800b578:	729a      	strb	r2, [r3, #10]
 800b57a:	2200      	movs	r2, #0
 800b57c:	72da      	strb	r2, [r3, #11]
 800b57e:	e00f      	b.n	800b5a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	895b      	ldrh	r3, [r3, #10]
 800b584:	2b13      	cmp	r3, #19
 800b586:	d802      	bhi.n	800b58e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b588:	f06f 0301 	mvn.w	r3, #1
 800b58c:	e020      	b.n	800b5d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b59a:	f107 0314 	add.w	r3, r7, #20
 800b59e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	8c1b      	ldrh	r3, [r3, #32]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00c      	beq.n	800b5c2 <ip4_output_if_src+0x12e>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	891a      	ldrh	r2, [r3, #8]
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	8c1b      	ldrh	r3, [r3, #32]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d906      	bls.n	800b5c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 fd4b 	bl	800c054 <ip4_frag>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	e006      	b.n	800b5d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	695b      	ldr	r3, [r3, #20]
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	68f9      	ldr	r1, [r7, #12]
 800b5ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5cc:	4798      	blx	r3
 800b5ce:	4603      	mov	r3, r0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3720      	adds	r7, #32
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	0800f9f8 	.word	0x0800f9f8
 800b5dc:	0800fa2c 	.word	0x0800fa2c
 800b5e0:	0800fa38 	.word	0x0800fa38
 800b5e4:	0800fa60 	.word	0x0800fa60
 800b5e8:	200001fe 	.word	0x200001fe
 800b5ec:	0800fe2c 	.word	0x0800fe2c

0800b5f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b604:	d002      	beq.n	800b60c <ip4_addr_isbroadcast_u32+0x1c>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e02a      	b.n	800b666 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b616:	f003 0302 	and.w	r3, r3, #2
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	e021      	b.n	800b666 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	3304      	adds	r3, #4
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d101      	bne.n	800b632 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	e019      	b.n	800b666 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	3304      	adds	r3, #4
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	405a      	eors	r2, r3
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	3308      	adds	r3, #8
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4013      	ands	r3, r2
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10d      	bne.n	800b664 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	3308      	adds	r3, #8
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	43da      	mvns	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	3308      	adds	r3, #8
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d101      	bne.n	800b664 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b660:	2301      	movs	r3, #1
 800b662:	e000      	b.n	800b666 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b664:	2300      	movs	r3, #0
  }
}
 800b666:	4618      	mov	r0, r3
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
	...

0800b674 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b67e:	4b12      	ldr	r3, [pc, #72]	; (800b6c8 <ip_reass_tmr+0x54>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b684:	e018      	b.n	800b6b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	7fdb      	ldrb	r3, [r3, #31]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00b      	beq.n	800b6a6 <ip_reass_tmr+0x32>
      r->timer--;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	7fdb      	ldrb	r3, [r3, #31]
 800b692:	3b01      	subs	r3, #1
 800b694:	b2da      	uxtb	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	60fb      	str	r3, [r7, #12]
 800b6a4:	e008      	b.n	800b6b8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b6b0:	68b9      	ldr	r1, [r7, #8]
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f80a 	bl	800b6cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1e3      	bne.n	800b686 <ip_reass_tmr+0x12>
    }
  }
}
 800b6be:	bf00      	nop
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20000200 	.word	0x20000200

0800b6cc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b088      	sub	sp, #32
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d105      	bne.n	800b6ee <ip_reass_free_complete_datagram+0x22>
 800b6e2:	4b45      	ldr	r3, [pc, #276]	; (800b7f8 <ip_reass_free_complete_datagram+0x12c>)
 800b6e4:	22ab      	movs	r2, #171	; 0xab
 800b6e6:	4945      	ldr	r1, [pc, #276]	; (800b7fc <ip_reass_free_complete_datagram+0x130>)
 800b6e8:	4845      	ldr	r0, [pc, #276]	; (800b800 <ip_reass_free_complete_datagram+0x134>)
 800b6ea:	f000 ff13 	bl	800c514 <iprintf>
  if (prev != NULL) {
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00a      	beq.n	800b70a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d005      	beq.n	800b70a <ip_reass_free_complete_datagram+0x3e>
 800b6fe:	4b3e      	ldr	r3, [pc, #248]	; (800b7f8 <ip_reass_free_complete_datagram+0x12c>)
 800b700:	22ad      	movs	r2, #173	; 0xad
 800b702:	4940      	ldr	r1, [pc, #256]	; (800b804 <ip_reass_free_complete_datagram+0x138>)
 800b704:	483e      	ldr	r0, [pc, #248]	; (800b800 <ip_reass_free_complete_datagram+0x134>)
 800b706:	f000 ff05 	bl	800c514 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	889b      	ldrh	r3, [r3, #4]
 800b716:	b29b      	uxth	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d12a      	bne.n	800b772 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	6858      	ldr	r0, [r3, #4]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3308      	adds	r3, #8
 800b732:	2214      	movs	r2, #20
 800b734:	4619      	mov	r1, r3
 800b736:	f000 feda 	bl	800c4ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b73a:	2101      	movs	r1, #1
 800b73c:	69b8      	ldr	r0, [r7, #24]
 800b73e:	f7ff fc49 	bl	800afd4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b742:	69b8      	ldr	r0, [r7, #24]
 800b744:	f7f8 fdc6 	bl	80042d4 <pbuf_clen>
 800b748:	4603      	mov	r3, r0
 800b74a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b74c:	8bfa      	ldrh	r2, [r7, #30]
 800b74e:	8a7b      	ldrh	r3, [r7, #18]
 800b750:	4413      	add	r3, r2
 800b752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b756:	db05      	blt.n	800b764 <ip_reass_free_complete_datagram+0x98>
 800b758:	4b27      	ldr	r3, [pc, #156]	; (800b7f8 <ip_reass_free_complete_datagram+0x12c>)
 800b75a:	22bc      	movs	r2, #188	; 0xbc
 800b75c:	492a      	ldr	r1, [pc, #168]	; (800b808 <ip_reass_free_complete_datagram+0x13c>)
 800b75e:	4828      	ldr	r0, [pc, #160]	; (800b800 <ip_reass_free_complete_datagram+0x134>)
 800b760:	f000 fed8 	bl	800c514 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b764:	8bfa      	ldrh	r2, [r7, #30]
 800b766:	8a7b      	ldrh	r3, [r7, #18]
 800b768:	4413      	add	r3, r2
 800b76a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800b76c:	69b8      	ldr	r0, [r7, #24]
 800b76e:	f7f8 fd29 	bl	80041c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800b778:	e01f      	b.n	800b7ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f7f8 fda2 	bl	80042d4 <pbuf_clen>
 800b790:	4603      	mov	r3, r0
 800b792:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b794:	8bfa      	ldrh	r2, [r7, #30]
 800b796:	8a7b      	ldrh	r3, [r7, #18]
 800b798:	4413      	add	r3, r2
 800b79a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b79e:	db05      	blt.n	800b7ac <ip_reass_free_complete_datagram+0xe0>
 800b7a0:	4b15      	ldr	r3, [pc, #84]	; (800b7f8 <ip_reass_free_complete_datagram+0x12c>)
 800b7a2:	22cc      	movs	r2, #204	; 0xcc
 800b7a4:	4918      	ldr	r1, [pc, #96]	; (800b808 <ip_reass_free_complete_datagram+0x13c>)
 800b7a6:	4816      	ldr	r0, [pc, #88]	; (800b800 <ip_reass_free_complete_datagram+0x134>)
 800b7a8:	f000 feb4 	bl	800c514 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b7ac:	8bfa      	ldrh	r2, [r7, #30]
 800b7ae:	8a7b      	ldrh	r3, [r7, #18]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f7f8 fd05 	bl	80041c4 <pbuf_free>
  while (p != NULL) {
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1dc      	bne.n	800b77a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b7c0:	6839      	ldr	r1, [r7, #0]
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f8c2 	bl	800b94c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800b7c8:	4b10      	ldr	r3, [pc, #64]	; (800b80c <ip_reass_free_complete_datagram+0x140>)
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	8bfa      	ldrh	r2, [r7, #30]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d905      	bls.n	800b7de <ip_reass_free_complete_datagram+0x112>
 800b7d2:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <ip_reass_free_complete_datagram+0x12c>)
 800b7d4:	22d2      	movs	r2, #210	; 0xd2
 800b7d6:	490e      	ldr	r1, [pc, #56]	; (800b810 <ip_reass_free_complete_datagram+0x144>)
 800b7d8:	4809      	ldr	r0, [pc, #36]	; (800b800 <ip_reass_free_complete_datagram+0x134>)
 800b7da:	f000 fe9b 	bl	800c514 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800b7de:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <ip_reass_free_complete_datagram+0x140>)
 800b7e0:	881a      	ldrh	r2, [r3, #0]
 800b7e2:	8bfb      	ldrh	r3, [r7, #30]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	4b08      	ldr	r3, [pc, #32]	; (800b80c <ip_reass_free_complete_datagram+0x140>)
 800b7ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b7ec:	8bfb      	ldrh	r3, [r7, #30]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3720      	adds	r7, #32
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0800fa90 	.word	0x0800fa90
 800b7fc:	0800facc 	.word	0x0800facc
 800b800:	0800fad8 	.word	0x0800fad8
 800b804:	0800fb00 	.word	0x0800fb00
 800b808:	0800fb14 	.word	0x0800fb14
 800b80c:	20000204 	.word	0x20000204
 800b810:	0800fb34 	.word	0x0800fb34

0800b814 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b08a      	sub	sp, #40	; 0x28
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800b81e:	2300      	movs	r3, #0
 800b820:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800b826:	2300      	movs	r3, #0
 800b828:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800b832:	4b28      	ldr	r3, [pc, #160]	; (800b8d4 <ip_reass_remove_oldest_datagram+0xc0>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b838:	e030      	b.n	800b89c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	695a      	ldr	r2, [r3, #20]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	429a      	cmp	r2, r3
 800b844:	d10c      	bne.n	800b860 <ip_reass_remove_oldest_datagram+0x4c>
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	699a      	ldr	r2, [r3, #24]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d106      	bne.n	800b860 <ip_reass_remove_oldest_datagram+0x4c>
 800b852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b854:	899a      	ldrh	r2, [r3, #12]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	889b      	ldrh	r3, [r3, #4]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d014      	beq.n	800b88a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	3301      	adds	r3, #1
 800b864:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d104      	bne.n	800b876 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	61bb      	str	r3, [r7, #24]
 800b874:	e009      	b.n	800b88a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	7fda      	ldrb	r2, [r3, #31]
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	7fdb      	ldrb	r3, [r3, #31]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d803      	bhi.n	800b88a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b884:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1cb      	bne.n	800b83a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d008      	beq.n	800b8ba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b8a8:	69b9      	ldr	r1, [r7, #24]
 800b8aa:	6a38      	ldr	r0, [r7, #32]
 800b8ac:	f7ff ff0e 	bl	800b6cc <ip_reass_free_complete_datagram>
 800b8b0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	da02      	bge.n	800b8c8 <ip_reass_remove_oldest_datagram+0xb4>
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	dcac      	bgt.n	800b822 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800b8c8:	697b      	ldr	r3, [r7, #20]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3728      	adds	r7, #40	; 0x28
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20000200 	.word	0x20000200

0800b8d8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b8e2:	2004      	movs	r0, #4
 800b8e4:	f7f7 fe48 	bl	8003578 <memp_malloc>
 800b8e8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d110      	bne.n	800b912 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff ff8e 	bl	800b814 <ip_reass_remove_oldest_datagram>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	dc03      	bgt.n	800b908 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b900:	2004      	movs	r0, #4
 800b902:	f7f7 fe39 	bl	8003578 <memp_malloc>
 800b906:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	e016      	b.n	800b940 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b912:	2220      	movs	r2, #32
 800b914:	2100      	movs	r1, #0
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f000 fdf4 	bl	800c504 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	220f      	movs	r2, #15
 800b920:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800b922:	4b09      	ldr	r3, [pc, #36]	; (800b948 <ip_reass_enqueue_new_datagram+0x70>)
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800b92a:	4a07      	ldr	r2, [pc, #28]	; (800b948 <ip_reass_enqueue_new_datagram+0x70>)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3308      	adds	r3, #8
 800b934:	2214      	movs	r2, #20
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 fdd8 	bl	800c4ee <memcpy>
  return ipr;
 800b93e:	68fb      	ldr	r3, [r7, #12]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	20000200 	.word	0x20000200

0800b94c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b956:	4b10      	ldr	r3, [pc, #64]	; (800b998 <ip_reass_dequeue_datagram+0x4c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d104      	bne.n	800b96a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a0c      	ldr	r2, [pc, #48]	; (800b998 <ip_reass_dequeue_datagram+0x4c>)
 800b966:	6013      	str	r3, [r2, #0]
 800b968:	e00d      	b.n	800b986 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <ip_reass_dequeue_datagram+0x32>
 800b970:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <ip_reass_dequeue_datagram+0x50>)
 800b972:	f240 1245 	movw	r2, #325	; 0x145
 800b976:	490a      	ldr	r1, [pc, #40]	; (800b9a0 <ip_reass_dequeue_datagram+0x54>)
 800b978:	480a      	ldr	r0, [pc, #40]	; (800b9a4 <ip_reass_dequeue_datagram+0x58>)
 800b97a:	f000 fdcb 	bl	800c514 <iprintf>
    prev->next = ipr->next;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	2004      	movs	r0, #4
 800b98a:	f7f7 fe41 	bl	8003610 <memp_free>
}
 800b98e:	bf00      	nop
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20000200 	.word	0x20000200
 800b99c:	0800fa90 	.word	0x0800fa90
 800b9a0:	0800fb58 	.word	0x0800fb58
 800b9a4:	0800fad8 	.word	0x0800fad8

0800b9a8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08c      	sub	sp, #48	; 0x30
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	885b      	ldrh	r3, [r3, #2]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7f7 f980 	bl	8002cce <lwip_htons>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	f003 030f 	and.w	r3, r3, #15
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800b9e0:	7e7b      	ldrb	r3, [r7, #25]
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	8b7a      	ldrh	r2, [r7, #26]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d202      	bcs.n	800b9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b9ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9ee:	e135      	b.n	800bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800b9f0:	7e7b      	ldrb	r3, [r7, #25]
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	8b7a      	ldrh	r2, [r7, #26]
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	88db      	ldrh	r3, [r3, #6]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7f7 f964 	bl	8002cce <lwip_htons>
 800ba06:	4603      	mov	r3, r0
 800ba08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ba18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	705a      	strb	r2, [r3, #1]
 800ba22:	2200      	movs	r2, #0
 800ba24:	709a      	strb	r2, [r3, #2]
 800ba26:	2200      	movs	r2, #0
 800ba28:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ba2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2c:	8afa      	ldrh	r2, [r7, #22]
 800ba2e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ba30:	8afa      	ldrh	r2, [r7, #22]
 800ba32:	8b7b      	ldrh	r3, [r7, #26]
 800ba34:	4413      	add	r3, r2
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3e:	88db      	ldrh	r3, [r3, #6]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	8afa      	ldrh	r2, [r7, #22]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d902      	bls.n	800ba4e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ba48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba4c:	e106      	b.n	800bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	627b      	str	r3, [r7, #36]	; 0x24
 800ba54:	e068      	b.n	800bb28 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	889b      	ldrh	r3, [r3, #4]
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	889b      	ldrh	r3, [r3, #4]
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d235      	bcs.n	800bad8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba70:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d020      	beq.n	800baba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ba78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7a:	889b      	ldrh	r3, [r3, #4]
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	88db      	ldrh	r3, [r3, #6]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d307      	bcc.n	800ba98 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ba88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8a:	88db      	ldrh	r3, [r3, #6]
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	889b      	ldrh	r3, [r3, #4]
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d902      	bls.n	800ba9e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ba98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba9c:	e0de      	b.n	800bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	88db      	ldrh	r3, [r3, #6]
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baac:	889b      	ldrh	r3, [r3, #4]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d03d      	beq.n	800bb30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800bab8:	e03a      	b.n	800bb30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	88db      	ldrh	r3, [r3, #6]
 800babe:	b29a      	uxth	r2, r3
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	889b      	ldrh	r3, [r3, #4]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d902      	bls.n	800bad0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800baca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bace:	e0c5      	b.n	800bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	605a      	str	r2, [r3, #4]
      break;
 800bad6:	e02b      	b.n	800bb30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800bad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bada:	889b      	ldrh	r3, [r3, #4]
 800badc:	b29a      	uxth	r2, r3
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	889b      	ldrh	r3, [r3, #4]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d102      	bne.n	800baee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baec:	e0b6      	b.n	800bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800baee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf0:	889b      	ldrh	r3, [r3, #4]
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	88db      	ldrh	r3, [r3, #6]
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d202      	bcs.n	800bb04 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bafe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb02:	e0ab      	b.n	800bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800bb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d009      	beq.n	800bb1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800bb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0c:	88db      	ldrh	r3, [r3, #6]
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	889b      	ldrh	r3, [r3, #4]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d001      	beq.n	800bb1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d193      	bne.n	800ba56 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800bb2e:	e000      	b.n	800bb32 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800bb30:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800bb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d12d      	bne.n	800bb94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d01c      	beq.n	800bb78 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb40:	88db      	ldrh	r3, [r3, #6]
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb46:	889b      	ldrh	r3, [r3, #4]
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d906      	bls.n	800bb5c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800bb4e:	4b45      	ldr	r3, [pc, #276]	; (800bc64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bb50:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800bb54:	4944      	ldr	r1, [pc, #272]	; (800bc68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800bb56:	4845      	ldr	r0, [pc, #276]	; (800bc6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bb58:	f000 fcdc 	bl	800c514 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800bb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb64:	88db      	ldrh	r3, [r3, #6]
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	889b      	ldrh	r3, [r3, #4]
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d010      	beq.n	800bb94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	623b      	str	r3, [r7, #32]
 800bb76:	e00d      	b.n	800bb94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d006      	beq.n	800bb8e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800bb80:	4b38      	ldr	r3, [pc, #224]	; (800bc64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bb82:	f240 12bf 	movw	r2, #447	; 0x1bf
 800bb86:	493a      	ldr	r1, [pc, #232]	; (800bc70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800bb88:	4838      	ldr	r0, [pc, #224]	; (800bc6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bb8a:	f000 fcc3 	bl	800c514 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d105      	bne.n	800bba6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	7f9b      	ldrb	r3, [r3, #30]
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d059      	beq.n	800bc5a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d04f      	beq.n	800bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d006      	beq.n	800bbc2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	889b      	ldrh	r3, [r3, #4]
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d002      	beq.n	800bbc8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	623b      	str	r3, [r7, #32]
 800bbc6:	e041      	b.n	800bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800bbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bbd2:	e012      	b.n	800bbfa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800bbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbdc:	88db      	ldrh	r3, [r3, #6]
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe2:	889b      	ldrh	r3, [r3, #4]
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d002      	beq.n	800bbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	623b      	str	r3, [r7, #32]
            break;
 800bbee:	e007      	b.n	800bc00 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800bbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800bbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1e9      	bne.n	800bbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d022      	beq.n	800bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800bc0e:	4b15      	ldr	r3, [pc, #84]	; (800bc64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bc10:	f240 12df 	movw	r2, #479	; 0x1df
 800bc14:	4917      	ldr	r1, [pc, #92]	; (800bc74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bc16:	4815      	ldr	r0, [pc, #84]	; (800bc6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bc18:	f000 fc7c 	bl	800c514 <iprintf>
          LWIP_ASSERT("sanity check",
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d106      	bne.n	800bc36 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800bc28:	4b0e      	ldr	r3, [pc, #56]	; (800bc64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bc2a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bc2e:	4911      	ldr	r1, [pc, #68]	; (800bc74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bc30:	480e      	ldr	r0, [pc, #56]	; (800bc6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bc32:	f000 fc6f 	bl	800c514 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800bc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d006      	beq.n	800bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800bc3e:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bc40:	f240 12e3 	movw	r2, #483	; 0x1e3
 800bc44:	490c      	ldr	r1, [pc, #48]	; (800bc78 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800bc46:	4809      	ldr	r0, [pc, #36]	; (800bc6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bc48:	f000 fc64 	bl	800c514 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bf14      	ite	ne
 800bc52:	2301      	movne	r3, #1
 800bc54:	2300      	moveq	r3, #0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	e000      	b.n	800bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3730      	adds	r7, #48	; 0x30
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	0800fa90 	.word	0x0800fa90
 800bc68:	0800fb74 	.word	0x0800fb74
 800bc6c:	0800fad8 	.word	0x0800fad8
 800bc70:	0800fb94 	.word	0x0800fb94
 800bc74:	0800fbcc 	.word	0x0800fbcc
 800bc78:	0800fbdc 	.word	0x0800fbdc

0800bc7c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b08e      	sub	sp, #56	; 0x38
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	f003 030f 	and.w	r3, r3, #15
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b14      	cmp	r3, #20
 800bc9a:	f040 8167 	bne.w	800bf6c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	88db      	ldrh	r3, [r3, #6]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7f7 f812 	bl	8002cce <lwip_htons>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	885b      	ldrh	r3, [r3, #2]
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7f7 f806 	bl	8002cce <lwip_htons>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800bcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	f003 030f 	and.w	r3, r3, #15
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800bcd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bcde:	429a      	cmp	r2, r3
 800bce0:	f0c0 8146 	bcc.w	800bf70 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800bce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7f8 faef 	bl	80042d4 <pbuf_clen>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800bcfa:	4ba3      	ldr	r3, [pc, #652]	; (800bf88 <ip4_reass+0x30c>)
 800bcfc:	881b      	ldrh	r3, [r3, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	8c3b      	ldrh	r3, [r7, #32]
 800bd02:	4413      	add	r3, r2
 800bd04:	2b0a      	cmp	r3, #10
 800bd06:	dd10      	ble.n	800bd2a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bd08:	8c3b      	ldrh	r3, [r7, #32]
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd0e:	f7ff fd81 	bl	800b814 <ip_reass_remove_oldest_datagram>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 812d 	beq.w	800bf74 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800bd1a:	4b9b      	ldr	r3, [pc, #620]	; (800bf88 <ip4_reass+0x30c>)
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	8c3b      	ldrh	r3, [r7, #32]
 800bd22:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bd24:	2b0a      	cmp	r3, #10
 800bd26:	f300 8125 	bgt.w	800bf74 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bd2a:	4b98      	ldr	r3, [pc, #608]	; (800bf8c <ip4_reass+0x310>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	633b      	str	r3, [r7, #48]	; 0x30
 800bd30:	e015      	b.n	800bd5e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	695a      	ldr	r2, [r3, #20]
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d10c      	bne.n	800bd58 <ip4_reass+0xdc>
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	699a      	ldr	r2, [r3, #24]
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d106      	bne.n	800bd58 <ip4_reass+0xdc>
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	899a      	ldrh	r2, [r3, #12]
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	889b      	ldrh	r3, [r3, #4]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d006      	beq.n	800bd66 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	633b      	str	r3, [r7, #48]	; 0x30
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e6      	bne.n	800bd32 <ip4_reass+0xb6>
 800bd64:	e000      	b.n	800bd68 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800bd66:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800bd6e:	8c3b      	ldrh	r3, [r7, #32]
 800bd70:	4619      	mov	r1, r3
 800bd72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd74:	f7ff fdb0 	bl	800b8d8 <ip_reass_enqueue_new_datagram>
 800bd78:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d11c      	bne.n	800bdba <ip4_reass+0x13e>
      goto nullreturn;
 800bd80:	e0f9      	b.n	800bf76 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd84:	88db      	ldrh	r3, [r3, #6]
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7f6 ffa0 	bl	8002cce <lwip_htons>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d110      	bne.n	800bdba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800bd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9a:	89db      	ldrh	r3, [r3, #14]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7f6 ff96 	bl	8002cce <lwip_htons>
 800bda2:	4603      	mov	r3, r0
 800bda4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d006      	beq.n	800bdba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	3308      	adds	r3, #8
 800bdb0:	2214      	movs	r2, #20
 800bdb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 fb9a 	bl	800c4ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	88db      	ldrh	r3, [r3, #6]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	f003 0320 	and.w	r3, r3, #32
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	bf0c      	ite	eq
 800bdc8:	2301      	moveq	r3, #1
 800bdca:	2300      	movne	r3, #0
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00e      	beq.n	800bdf4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800bdd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bdd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdda:	4413      	add	r3, r2
 800bddc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800bdde:	8b7a      	ldrh	r2, [r7, #26]
 800bde0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bde2:	429a      	cmp	r2, r3
 800bde4:	f0c0 80a0 	bcc.w	800bf28 <ip4_reass+0x2ac>
 800bde8:	8b7b      	ldrh	r3, [r7, #26]
 800bdea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	f200 809a 	bhi.w	800bf28 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800bdf4:	69fa      	ldr	r2, [r7, #28]
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdfa:	f7ff fdd5 	bl	800b9a8 <ip_reass_chain_frag_into_datagram_and_validate>
 800bdfe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be06:	f000 8091 	beq.w	800bf2c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800be0a:	4b5f      	ldr	r3, [pc, #380]	; (800bf88 <ip4_reass+0x30c>)
 800be0c:	881a      	ldrh	r2, [r3, #0]
 800be0e:	8c3b      	ldrh	r3, [r7, #32]
 800be10:	4413      	add	r3, r2
 800be12:	b29a      	uxth	r2, r3
 800be14:	4b5c      	ldr	r3, [pc, #368]	; (800bf88 <ip4_reass+0x30c>)
 800be16:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00d      	beq.n	800be3a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800be1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800be20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be22:	4413      	add	r3, r2
 800be24:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	8a7a      	ldrh	r2, [r7, #18]
 800be2a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	7f9b      	ldrb	r3, [r3, #30]
 800be30:	f043 0301 	orr.w	r3, r3, #1
 800be34:	b2da      	uxtb	r2, r3
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d171      	bne.n	800bf24 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800be40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be42:	8b9b      	ldrh	r3, [r3, #28]
 800be44:	3314      	adds	r3, #20
 800be46:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800be48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	3308      	adds	r3, #8
 800be5e:	2214      	movs	r2, #20
 800be60:	4619      	mov	r1, r3
 800be62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be64:	f000 fb43 	bl	800c4ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800be68:	8a3b      	ldrh	r3, [r7, #16]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7f6 ff2f 	bl	8002cce <lwip_htons>
 800be70:	4603      	mov	r3, r0
 800be72:	461a      	mov	r2, r3
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	2200      	movs	r2, #0
 800be7c:	719a      	strb	r2, [r3, #6]
 800be7e:	2200      	movs	r2, #0
 800be80:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	2200      	movs	r2, #0
 800be86:	729a      	strb	r2, [r3, #10]
 800be88:	2200      	movs	r2, #0
 800be8a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800be92:	e00d      	b.n	800beb0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800be94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800be9a:	2114      	movs	r1, #20
 800be9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be9e:	f7f8 f90b 	bl	80040b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800bea2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7f8 fa4f 	bl	8004348 <pbuf_cat>
      r = iprh->next_pbuf;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800beb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1ee      	bne.n	800be94 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800beb6:	4b35      	ldr	r3, [pc, #212]	; (800bf8c <ip4_reass+0x310>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d102      	bne.n	800bec6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800bec0:	2300      	movs	r3, #0
 800bec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bec4:	e010      	b.n	800bee8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bec6:	4b31      	ldr	r3, [pc, #196]	; (800bf8c <ip4_reass+0x310>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800becc:	e007      	b.n	800bede <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800bece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d006      	beq.n	800bee6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1f4      	bne.n	800bece <ip4_reass+0x252>
 800bee4:	e000      	b.n	800bee8 <ip4_reass+0x26c>
          break;
 800bee6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800bee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800beea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beec:	f7ff fd2e 	bl	800b94c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7f8 f9ef 	bl	80042d4 <pbuf_clen>
 800bef6:	4603      	mov	r3, r0
 800bef8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800befa:	4b23      	ldr	r3, [pc, #140]	; (800bf88 <ip4_reass+0x30c>)
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	8c3a      	ldrh	r2, [r7, #32]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d906      	bls.n	800bf12 <ip4_reass+0x296>
 800bf04:	4b22      	ldr	r3, [pc, #136]	; (800bf90 <ip4_reass+0x314>)
 800bf06:	f240 229b 	movw	r2, #667	; 0x29b
 800bf0a:	4922      	ldr	r1, [pc, #136]	; (800bf94 <ip4_reass+0x318>)
 800bf0c:	4822      	ldr	r0, [pc, #136]	; (800bf98 <ip4_reass+0x31c>)
 800bf0e:	f000 fb01 	bl	800c514 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800bf12:	4b1d      	ldr	r3, [pc, #116]	; (800bf88 <ip4_reass+0x30c>)
 800bf14:	881a      	ldrh	r2, [r3, #0]
 800bf16:	8c3b      	ldrh	r3, [r7, #32]
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	4b1a      	ldr	r3, [pc, #104]	; (800bf88 <ip4_reass+0x30c>)
 800bf1e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	e02c      	b.n	800bf7e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800bf24:	2300      	movs	r3, #0
 800bf26:	e02a      	b.n	800bf7e <ip4_reass+0x302>

nullreturn_ipr:
 800bf28:	bf00      	nop
 800bf2a:	e000      	b.n	800bf2e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800bf2c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <ip4_reass+0x2c6>
 800bf34:	4b16      	ldr	r3, [pc, #88]	; (800bf90 <ip4_reass+0x314>)
 800bf36:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800bf3a:	4918      	ldr	r1, [pc, #96]	; (800bf9c <ip4_reass+0x320>)
 800bf3c:	4816      	ldr	r0, [pc, #88]	; (800bf98 <ip4_reass+0x31c>)
 800bf3e:	f000 fae9 	bl	800c514 <iprintf>
  if (ipr->p == NULL) {
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d114      	bne.n	800bf74 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800bf4a:	4b10      	ldr	r3, [pc, #64]	; (800bf8c <ip4_reass+0x310>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d006      	beq.n	800bf62 <ip4_reass+0x2e6>
 800bf54:	4b0e      	ldr	r3, [pc, #56]	; (800bf90 <ip4_reass+0x314>)
 800bf56:	f240 22ab 	movw	r2, #683	; 0x2ab
 800bf5a:	4911      	ldr	r1, [pc, #68]	; (800bfa0 <ip4_reass+0x324>)
 800bf5c:	480e      	ldr	r0, [pc, #56]	; (800bf98 <ip4_reass+0x31c>)
 800bf5e:	f000 fad9 	bl	800c514 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800bf62:	2100      	movs	r1, #0
 800bf64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf66:	f7ff fcf1 	bl	800b94c <ip_reass_dequeue_datagram>
 800bf6a:	e004      	b.n	800bf76 <ip4_reass+0x2fa>
    goto nullreturn;
 800bf6c:	bf00      	nop
 800bf6e:	e002      	b.n	800bf76 <ip4_reass+0x2fa>
    goto nullreturn;
 800bf70:	bf00      	nop
 800bf72:	e000      	b.n	800bf76 <ip4_reass+0x2fa>
  }

nullreturn:
 800bf74:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7f8 f924 	bl	80041c4 <pbuf_free>
  return NULL;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3738      	adds	r7, #56	; 0x38
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20000204 	.word	0x20000204
 800bf8c:	20000200 	.word	0x20000200
 800bf90:	0800fa90 	.word	0x0800fa90
 800bf94:	0800fc00 	.word	0x0800fc00
 800bf98:	0800fad8 	.word	0x0800fad8
 800bf9c:	0800fc1c 	.word	0x0800fc1c
 800bfa0:	0800fc28 	.word	0x0800fc28

0800bfa4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800bfa8:	2005      	movs	r0, #5
 800bfaa:	f7f7 fae5 	bl	8003578 <memp_malloc>
 800bfae:	4603      	mov	r3, r0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d106      	bne.n	800bfd0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800bfc2:	4b07      	ldr	r3, [pc, #28]	; (800bfe0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800bfc4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800bfc8:	4906      	ldr	r1, [pc, #24]	; (800bfe4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800bfca:	4807      	ldr	r0, [pc, #28]	; (800bfe8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800bfcc:	f000 faa2 	bl	800c514 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800bfd0:	6879      	ldr	r1, [r7, #4]
 800bfd2:	2005      	movs	r0, #5
 800bfd4:	f7f7 fb1c 	bl	8003610 <memp_free>
}
 800bfd8:	bf00      	nop
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	0800fa90 	.word	0x0800fa90
 800bfe4:	0800fc48 	.word	0x0800fc48
 800bfe8:	0800fad8 	.word	0x0800fad8

0800bfec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <ipfrag_free_pbuf_custom+0x20>
 800bffe:	4b11      	ldr	r3, [pc, #68]	; (800c044 <ipfrag_free_pbuf_custom+0x58>)
 800c000:	f240 22ce 	movw	r2, #718	; 0x2ce
 800c004:	4910      	ldr	r1, [pc, #64]	; (800c048 <ipfrag_free_pbuf_custom+0x5c>)
 800c006:	4811      	ldr	r0, [pc, #68]	; (800c04c <ipfrag_free_pbuf_custom+0x60>)
 800c008:	f000 fa84 	bl	800c514 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	429a      	cmp	r2, r3
 800c012:	d006      	beq.n	800c022 <ipfrag_free_pbuf_custom+0x36>
 800c014:	4b0b      	ldr	r3, [pc, #44]	; (800c044 <ipfrag_free_pbuf_custom+0x58>)
 800c016:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c01a:	490d      	ldr	r1, [pc, #52]	; (800c050 <ipfrag_free_pbuf_custom+0x64>)
 800c01c:	480b      	ldr	r0, [pc, #44]	; (800c04c <ipfrag_free_pbuf_custom+0x60>)
 800c01e:	f000 fa79 	bl	800c514 <iprintf>
  if (pcr->original != NULL) {
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d004      	beq.n	800c034 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	4618      	mov	r0, r3
 800c030:	f7f8 f8c8 	bl	80041c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff ffbd 	bl	800bfb4 <ip_frag_free_pbuf_custom_ref>
}
 800c03a:	bf00      	nop
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	0800fa90 	.word	0x0800fa90
 800c048:	0800fc54 	.word	0x0800fc54
 800c04c:	0800fad8 	.word	0x0800fad8
 800c050:	0800fc60 	.word	0x0800fc60

0800c054 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b094      	sub	sp, #80	; 0x50
 800c058:	af02      	add	r7, sp, #8
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c060:	2300      	movs	r3, #0
 800c062:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	8c1b      	ldrh	r3, [r3, #32]
 800c06a:	3b14      	subs	r3, #20
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	da00      	bge.n	800c072 <ip4_frag+0x1e>
 800c070:	3307      	adds	r3, #7
 800c072:	10db      	asrs	r3, r3, #3
 800c074:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c076:	2314      	movs	r3, #20
 800c078:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800c080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c082:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	f003 030f 	and.w	r3, r3, #15
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b14      	cmp	r3, #20
 800c094:	d002      	beq.n	800c09c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800c096:	f06f 0305 	mvn.w	r3, #5
 800c09a:	e10f      	b.n	800c2bc <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	895b      	ldrh	r3, [r3, #10]
 800c0a0:	2b13      	cmp	r3, #19
 800c0a2:	d809      	bhi.n	800c0b8 <ip4_frag+0x64>
 800c0a4:	4b87      	ldr	r3, [pc, #540]	; (800c2c4 <ip4_frag+0x270>)
 800c0a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800c0aa:	4987      	ldr	r1, [pc, #540]	; (800c2c8 <ip4_frag+0x274>)
 800c0ac:	4887      	ldr	r0, [pc, #540]	; (800c2cc <ip4_frag+0x278>)
 800c0ae:	f000 fa31 	bl	800c514 <iprintf>
 800c0b2:	f06f 0305 	mvn.w	r3, #5
 800c0b6:	e101      	b.n	800c2bc <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ba:	88db      	ldrh	r3, [r3, #6]
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7f6 fe05 	bl	8002cce <lwip_htons>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800c0c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c0d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	891b      	ldrh	r3, [r3, #8]
 800c0de:	3b14      	subs	r3, #20
 800c0e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800c0e4:	e0e0      	b.n	800c2a8 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c0e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	bf28      	it	cs
 800c0f4:	4613      	movcs	r3, r2
 800c0f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c0f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c0fc:	2114      	movs	r1, #20
 800c0fe:	200e      	movs	r0, #14
 800c100:	f7f7 fd80 	bl	8003c04 <pbuf_alloc>
 800c104:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 80d4 	beq.w	800c2b6 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	895b      	ldrh	r3, [r3, #10]
 800c112:	2b13      	cmp	r3, #19
 800c114:	d806      	bhi.n	800c124 <ip4_frag+0xd0>
 800c116:	4b6b      	ldr	r3, [pc, #428]	; (800c2c4 <ip4_frag+0x270>)
 800c118:	f240 3225 	movw	r2, #805	; 0x325
 800c11c:	496c      	ldr	r1, [pc, #432]	; (800c2d0 <ip4_frag+0x27c>)
 800c11e:	486b      	ldr	r0, [pc, #428]	; (800c2cc <ip4_frag+0x278>)
 800c120:	f000 f9f8 	bl	800c514 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	2214      	movs	r2, #20
 800c12a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c12c:	4618      	mov	r0, r3
 800c12e:	f000 f9de 	bl	800c4ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800c138:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c13a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800c13e:	e064      	b.n	800c20a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	895a      	ldrh	r2, [r3, #10]
 800c144:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	895b      	ldrh	r3, [r3, #10]
 800c14e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c150:	429a      	cmp	r2, r3
 800c152:	d906      	bls.n	800c162 <ip4_frag+0x10e>
 800c154:	4b5b      	ldr	r3, [pc, #364]	; (800c2c4 <ip4_frag+0x270>)
 800c156:	f240 322d 	movw	r2, #813	; 0x32d
 800c15a:	495e      	ldr	r1, [pc, #376]	; (800c2d4 <ip4_frag+0x280>)
 800c15c:	485b      	ldr	r0, [pc, #364]	; (800c2cc <ip4_frag+0x278>)
 800c15e:	f000 f9d9 	bl	800c514 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c162:	8bfa      	ldrh	r2, [r7, #30]
 800c164:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c168:	4293      	cmp	r3, r2
 800c16a:	bf28      	it	cs
 800c16c:	4613      	movcs	r3, r2
 800c16e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c172:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c176:	2b00      	cmp	r3, #0
 800c178:	d105      	bne.n	800c186 <ip4_frag+0x132>
        poff = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60fb      	str	r3, [r7, #12]
        continue;
 800c184:	e041      	b.n	800c20a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c186:	f7ff ff0d 	bl	800bfa4 <ip_frag_alloc_pbuf_custom_ref>
 800c18a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d103      	bne.n	800c19a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c194:	f7f8 f816 	bl	80041c4 <pbuf_free>
        goto memerr;
 800c198:	e08e      	b.n	800c2b8 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c19a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c1a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800c1a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c1ac:	9201      	str	r2, [sp, #4]
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2241      	movs	r2, #65	; 0x41
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	f7f7 fe4b 	bl	8003e50 <pbuf_alloced_custom>
 800c1ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d106      	bne.n	800c1d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c1c2:	69b8      	ldr	r0, [r7, #24]
 800c1c4:	f7ff fef6 	bl	800bfb4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c1c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1ca:	f7f7 fffb 	bl	80041c4 <pbuf_free>
        goto memerr;
 800c1ce:	e073      	b.n	800c2b8 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f7f8 f897 	bl	8004304 <pbuf_ref>
      pcr->original = p;
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	4a3e      	ldr	r2, [pc, #248]	; (800c2d8 <ip4_frag+0x284>)
 800c1e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c1e2:	6979      	ldr	r1, [r7, #20]
 800c1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1e6:	f7f8 f8af 	bl	8004348 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c1ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800c1ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800c1f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d004      	beq.n	800c20a <ip4_frag+0x1b6>
        poff = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c20a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d196      	bne.n	800c140 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c212:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c214:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c218:	4413      	add	r3, r2
 800c21a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c21c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	8c1b      	ldrh	r3, [r3, #32]
 800c224:	3b14      	subs	r3, #20
 800c226:	429a      	cmp	r2, r3
 800c228:	bfd4      	ite	le
 800c22a:	2301      	movle	r3, #1
 800c22c:	2300      	movgt	r3, #0
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c232:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c236:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c23a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800c23c:	6a3b      	ldr	r3, [r7, #32]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d002      	beq.n	800c248 <ip4_frag+0x1f4>
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c244:	2b00      	cmp	r3, #0
 800c246:	d003      	beq.n	800c250 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800c248:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c24a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c24e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c250:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c252:	4618      	mov	r0, r3
 800c254:	f7f6 fd3b 	bl	8002cce <lwip_htons>
 800c258:	4603      	mov	r3, r0
 800c25a:	461a      	mov	r2, r3
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c260:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c262:	3314      	adds	r3, #20
 800c264:	b29b      	uxth	r3, r3
 800c266:	4618      	mov	r0, r3
 800c268:	f7f6 fd31 	bl	8002cce <lwip_htons>
 800c26c:	4603      	mov	r3, r0
 800c26e:	461a      	mov	r2, r3
 800c270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c272:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	2200      	movs	r2, #0
 800c278:	729a      	strb	r2, [r3, #10]
 800c27a:	2200      	movs	r2, #0
 800c27c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	695b      	ldr	r3, [r3, #20]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c286:	68b8      	ldr	r0, [r7, #8]
 800c288:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c28a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c28c:	f7f7 ff9a 	bl	80041c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c290:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c294:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800c29c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c2a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c2a2:	4413      	add	r3, r2
 800c2a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800c2a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f47f af1a 	bne.w	800c0e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	e002      	b.n	800c2bc <ip4_frag+0x268>
      goto memerr;
 800c2b6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c2b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3748      	adds	r7, #72	; 0x48
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	0800fa90 	.word	0x0800fa90
 800c2c8:	0800fc6c 	.word	0x0800fc6c
 800c2cc:	0800fad8 	.word	0x0800fad8
 800c2d0:	0800fc88 	.word	0x0800fc88
 800c2d4:	0800fca8 	.word	0x0800fca8
 800c2d8:	0800bfed 	.word	0x0800bfed

0800c2dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800c2e6:	230e      	movs	r3, #14
 800c2e8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	895b      	ldrh	r3, [r3, #10]
 800c2ee:	2b0e      	cmp	r3, #14
 800c2f0:	d96e      	bls.n	800c3d0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	7bdb      	ldrb	r3, [r3, #15]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d106      	bne.n	800c308 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c300:	3301      	adds	r3, #1
 800c302:	b2da      	uxtb	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	7b1a      	ldrb	r2, [r3, #12]
 800c312:	7b5b      	ldrb	r3, [r3, #13]
 800c314:	021b      	lsls	r3, r3, #8
 800c316:	4313      	orrs	r3, r2
 800c318:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	d023      	beq.n	800c36e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d10f      	bne.n	800c34e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	785b      	ldrb	r3, [r3, #1]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d11b      	bne.n	800c36e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c33a:	2b5e      	cmp	r3, #94	; 0x5e
 800c33c:	d117      	bne.n	800c36e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	7b5b      	ldrb	r3, [r3, #13]
 800c342:	f043 0310 	orr.w	r3, r3, #16
 800c346:	b2da      	uxtb	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	735a      	strb	r2, [r3, #13]
 800c34c:	e00f      	b.n	800c36e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	2206      	movs	r2, #6
 800c352:	4928      	ldr	r1, [pc, #160]	; (800c3f4 <ethernet_input+0x118>)
 800c354:	4618      	mov	r0, r3
 800c356:	f000 f8bb 	bl	800c4d0 <memcmp>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d106      	bne.n	800c36e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	7b5b      	ldrb	r3, [r3, #13]
 800c364:	f043 0308 	orr.w	r3, r3, #8
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800c36e:	89fb      	ldrh	r3, [r7, #14]
 800c370:	2b08      	cmp	r3, #8
 800c372:	d003      	beq.n	800c37c <ethernet_input+0xa0>
 800c374:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800c378:	d014      	beq.n	800c3a4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800c37a:	e032      	b.n	800c3e2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c382:	f003 0308 	and.w	r3, r3, #8
 800c386:	2b00      	cmp	r3, #0
 800c388:	d024      	beq.n	800c3d4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c38a:	8afb      	ldrh	r3, [r7, #22]
 800c38c:	4619      	mov	r1, r3
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7f7 fe92 	bl	80040b8 <pbuf_remove_header>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d11e      	bne.n	800c3d8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7fe ff2d 	bl	800b1fc <ip4_input>
      break;
 800c3a2:	e013      	b.n	800c3cc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c3aa:	f003 0308 	and.w	r3, r3, #8
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d014      	beq.n	800c3dc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c3b2:	8afb      	ldrh	r3, [r7, #22]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f7f7 fe7e 	bl	80040b8 <pbuf_remove_header>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10e      	bne.n	800c3e0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7fe f8cd 	bl	800a564 <etharp_input>
      break;
 800c3ca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	e00c      	b.n	800c3ea <ethernet_input+0x10e>
    goto free_and_return;
 800c3d0:	bf00      	nop
 800c3d2:	e006      	b.n	800c3e2 <ethernet_input+0x106>
        goto free_and_return;
 800c3d4:	bf00      	nop
 800c3d6:	e004      	b.n	800c3e2 <ethernet_input+0x106>
        goto free_and_return;
 800c3d8:	bf00      	nop
 800c3da:	e002      	b.n	800c3e2 <ethernet_input+0x106>
        goto free_and_return;
 800c3dc:	bf00      	nop
 800c3de:	e000      	b.n	800c3e2 <ethernet_input+0x106>
        goto free_and_return;
 800c3e0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7f7 feee 	bl	80041c4 <pbuf_free>
  return ERR_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	0800fe30 	.word	0x0800fe30

0800c3f8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
 800c404:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800c406:	8c3b      	ldrh	r3, [r7, #32]
 800c408:	4618      	mov	r0, r3
 800c40a:	f7f6 fc60 	bl	8002cce <lwip_htons>
 800c40e:	4603      	mov	r3, r0
 800c410:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800c412:	210e      	movs	r1, #14
 800c414:	68b8      	ldr	r0, [r7, #8]
 800c416:	f7f7 fe3f 	bl	8004098 <pbuf_add_header>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d125      	bne.n	800c46c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	8afa      	ldrh	r2, [r7, #22]
 800c42a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	2206      	movs	r2, #6
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	4618      	mov	r0, r3
 800c434:	f000 f85b 	bl	800c4ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	3306      	adds	r3, #6
 800c43c:	2206      	movs	r2, #6
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	4618      	mov	r0, r3
 800c442:	f000 f854 	bl	800c4ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c44c:	2b06      	cmp	r3, #6
 800c44e:	d006      	beq.n	800c45e <ethernet_output+0x66>
 800c450:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <ethernet_output+0x84>)
 800c452:	f240 1233 	movw	r2, #307	; 0x133
 800c456:	490a      	ldr	r1, [pc, #40]	; (800c480 <ethernet_output+0x88>)
 800c458:	480a      	ldr	r0, [pc, #40]	; (800c484 <ethernet_output+0x8c>)
 800c45a:	f000 f85b 	bl	800c514 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	68b9      	ldr	r1, [r7, #8]
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	4798      	blx	r3
 800c468:	4603      	mov	r3, r0
 800c46a:	e002      	b.n	800c472 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800c46c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800c46e:	f06f 0301 	mvn.w	r3, #1
}
 800c472:	4618      	mov	r0, r3
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	0800fcb8 	.word	0x0800fcb8
 800c480:	0800fcf0 	.word	0x0800fcf0
 800c484:	0800fd24 	.word	0x0800fd24

0800c488 <__libc_init_array>:
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	4e0d      	ldr	r6, [pc, #52]	; (800c4c0 <__libc_init_array+0x38>)
 800c48c:	4c0d      	ldr	r4, [pc, #52]	; (800c4c4 <__libc_init_array+0x3c>)
 800c48e:	1ba4      	subs	r4, r4, r6
 800c490:	10a4      	asrs	r4, r4, #2
 800c492:	2500      	movs	r5, #0
 800c494:	42a5      	cmp	r5, r4
 800c496:	d109      	bne.n	800c4ac <__libc_init_array+0x24>
 800c498:	4e0b      	ldr	r6, [pc, #44]	; (800c4c8 <__libc_init_array+0x40>)
 800c49a:	4c0c      	ldr	r4, [pc, #48]	; (800c4cc <__libc_init_array+0x44>)
 800c49c:	f000 ff5a 	bl	800d354 <_init>
 800c4a0:	1ba4      	subs	r4, r4, r6
 800c4a2:	10a4      	asrs	r4, r4, #2
 800c4a4:	2500      	movs	r5, #0
 800c4a6:	42a5      	cmp	r5, r4
 800c4a8:	d105      	bne.n	800c4b6 <__libc_init_array+0x2e>
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}
 800c4ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4b0:	4798      	blx	r3
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	e7ee      	b.n	800c494 <__libc_init_array+0xc>
 800c4b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4ba:	4798      	blx	r3
 800c4bc:	3501      	adds	r5, #1
 800c4be:	e7f2      	b.n	800c4a6 <__libc_init_array+0x1e>
 800c4c0:	0800fee0 	.word	0x0800fee0
 800c4c4:	0800fee0 	.word	0x0800fee0
 800c4c8:	0800fee0 	.word	0x0800fee0
 800c4cc:	0800fee4 	.word	0x0800fee4

0800c4d0 <memcmp>:
 800c4d0:	b530      	push	{r4, r5, lr}
 800c4d2:	2400      	movs	r4, #0
 800c4d4:	42a2      	cmp	r2, r4
 800c4d6:	d101      	bne.n	800c4dc <memcmp+0xc>
 800c4d8:	2000      	movs	r0, #0
 800c4da:	e007      	b.n	800c4ec <memcmp+0x1c>
 800c4dc:	5d03      	ldrb	r3, [r0, r4]
 800c4de:	3401      	adds	r4, #1
 800c4e0:	190d      	adds	r5, r1, r4
 800c4e2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800c4e6:	42ab      	cmp	r3, r5
 800c4e8:	d0f4      	beq.n	800c4d4 <memcmp+0x4>
 800c4ea:	1b58      	subs	r0, r3, r5
 800c4ec:	bd30      	pop	{r4, r5, pc}

0800c4ee <memcpy>:
 800c4ee:	b510      	push	{r4, lr}
 800c4f0:	1e43      	subs	r3, r0, #1
 800c4f2:	440a      	add	r2, r1
 800c4f4:	4291      	cmp	r1, r2
 800c4f6:	d100      	bne.n	800c4fa <memcpy+0xc>
 800c4f8:	bd10      	pop	{r4, pc}
 800c4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c502:	e7f7      	b.n	800c4f4 <memcpy+0x6>

0800c504 <memset>:
 800c504:	4402      	add	r2, r0
 800c506:	4603      	mov	r3, r0
 800c508:	4293      	cmp	r3, r2
 800c50a:	d100      	bne.n	800c50e <memset+0xa>
 800c50c:	4770      	bx	lr
 800c50e:	f803 1b01 	strb.w	r1, [r3], #1
 800c512:	e7f9      	b.n	800c508 <memset+0x4>

0800c514 <iprintf>:
 800c514:	b40f      	push	{r0, r1, r2, r3}
 800c516:	4b0a      	ldr	r3, [pc, #40]	; (800c540 <iprintf+0x2c>)
 800c518:	b513      	push	{r0, r1, r4, lr}
 800c51a:	681c      	ldr	r4, [r3, #0]
 800c51c:	b124      	cbz	r4, 800c528 <iprintf+0x14>
 800c51e:	69a3      	ldr	r3, [r4, #24]
 800c520:	b913      	cbnz	r3, 800c528 <iprintf+0x14>
 800c522:	4620      	mov	r0, r4
 800c524:	f000 f882 	bl	800c62c <__sinit>
 800c528:	ab05      	add	r3, sp, #20
 800c52a:	9a04      	ldr	r2, [sp, #16]
 800c52c:	68a1      	ldr	r1, [r4, #8]
 800c52e:	9301      	str	r3, [sp, #4]
 800c530:	4620      	mov	r0, r4
 800c532:	f000 f9df 	bl	800c8f4 <_vfiprintf_r>
 800c536:	b002      	add	sp, #8
 800c538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c53c:	b004      	add	sp, #16
 800c53e:	4770      	bx	lr
 800c540:	20000014 	.word	0x20000014

0800c544 <rand>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4b13      	ldr	r3, [pc, #76]	; (800c594 <rand+0x50>)
 800c548:	681c      	ldr	r4, [r3, #0]
 800c54a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c54c:	b97b      	cbnz	r3, 800c56e <rand+0x2a>
 800c54e:	2018      	movs	r0, #24
 800c550:	f000 f8f6 	bl	800c740 <malloc>
 800c554:	4a10      	ldr	r2, [pc, #64]	; (800c598 <rand+0x54>)
 800c556:	4b11      	ldr	r3, [pc, #68]	; (800c59c <rand+0x58>)
 800c558:	63a0      	str	r0, [r4, #56]	; 0x38
 800c55a:	e9c0 2300 	strd	r2, r3, [r0]
 800c55e:	4b10      	ldr	r3, [pc, #64]	; (800c5a0 <rand+0x5c>)
 800c560:	6083      	str	r3, [r0, #8]
 800c562:	230b      	movs	r3, #11
 800c564:	8183      	strh	r3, [r0, #12]
 800c566:	2201      	movs	r2, #1
 800c568:	2300      	movs	r3, #0
 800c56a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c56e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c570:	480c      	ldr	r0, [pc, #48]	; (800c5a4 <rand+0x60>)
 800c572:	690a      	ldr	r2, [r1, #16]
 800c574:	694b      	ldr	r3, [r1, #20]
 800c576:	4c0c      	ldr	r4, [pc, #48]	; (800c5a8 <rand+0x64>)
 800c578:	4350      	muls	r0, r2
 800c57a:	fb04 0003 	mla	r0, r4, r3, r0
 800c57e:	fba2 2304 	umull	r2, r3, r2, r4
 800c582:	4403      	add	r3, r0
 800c584:	1c54      	adds	r4, r2, #1
 800c586:	f143 0500 	adc.w	r5, r3, #0
 800c58a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800c58e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800c592:	bd38      	pop	{r3, r4, r5, pc}
 800c594:	20000014 	.word	0x20000014
 800c598:	abcd330e 	.word	0xabcd330e
 800c59c:	e66d1234 	.word	0xe66d1234
 800c5a0:	0005deec 	.word	0x0005deec
 800c5a4:	5851f42d 	.word	0x5851f42d
 800c5a8:	4c957f2d 	.word	0x4c957f2d

0800c5ac <std>:
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	b510      	push	{r4, lr}
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c5b6:	6083      	str	r3, [r0, #8]
 800c5b8:	8181      	strh	r1, [r0, #12]
 800c5ba:	6643      	str	r3, [r0, #100]	; 0x64
 800c5bc:	81c2      	strh	r2, [r0, #14]
 800c5be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5c2:	6183      	str	r3, [r0, #24]
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	2208      	movs	r2, #8
 800c5c8:	305c      	adds	r0, #92	; 0x5c
 800c5ca:	f7ff ff9b 	bl	800c504 <memset>
 800c5ce:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <std+0x38>)
 800c5d0:	6263      	str	r3, [r4, #36]	; 0x24
 800c5d2:	4b05      	ldr	r3, [pc, #20]	; (800c5e8 <std+0x3c>)
 800c5d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5d6:	4b05      	ldr	r3, [pc, #20]	; (800c5ec <std+0x40>)
 800c5d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5da:	4b05      	ldr	r3, [pc, #20]	; (800c5f0 <std+0x44>)
 800c5dc:	6224      	str	r4, [r4, #32]
 800c5de:	6323      	str	r3, [r4, #48]	; 0x30
 800c5e0:	bd10      	pop	{r4, pc}
 800c5e2:	bf00      	nop
 800c5e4:	0800ce51 	.word	0x0800ce51
 800c5e8:	0800ce73 	.word	0x0800ce73
 800c5ec:	0800ceab 	.word	0x0800ceab
 800c5f0:	0800cecf 	.word	0x0800cecf

0800c5f4 <_cleanup_r>:
 800c5f4:	4901      	ldr	r1, [pc, #4]	; (800c5fc <_cleanup_r+0x8>)
 800c5f6:	f000 b885 	b.w	800c704 <_fwalk_reent>
 800c5fa:	bf00      	nop
 800c5fc:	0800d1a9 	.word	0x0800d1a9

0800c600 <__sfmoreglue>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	1e4a      	subs	r2, r1, #1
 800c604:	2568      	movs	r5, #104	; 0x68
 800c606:	4355      	muls	r5, r2
 800c608:	460e      	mov	r6, r1
 800c60a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c60e:	f000 f8ed 	bl	800c7ec <_malloc_r>
 800c612:	4604      	mov	r4, r0
 800c614:	b140      	cbz	r0, 800c628 <__sfmoreglue+0x28>
 800c616:	2100      	movs	r1, #0
 800c618:	e9c0 1600 	strd	r1, r6, [r0]
 800c61c:	300c      	adds	r0, #12
 800c61e:	60a0      	str	r0, [r4, #8]
 800c620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c624:	f7ff ff6e 	bl	800c504 <memset>
 800c628:	4620      	mov	r0, r4
 800c62a:	bd70      	pop	{r4, r5, r6, pc}

0800c62c <__sinit>:
 800c62c:	6983      	ldr	r3, [r0, #24]
 800c62e:	b510      	push	{r4, lr}
 800c630:	4604      	mov	r4, r0
 800c632:	bb33      	cbnz	r3, 800c682 <__sinit+0x56>
 800c634:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c638:	6503      	str	r3, [r0, #80]	; 0x50
 800c63a:	4b12      	ldr	r3, [pc, #72]	; (800c684 <__sinit+0x58>)
 800c63c:	4a12      	ldr	r2, [pc, #72]	; (800c688 <__sinit+0x5c>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6282      	str	r2, [r0, #40]	; 0x28
 800c642:	4298      	cmp	r0, r3
 800c644:	bf04      	itt	eq
 800c646:	2301      	moveq	r3, #1
 800c648:	6183      	streq	r3, [r0, #24]
 800c64a:	f000 f81f 	bl	800c68c <__sfp>
 800c64e:	6060      	str	r0, [r4, #4]
 800c650:	4620      	mov	r0, r4
 800c652:	f000 f81b 	bl	800c68c <__sfp>
 800c656:	60a0      	str	r0, [r4, #8]
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 f817 	bl	800c68c <__sfp>
 800c65e:	2200      	movs	r2, #0
 800c660:	60e0      	str	r0, [r4, #12]
 800c662:	2104      	movs	r1, #4
 800c664:	6860      	ldr	r0, [r4, #4]
 800c666:	f7ff ffa1 	bl	800c5ac <std>
 800c66a:	2201      	movs	r2, #1
 800c66c:	2109      	movs	r1, #9
 800c66e:	68a0      	ldr	r0, [r4, #8]
 800c670:	f7ff ff9c 	bl	800c5ac <std>
 800c674:	2202      	movs	r2, #2
 800c676:	2112      	movs	r1, #18
 800c678:	68e0      	ldr	r0, [r4, #12]
 800c67a:	f7ff ff97 	bl	800c5ac <std>
 800c67e:	2301      	movs	r3, #1
 800c680:	61a3      	str	r3, [r4, #24]
 800c682:	bd10      	pop	{r4, pc}
 800c684:	0800fe40 	.word	0x0800fe40
 800c688:	0800c5f5 	.word	0x0800c5f5

0800c68c <__sfp>:
 800c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68e:	4b1b      	ldr	r3, [pc, #108]	; (800c6fc <__sfp+0x70>)
 800c690:	681e      	ldr	r6, [r3, #0]
 800c692:	69b3      	ldr	r3, [r6, #24]
 800c694:	4607      	mov	r7, r0
 800c696:	b913      	cbnz	r3, 800c69e <__sfp+0x12>
 800c698:	4630      	mov	r0, r6
 800c69a:	f7ff ffc7 	bl	800c62c <__sinit>
 800c69e:	3648      	adds	r6, #72	; 0x48
 800c6a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	d503      	bpl.n	800c6b0 <__sfp+0x24>
 800c6a8:	6833      	ldr	r3, [r6, #0]
 800c6aa:	b133      	cbz	r3, 800c6ba <__sfp+0x2e>
 800c6ac:	6836      	ldr	r6, [r6, #0]
 800c6ae:	e7f7      	b.n	800c6a0 <__sfp+0x14>
 800c6b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c6b4:	b16d      	cbz	r5, 800c6d2 <__sfp+0x46>
 800c6b6:	3468      	adds	r4, #104	; 0x68
 800c6b8:	e7f4      	b.n	800c6a4 <__sfp+0x18>
 800c6ba:	2104      	movs	r1, #4
 800c6bc:	4638      	mov	r0, r7
 800c6be:	f7ff ff9f 	bl	800c600 <__sfmoreglue>
 800c6c2:	6030      	str	r0, [r6, #0]
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d1f1      	bne.n	800c6ac <__sfp+0x20>
 800c6c8:	230c      	movs	r3, #12
 800c6ca:	603b      	str	r3, [r7, #0]
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d2:	4b0b      	ldr	r3, [pc, #44]	; (800c700 <__sfp+0x74>)
 800c6d4:	6665      	str	r5, [r4, #100]	; 0x64
 800c6d6:	e9c4 5500 	strd	r5, r5, [r4]
 800c6da:	60a5      	str	r5, [r4, #8]
 800c6dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c6e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c6e4:	2208      	movs	r2, #8
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6ec:	f7ff ff0a 	bl	800c504 <memset>
 800c6f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6f8:	e7e9      	b.n	800c6ce <__sfp+0x42>
 800c6fa:	bf00      	nop
 800c6fc:	0800fe40 	.word	0x0800fe40
 800c700:	ffff0001 	.word	0xffff0001

0800c704 <_fwalk_reent>:
 800c704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c708:	4680      	mov	r8, r0
 800c70a:	4689      	mov	r9, r1
 800c70c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c710:	2600      	movs	r6, #0
 800c712:	b914      	cbnz	r4, 800c71a <_fwalk_reent+0x16>
 800c714:	4630      	mov	r0, r6
 800c716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c71a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c71e:	3f01      	subs	r7, #1
 800c720:	d501      	bpl.n	800c726 <_fwalk_reent+0x22>
 800c722:	6824      	ldr	r4, [r4, #0]
 800c724:	e7f5      	b.n	800c712 <_fwalk_reent+0xe>
 800c726:	89ab      	ldrh	r3, [r5, #12]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d907      	bls.n	800c73c <_fwalk_reent+0x38>
 800c72c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c730:	3301      	adds	r3, #1
 800c732:	d003      	beq.n	800c73c <_fwalk_reent+0x38>
 800c734:	4629      	mov	r1, r5
 800c736:	4640      	mov	r0, r8
 800c738:	47c8      	blx	r9
 800c73a:	4306      	orrs	r6, r0
 800c73c:	3568      	adds	r5, #104	; 0x68
 800c73e:	e7ee      	b.n	800c71e <_fwalk_reent+0x1a>

0800c740 <malloc>:
 800c740:	4b02      	ldr	r3, [pc, #8]	; (800c74c <malloc+0xc>)
 800c742:	4601      	mov	r1, r0
 800c744:	6818      	ldr	r0, [r3, #0]
 800c746:	f000 b851 	b.w	800c7ec <_malloc_r>
 800c74a:	bf00      	nop
 800c74c:	20000014 	.word	0x20000014

0800c750 <_free_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4605      	mov	r5, r0
 800c754:	2900      	cmp	r1, #0
 800c756:	d045      	beq.n	800c7e4 <_free_r+0x94>
 800c758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c75c:	1f0c      	subs	r4, r1, #4
 800c75e:	2b00      	cmp	r3, #0
 800c760:	bfb8      	it	lt
 800c762:	18e4      	addlt	r4, r4, r3
 800c764:	f000 fdc0 	bl	800d2e8 <__malloc_lock>
 800c768:	4a1f      	ldr	r2, [pc, #124]	; (800c7e8 <_free_r+0x98>)
 800c76a:	6813      	ldr	r3, [r2, #0]
 800c76c:	4610      	mov	r0, r2
 800c76e:	b933      	cbnz	r3, 800c77e <_free_r+0x2e>
 800c770:	6063      	str	r3, [r4, #4]
 800c772:	6014      	str	r4, [r2, #0]
 800c774:	4628      	mov	r0, r5
 800c776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c77a:	f000 bdb6 	b.w	800d2ea <__malloc_unlock>
 800c77e:	42a3      	cmp	r3, r4
 800c780:	d90c      	bls.n	800c79c <_free_r+0x4c>
 800c782:	6821      	ldr	r1, [r4, #0]
 800c784:	1862      	adds	r2, r4, r1
 800c786:	4293      	cmp	r3, r2
 800c788:	bf04      	itt	eq
 800c78a:	681a      	ldreq	r2, [r3, #0]
 800c78c:	685b      	ldreq	r3, [r3, #4]
 800c78e:	6063      	str	r3, [r4, #4]
 800c790:	bf04      	itt	eq
 800c792:	1852      	addeq	r2, r2, r1
 800c794:	6022      	streq	r2, [r4, #0]
 800c796:	6004      	str	r4, [r0, #0]
 800c798:	e7ec      	b.n	800c774 <_free_r+0x24>
 800c79a:	4613      	mov	r3, r2
 800c79c:	685a      	ldr	r2, [r3, #4]
 800c79e:	b10a      	cbz	r2, 800c7a4 <_free_r+0x54>
 800c7a0:	42a2      	cmp	r2, r4
 800c7a2:	d9fa      	bls.n	800c79a <_free_r+0x4a>
 800c7a4:	6819      	ldr	r1, [r3, #0]
 800c7a6:	1858      	adds	r0, r3, r1
 800c7a8:	42a0      	cmp	r0, r4
 800c7aa:	d10b      	bne.n	800c7c4 <_free_r+0x74>
 800c7ac:	6820      	ldr	r0, [r4, #0]
 800c7ae:	4401      	add	r1, r0
 800c7b0:	1858      	adds	r0, r3, r1
 800c7b2:	4282      	cmp	r2, r0
 800c7b4:	6019      	str	r1, [r3, #0]
 800c7b6:	d1dd      	bne.n	800c774 <_free_r+0x24>
 800c7b8:	6810      	ldr	r0, [r2, #0]
 800c7ba:	6852      	ldr	r2, [r2, #4]
 800c7bc:	605a      	str	r2, [r3, #4]
 800c7be:	4401      	add	r1, r0
 800c7c0:	6019      	str	r1, [r3, #0]
 800c7c2:	e7d7      	b.n	800c774 <_free_r+0x24>
 800c7c4:	d902      	bls.n	800c7cc <_free_r+0x7c>
 800c7c6:	230c      	movs	r3, #12
 800c7c8:	602b      	str	r3, [r5, #0]
 800c7ca:	e7d3      	b.n	800c774 <_free_r+0x24>
 800c7cc:	6820      	ldr	r0, [r4, #0]
 800c7ce:	1821      	adds	r1, r4, r0
 800c7d0:	428a      	cmp	r2, r1
 800c7d2:	bf04      	itt	eq
 800c7d4:	6811      	ldreq	r1, [r2, #0]
 800c7d6:	6852      	ldreq	r2, [r2, #4]
 800c7d8:	6062      	str	r2, [r4, #4]
 800c7da:	bf04      	itt	eq
 800c7dc:	1809      	addeq	r1, r1, r0
 800c7de:	6021      	streq	r1, [r4, #0]
 800c7e0:	605c      	str	r4, [r3, #4]
 800c7e2:	e7c7      	b.n	800c774 <_free_r+0x24>
 800c7e4:	bd38      	pop	{r3, r4, r5, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20000208 	.word	0x20000208

0800c7ec <_malloc_r>:
 800c7ec:	b570      	push	{r4, r5, r6, lr}
 800c7ee:	1ccd      	adds	r5, r1, #3
 800c7f0:	f025 0503 	bic.w	r5, r5, #3
 800c7f4:	3508      	adds	r5, #8
 800c7f6:	2d0c      	cmp	r5, #12
 800c7f8:	bf38      	it	cc
 800c7fa:	250c      	movcc	r5, #12
 800c7fc:	2d00      	cmp	r5, #0
 800c7fe:	4606      	mov	r6, r0
 800c800:	db01      	blt.n	800c806 <_malloc_r+0x1a>
 800c802:	42a9      	cmp	r1, r5
 800c804:	d903      	bls.n	800c80e <_malloc_r+0x22>
 800c806:	230c      	movs	r3, #12
 800c808:	6033      	str	r3, [r6, #0]
 800c80a:	2000      	movs	r0, #0
 800c80c:	bd70      	pop	{r4, r5, r6, pc}
 800c80e:	f000 fd6b 	bl	800d2e8 <__malloc_lock>
 800c812:	4a21      	ldr	r2, [pc, #132]	; (800c898 <_malloc_r+0xac>)
 800c814:	6814      	ldr	r4, [r2, #0]
 800c816:	4621      	mov	r1, r4
 800c818:	b991      	cbnz	r1, 800c840 <_malloc_r+0x54>
 800c81a:	4c20      	ldr	r4, [pc, #128]	; (800c89c <_malloc_r+0xb0>)
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	b91b      	cbnz	r3, 800c828 <_malloc_r+0x3c>
 800c820:	4630      	mov	r0, r6
 800c822:	f000 fb05 	bl	800ce30 <_sbrk_r>
 800c826:	6020      	str	r0, [r4, #0]
 800c828:	4629      	mov	r1, r5
 800c82a:	4630      	mov	r0, r6
 800c82c:	f000 fb00 	bl	800ce30 <_sbrk_r>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d124      	bne.n	800c87e <_malloc_r+0x92>
 800c834:	230c      	movs	r3, #12
 800c836:	6033      	str	r3, [r6, #0]
 800c838:	4630      	mov	r0, r6
 800c83a:	f000 fd56 	bl	800d2ea <__malloc_unlock>
 800c83e:	e7e4      	b.n	800c80a <_malloc_r+0x1e>
 800c840:	680b      	ldr	r3, [r1, #0]
 800c842:	1b5b      	subs	r3, r3, r5
 800c844:	d418      	bmi.n	800c878 <_malloc_r+0x8c>
 800c846:	2b0b      	cmp	r3, #11
 800c848:	d90f      	bls.n	800c86a <_malloc_r+0x7e>
 800c84a:	600b      	str	r3, [r1, #0]
 800c84c:	50cd      	str	r5, [r1, r3]
 800c84e:	18cc      	adds	r4, r1, r3
 800c850:	4630      	mov	r0, r6
 800c852:	f000 fd4a 	bl	800d2ea <__malloc_unlock>
 800c856:	f104 000b 	add.w	r0, r4, #11
 800c85a:	1d23      	adds	r3, r4, #4
 800c85c:	f020 0007 	bic.w	r0, r0, #7
 800c860:	1ac3      	subs	r3, r0, r3
 800c862:	d0d3      	beq.n	800c80c <_malloc_r+0x20>
 800c864:	425a      	negs	r2, r3
 800c866:	50e2      	str	r2, [r4, r3]
 800c868:	e7d0      	b.n	800c80c <_malloc_r+0x20>
 800c86a:	428c      	cmp	r4, r1
 800c86c:	684b      	ldr	r3, [r1, #4]
 800c86e:	bf16      	itet	ne
 800c870:	6063      	strne	r3, [r4, #4]
 800c872:	6013      	streq	r3, [r2, #0]
 800c874:	460c      	movne	r4, r1
 800c876:	e7eb      	b.n	800c850 <_malloc_r+0x64>
 800c878:	460c      	mov	r4, r1
 800c87a:	6849      	ldr	r1, [r1, #4]
 800c87c:	e7cc      	b.n	800c818 <_malloc_r+0x2c>
 800c87e:	1cc4      	adds	r4, r0, #3
 800c880:	f024 0403 	bic.w	r4, r4, #3
 800c884:	42a0      	cmp	r0, r4
 800c886:	d005      	beq.n	800c894 <_malloc_r+0xa8>
 800c888:	1a21      	subs	r1, r4, r0
 800c88a:	4630      	mov	r0, r6
 800c88c:	f000 fad0 	bl	800ce30 <_sbrk_r>
 800c890:	3001      	adds	r0, #1
 800c892:	d0cf      	beq.n	800c834 <_malloc_r+0x48>
 800c894:	6025      	str	r5, [r4, #0]
 800c896:	e7db      	b.n	800c850 <_malloc_r+0x64>
 800c898:	20000208 	.word	0x20000208
 800c89c:	2000020c 	.word	0x2000020c

0800c8a0 <__sfputc_r>:
 800c8a0:	6893      	ldr	r3, [r2, #8]
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	b410      	push	{r4}
 800c8a8:	6093      	str	r3, [r2, #8]
 800c8aa:	da08      	bge.n	800c8be <__sfputc_r+0x1e>
 800c8ac:	6994      	ldr	r4, [r2, #24]
 800c8ae:	42a3      	cmp	r3, r4
 800c8b0:	db01      	blt.n	800c8b6 <__sfputc_r+0x16>
 800c8b2:	290a      	cmp	r1, #10
 800c8b4:	d103      	bne.n	800c8be <__sfputc_r+0x1e>
 800c8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ba:	f000 bb0d 	b.w	800ced8 <__swbuf_r>
 800c8be:	6813      	ldr	r3, [r2, #0]
 800c8c0:	1c58      	adds	r0, r3, #1
 800c8c2:	6010      	str	r0, [r2, #0]
 800c8c4:	7019      	strb	r1, [r3, #0]
 800c8c6:	4608      	mov	r0, r1
 800c8c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <__sfputs_r>:
 800c8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	460f      	mov	r7, r1
 800c8d4:	4614      	mov	r4, r2
 800c8d6:	18d5      	adds	r5, r2, r3
 800c8d8:	42ac      	cmp	r4, r5
 800c8da:	d101      	bne.n	800c8e0 <__sfputs_r+0x12>
 800c8dc:	2000      	movs	r0, #0
 800c8de:	e007      	b.n	800c8f0 <__sfputs_r+0x22>
 800c8e0:	463a      	mov	r2, r7
 800c8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7ff ffda 	bl	800c8a0 <__sfputc_r>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d1f3      	bne.n	800c8d8 <__sfputs_r+0xa>
 800c8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8f4 <_vfiprintf_r>:
 800c8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	b09d      	sub	sp, #116	; 0x74
 800c8fc:	4617      	mov	r7, r2
 800c8fe:	461d      	mov	r5, r3
 800c900:	4606      	mov	r6, r0
 800c902:	b118      	cbz	r0, 800c90c <_vfiprintf_r+0x18>
 800c904:	6983      	ldr	r3, [r0, #24]
 800c906:	b90b      	cbnz	r3, 800c90c <_vfiprintf_r+0x18>
 800c908:	f7ff fe90 	bl	800c62c <__sinit>
 800c90c:	4b7c      	ldr	r3, [pc, #496]	; (800cb00 <_vfiprintf_r+0x20c>)
 800c90e:	429c      	cmp	r4, r3
 800c910:	d158      	bne.n	800c9c4 <_vfiprintf_r+0xd0>
 800c912:	6874      	ldr	r4, [r6, #4]
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	0718      	lsls	r0, r3, #28
 800c918:	d55e      	bpl.n	800c9d8 <_vfiprintf_r+0xe4>
 800c91a:	6923      	ldr	r3, [r4, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d05b      	beq.n	800c9d8 <_vfiprintf_r+0xe4>
 800c920:	2300      	movs	r3, #0
 800c922:	9309      	str	r3, [sp, #36]	; 0x24
 800c924:	2320      	movs	r3, #32
 800c926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c92a:	2330      	movs	r3, #48	; 0x30
 800c92c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c930:	9503      	str	r5, [sp, #12]
 800c932:	f04f 0b01 	mov.w	fp, #1
 800c936:	46b8      	mov	r8, r7
 800c938:	4645      	mov	r5, r8
 800c93a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c93e:	b10b      	cbz	r3, 800c944 <_vfiprintf_r+0x50>
 800c940:	2b25      	cmp	r3, #37	; 0x25
 800c942:	d154      	bne.n	800c9ee <_vfiprintf_r+0xfa>
 800c944:	ebb8 0a07 	subs.w	sl, r8, r7
 800c948:	d00b      	beq.n	800c962 <_vfiprintf_r+0x6e>
 800c94a:	4653      	mov	r3, sl
 800c94c:	463a      	mov	r2, r7
 800c94e:	4621      	mov	r1, r4
 800c950:	4630      	mov	r0, r6
 800c952:	f7ff ffbc 	bl	800c8ce <__sfputs_r>
 800c956:	3001      	adds	r0, #1
 800c958:	f000 80c2 	beq.w	800cae0 <_vfiprintf_r+0x1ec>
 800c95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c95e:	4453      	add	r3, sl
 800c960:	9309      	str	r3, [sp, #36]	; 0x24
 800c962:	f898 3000 	ldrb.w	r3, [r8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	f000 80ba 	beq.w	800cae0 <_vfiprintf_r+0x1ec>
 800c96c:	2300      	movs	r3, #0
 800c96e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c976:	9304      	str	r3, [sp, #16]
 800c978:	9307      	str	r3, [sp, #28]
 800c97a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c97e:	931a      	str	r3, [sp, #104]	; 0x68
 800c980:	46a8      	mov	r8, r5
 800c982:	2205      	movs	r2, #5
 800c984:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c988:	485e      	ldr	r0, [pc, #376]	; (800cb04 <_vfiprintf_r+0x210>)
 800c98a:	f7f3 fc21 	bl	80001d0 <memchr>
 800c98e:	9b04      	ldr	r3, [sp, #16]
 800c990:	bb78      	cbnz	r0, 800c9f2 <_vfiprintf_r+0xfe>
 800c992:	06d9      	lsls	r1, r3, #27
 800c994:	bf44      	itt	mi
 800c996:	2220      	movmi	r2, #32
 800c998:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c99c:	071a      	lsls	r2, r3, #28
 800c99e:	bf44      	itt	mi
 800c9a0:	222b      	movmi	r2, #43	; 0x2b
 800c9a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c9a6:	782a      	ldrb	r2, [r5, #0]
 800c9a8:	2a2a      	cmp	r2, #42	; 0x2a
 800c9aa:	d02a      	beq.n	800ca02 <_vfiprintf_r+0x10e>
 800c9ac:	9a07      	ldr	r2, [sp, #28]
 800c9ae:	46a8      	mov	r8, r5
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	250a      	movs	r5, #10
 800c9b4:	4641      	mov	r1, r8
 800c9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9ba:	3b30      	subs	r3, #48	; 0x30
 800c9bc:	2b09      	cmp	r3, #9
 800c9be:	d969      	bls.n	800ca94 <_vfiprintf_r+0x1a0>
 800c9c0:	b360      	cbz	r0, 800ca1c <_vfiprintf_r+0x128>
 800c9c2:	e024      	b.n	800ca0e <_vfiprintf_r+0x11a>
 800c9c4:	4b50      	ldr	r3, [pc, #320]	; (800cb08 <_vfiprintf_r+0x214>)
 800c9c6:	429c      	cmp	r4, r3
 800c9c8:	d101      	bne.n	800c9ce <_vfiprintf_r+0xda>
 800c9ca:	68b4      	ldr	r4, [r6, #8]
 800c9cc:	e7a2      	b.n	800c914 <_vfiprintf_r+0x20>
 800c9ce:	4b4f      	ldr	r3, [pc, #316]	; (800cb0c <_vfiprintf_r+0x218>)
 800c9d0:	429c      	cmp	r4, r3
 800c9d2:	bf08      	it	eq
 800c9d4:	68f4      	ldreq	r4, [r6, #12]
 800c9d6:	e79d      	b.n	800c914 <_vfiprintf_r+0x20>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f000 fae0 	bl	800cfa0 <__swsetup_r>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d09d      	beq.n	800c920 <_vfiprintf_r+0x2c>
 800c9e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9e8:	b01d      	add	sp, #116	; 0x74
 800c9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ee:	46a8      	mov	r8, r5
 800c9f0:	e7a2      	b.n	800c938 <_vfiprintf_r+0x44>
 800c9f2:	4a44      	ldr	r2, [pc, #272]	; (800cb04 <_vfiprintf_r+0x210>)
 800c9f4:	1a80      	subs	r0, r0, r2
 800c9f6:	fa0b f000 	lsl.w	r0, fp, r0
 800c9fa:	4318      	orrs	r0, r3
 800c9fc:	9004      	str	r0, [sp, #16]
 800c9fe:	4645      	mov	r5, r8
 800ca00:	e7be      	b.n	800c980 <_vfiprintf_r+0x8c>
 800ca02:	9a03      	ldr	r2, [sp, #12]
 800ca04:	1d11      	adds	r1, r2, #4
 800ca06:	6812      	ldr	r2, [r2, #0]
 800ca08:	9103      	str	r1, [sp, #12]
 800ca0a:	2a00      	cmp	r2, #0
 800ca0c:	db01      	blt.n	800ca12 <_vfiprintf_r+0x11e>
 800ca0e:	9207      	str	r2, [sp, #28]
 800ca10:	e004      	b.n	800ca1c <_vfiprintf_r+0x128>
 800ca12:	4252      	negs	r2, r2
 800ca14:	f043 0302 	orr.w	r3, r3, #2
 800ca18:	9207      	str	r2, [sp, #28]
 800ca1a:	9304      	str	r3, [sp, #16]
 800ca1c:	f898 3000 	ldrb.w	r3, [r8]
 800ca20:	2b2e      	cmp	r3, #46	; 0x2e
 800ca22:	d10e      	bne.n	800ca42 <_vfiprintf_r+0x14e>
 800ca24:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ca28:	2b2a      	cmp	r3, #42	; 0x2a
 800ca2a:	d138      	bne.n	800ca9e <_vfiprintf_r+0x1aa>
 800ca2c:	9b03      	ldr	r3, [sp, #12]
 800ca2e:	1d1a      	adds	r2, r3, #4
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	9203      	str	r2, [sp, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	bfb8      	it	lt
 800ca38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca3c:	f108 0802 	add.w	r8, r8, #2
 800ca40:	9305      	str	r3, [sp, #20]
 800ca42:	4d33      	ldr	r5, [pc, #204]	; (800cb10 <_vfiprintf_r+0x21c>)
 800ca44:	f898 1000 	ldrb.w	r1, [r8]
 800ca48:	2203      	movs	r2, #3
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f7f3 fbc0 	bl	80001d0 <memchr>
 800ca50:	b140      	cbz	r0, 800ca64 <_vfiprintf_r+0x170>
 800ca52:	2340      	movs	r3, #64	; 0x40
 800ca54:	1b40      	subs	r0, r0, r5
 800ca56:	fa03 f000 	lsl.w	r0, r3, r0
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	4303      	orrs	r3, r0
 800ca5e:	f108 0801 	add.w	r8, r8, #1
 800ca62:	9304      	str	r3, [sp, #16]
 800ca64:	f898 1000 	ldrb.w	r1, [r8]
 800ca68:	482a      	ldr	r0, [pc, #168]	; (800cb14 <_vfiprintf_r+0x220>)
 800ca6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca6e:	2206      	movs	r2, #6
 800ca70:	f108 0701 	add.w	r7, r8, #1
 800ca74:	f7f3 fbac 	bl	80001d0 <memchr>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d037      	beq.n	800caec <_vfiprintf_r+0x1f8>
 800ca7c:	4b26      	ldr	r3, [pc, #152]	; (800cb18 <_vfiprintf_r+0x224>)
 800ca7e:	bb1b      	cbnz	r3, 800cac8 <_vfiprintf_r+0x1d4>
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	3307      	adds	r3, #7
 800ca84:	f023 0307 	bic.w	r3, r3, #7
 800ca88:	3308      	adds	r3, #8
 800ca8a:	9303      	str	r3, [sp, #12]
 800ca8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca8e:	444b      	add	r3, r9
 800ca90:	9309      	str	r3, [sp, #36]	; 0x24
 800ca92:	e750      	b.n	800c936 <_vfiprintf_r+0x42>
 800ca94:	fb05 3202 	mla	r2, r5, r2, r3
 800ca98:	2001      	movs	r0, #1
 800ca9a:	4688      	mov	r8, r1
 800ca9c:	e78a      	b.n	800c9b4 <_vfiprintf_r+0xc0>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f108 0801 	add.w	r8, r8, #1
 800caa4:	9305      	str	r3, [sp, #20]
 800caa6:	4619      	mov	r1, r3
 800caa8:	250a      	movs	r5, #10
 800caaa:	4640      	mov	r0, r8
 800caac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab0:	3a30      	subs	r2, #48	; 0x30
 800cab2:	2a09      	cmp	r2, #9
 800cab4:	d903      	bls.n	800cabe <_vfiprintf_r+0x1ca>
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0c3      	beq.n	800ca42 <_vfiprintf_r+0x14e>
 800caba:	9105      	str	r1, [sp, #20]
 800cabc:	e7c1      	b.n	800ca42 <_vfiprintf_r+0x14e>
 800cabe:	fb05 2101 	mla	r1, r5, r1, r2
 800cac2:	2301      	movs	r3, #1
 800cac4:	4680      	mov	r8, r0
 800cac6:	e7f0      	b.n	800caaa <_vfiprintf_r+0x1b6>
 800cac8:	ab03      	add	r3, sp, #12
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	4622      	mov	r2, r4
 800cace:	4b13      	ldr	r3, [pc, #76]	; (800cb1c <_vfiprintf_r+0x228>)
 800cad0:	a904      	add	r1, sp, #16
 800cad2:	4630      	mov	r0, r6
 800cad4:	f3af 8000 	nop.w
 800cad8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cadc:	4681      	mov	r9, r0
 800cade:	d1d5      	bne.n	800ca8c <_vfiprintf_r+0x198>
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	065b      	lsls	r3, r3, #25
 800cae4:	f53f af7e 	bmi.w	800c9e4 <_vfiprintf_r+0xf0>
 800cae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caea:	e77d      	b.n	800c9e8 <_vfiprintf_r+0xf4>
 800caec:	ab03      	add	r3, sp, #12
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	4622      	mov	r2, r4
 800caf2:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <_vfiprintf_r+0x228>)
 800caf4:	a904      	add	r1, sp, #16
 800caf6:	4630      	mov	r0, r6
 800caf8:	f000 f888 	bl	800cc0c <_printf_i>
 800cafc:	e7ec      	b.n	800cad8 <_vfiprintf_r+0x1e4>
 800cafe:	bf00      	nop
 800cb00:	0800fe64 	.word	0x0800fe64
 800cb04:	0800fea4 	.word	0x0800fea4
 800cb08:	0800fe84 	.word	0x0800fe84
 800cb0c:	0800fe44 	.word	0x0800fe44
 800cb10:	0800feaa 	.word	0x0800feaa
 800cb14:	0800feae 	.word	0x0800feae
 800cb18:	00000000 	.word	0x00000000
 800cb1c:	0800c8cf 	.word	0x0800c8cf

0800cb20 <_printf_common>:
 800cb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb24:	4691      	mov	r9, r2
 800cb26:	461f      	mov	r7, r3
 800cb28:	688a      	ldr	r2, [r1, #8]
 800cb2a:	690b      	ldr	r3, [r1, #16]
 800cb2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb30:	4293      	cmp	r3, r2
 800cb32:	bfb8      	it	lt
 800cb34:	4613      	movlt	r3, r2
 800cb36:	f8c9 3000 	str.w	r3, [r9]
 800cb3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb3e:	4606      	mov	r6, r0
 800cb40:	460c      	mov	r4, r1
 800cb42:	b112      	cbz	r2, 800cb4a <_printf_common+0x2a>
 800cb44:	3301      	adds	r3, #1
 800cb46:	f8c9 3000 	str.w	r3, [r9]
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	0699      	lsls	r1, r3, #26
 800cb4e:	bf42      	ittt	mi
 800cb50:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cb54:	3302      	addmi	r3, #2
 800cb56:	f8c9 3000 	strmi.w	r3, [r9]
 800cb5a:	6825      	ldr	r5, [r4, #0]
 800cb5c:	f015 0506 	ands.w	r5, r5, #6
 800cb60:	d107      	bne.n	800cb72 <_printf_common+0x52>
 800cb62:	f104 0a19 	add.w	sl, r4, #25
 800cb66:	68e3      	ldr	r3, [r4, #12]
 800cb68:	f8d9 2000 	ldr.w	r2, [r9]
 800cb6c:	1a9b      	subs	r3, r3, r2
 800cb6e:	42ab      	cmp	r3, r5
 800cb70:	dc28      	bgt.n	800cbc4 <_printf_common+0xa4>
 800cb72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cb76:	6822      	ldr	r2, [r4, #0]
 800cb78:	3300      	adds	r3, #0
 800cb7a:	bf18      	it	ne
 800cb7c:	2301      	movne	r3, #1
 800cb7e:	0692      	lsls	r2, r2, #26
 800cb80:	d42d      	bmi.n	800cbde <_printf_common+0xbe>
 800cb82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb86:	4639      	mov	r1, r7
 800cb88:	4630      	mov	r0, r6
 800cb8a:	47c0      	blx	r8
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d020      	beq.n	800cbd2 <_printf_common+0xb2>
 800cb90:	6823      	ldr	r3, [r4, #0]
 800cb92:	68e5      	ldr	r5, [r4, #12]
 800cb94:	f8d9 2000 	ldr.w	r2, [r9]
 800cb98:	f003 0306 	and.w	r3, r3, #6
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	bf08      	it	eq
 800cba0:	1aad      	subeq	r5, r5, r2
 800cba2:	68a3      	ldr	r3, [r4, #8]
 800cba4:	6922      	ldr	r2, [r4, #16]
 800cba6:	bf0c      	ite	eq
 800cba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbac:	2500      	movne	r5, #0
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	bfc4      	itt	gt
 800cbb2:	1a9b      	subgt	r3, r3, r2
 800cbb4:	18ed      	addgt	r5, r5, r3
 800cbb6:	f04f 0900 	mov.w	r9, #0
 800cbba:	341a      	adds	r4, #26
 800cbbc:	454d      	cmp	r5, r9
 800cbbe:	d11a      	bne.n	800cbf6 <_printf_common+0xd6>
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	e008      	b.n	800cbd6 <_printf_common+0xb6>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	4652      	mov	r2, sl
 800cbc8:	4639      	mov	r1, r7
 800cbca:	4630      	mov	r0, r6
 800cbcc:	47c0      	blx	r8
 800cbce:	3001      	adds	r0, #1
 800cbd0:	d103      	bne.n	800cbda <_printf_common+0xba>
 800cbd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbda:	3501      	adds	r5, #1
 800cbdc:	e7c3      	b.n	800cb66 <_printf_common+0x46>
 800cbde:	18e1      	adds	r1, r4, r3
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	2030      	movs	r0, #48	; 0x30
 800cbe4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbe8:	4422      	add	r2, r4
 800cbea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbf2:	3302      	adds	r3, #2
 800cbf4:	e7c5      	b.n	800cb82 <_printf_common+0x62>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	4622      	mov	r2, r4
 800cbfa:	4639      	mov	r1, r7
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	47c0      	blx	r8
 800cc00:	3001      	adds	r0, #1
 800cc02:	d0e6      	beq.n	800cbd2 <_printf_common+0xb2>
 800cc04:	f109 0901 	add.w	r9, r9, #1
 800cc08:	e7d8      	b.n	800cbbc <_printf_common+0x9c>
	...

0800cc0c <_printf_i>:
 800cc0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cc14:	460c      	mov	r4, r1
 800cc16:	7e09      	ldrb	r1, [r1, #24]
 800cc18:	b085      	sub	sp, #20
 800cc1a:	296e      	cmp	r1, #110	; 0x6e
 800cc1c:	4617      	mov	r7, r2
 800cc1e:	4606      	mov	r6, r0
 800cc20:	4698      	mov	r8, r3
 800cc22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc24:	f000 80b3 	beq.w	800cd8e <_printf_i+0x182>
 800cc28:	d822      	bhi.n	800cc70 <_printf_i+0x64>
 800cc2a:	2963      	cmp	r1, #99	; 0x63
 800cc2c:	d036      	beq.n	800cc9c <_printf_i+0x90>
 800cc2e:	d80a      	bhi.n	800cc46 <_printf_i+0x3a>
 800cc30:	2900      	cmp	r1, #0
 800cc32:	f000 80b9 	beq.w	800cda8 <_printf_i+0x19c>
 800cc36:	2958      	cmp	r1, #88	; 0x58
 800cc38:	f000 8083 	beq.w	800cd42 <_printf_i+0x136>
 800cc3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cc44:	e032      	b.n	800ccac <_printf_i+0xa0>
 800cc46:	2964      	cmp	r1, #100	; 0x64
 800cc48:	d001      	beq.n	800cc4e <_printf_i+0x42>
 800cc4a:	2969      	cmp	r1, #105	; 0x69
 800cc4c:	d1f6      	bne.n	800cc3c <_printf_i+0x30>
 800cc4e:	6820      	ldr	r0, [r4, #0]
 800cc50:	6813      	ldr	r3, [r2, #0]
 800cc52:	0605      	lsls	r5, r0, #24
 800cc54:	f103 0104 	add.w	r1, r3, #4
 800cc58:	d52a      	bpl.n	800ccb0 <_printf_i+0xa4>
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6011      	str	r1, [r2, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	da03      	bge.n	800cc6a <_printf_i+0x5e>
 800cc62:	222d      	movs	r2, #45	; 0x2d
 800cc64:	425b      	negs	r3, r3
 800cc66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cc6a:	486f      	ldr	r0, [pc, #444]	; (800ce28 <_printf_i+0x21c>)
 800cc6c:	220a      	movs	r2, #10
 800cc6e:	e039      	b.n	800cce4 <_printf_i+0xd8>
 800cc70:	2973      	cmp	r1, #115	; 0x73
 800cc72:	f000 809d 	beq.w	800cdb0 <_printf_i+0x1a4>
 800cc76:	d808      	bhi.n	800cc8a <_printf_i+0x7e>
 800cc78:	296f      	cmp	r1, #111	; 0x6f
 800cc7a:	d020      	beq.n	800ccbe <_printf_i+0xb2>
 800cc7c:	2970      	cmp	r1, #112	; 0x70
 800cc7e:	d1dd      	bne.n	800cc3c <_printf_i+0x30>
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	f043 0320 	orr.w	r3, r3, #32
 800cc86:	6023      	str	r3, [r4, #0]
 800cc88:	e003      	b.n	800cc92 <_printf_i+0x86>
 800cc8a:	2975      	cmp	r1, #117	; 0x75
 800cc8c:	d017      	beq.n	800ccbe <_printf_i+0xb2>
 800cc8e:	2978      	cmp	r1, #120	; 0x78
 800cc90:	d1d4      	bne.n	800cc3c <_printf_i+0x30>
 800cc92:	2378      	movs	r3, #120	; 0x78
 800cc94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc98:	4864      	ldr	r0, [pc, #400]	; (800ce2c <_printf_i+0x220>)
 800cc9a:	e055      	b.n	800cd48 <_printf_i+0x13c>
 800cc9c:	6813      	ldr	r3, [r2, #0]
 800cc9e:	1d19      	adds	r1, r3, #4
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6011      	str	r1, [r2, #0]
 800cca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccac:	2301      	movs	r3, #1
 800ccae:	e08c      	b.n	800cdca <_printf_i+0x1be>
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6011      	str	r1, [r2, #0]
 800ccb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ccb8:	bf18      	it	ne
 800ccba:	b21b      	sxthne	r3, r3
 800ccbc:	e7cf      	b.n	800cc5e <_printf_i+0x52>
 800ccbe:	6813      	ldr	r3, [r2, #0]
 800ccc0:	6825      	ldr	r5, [r4, #0]
 800ccc2:	1d18      	adds	r0, r3, #4
 800ccc4:	6010      	str	r0, [r2, #0]
 800ccc6:	0628      	lsls	r0, r5, #24
 800ccc8:	d501      	bpl.n	800ccce <_printf_i+0xc2>
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	e002      	b.n	800ccd4 <_printf_i+0xc8>
 800ccce:	0668      	lsls	r0, r5, #25
 800ccd0:	d5fb      	bpl.n	800ccca <_printf_i+0xbe>
 800ccd2:	881b      	ldrh	r3, [r3, #0]
 800ccd4:	4854      	ldr	r0, [pc, #336]	; (800ce28 <_printf_i+0x21c>)
 800ccd6:	296f      	cmp	r1, #111	; 0x6f
 800ccd8:	bf14      	ite	ne
 800ccda:	220a      	movne	r2, #10
 800ccdc:	2208      	moveq	r2, #8
 800ccde:	2100      	movs	r1, #0
 800cce0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cce4:	6865      	ldr	r5, [r4, #4]
 800cce6:	60a5      	str	r5, [r4, #8]
 800cce8:	2d00      	cmp	r5, #0
 800ccea:	f2c0 8095 	blt.w	800ce18 <_printf_i+0x20c>
 800ccee:	6821      	ldr	r1, [r4, #0]
 800ccf0:	f021 0104 	bic.w	r1, r1, #4
 800ccf4:	6021      	str	r1, [r4, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d13d      	bne.n	800cd76 <_printf_i+0x16a>
 800ccfa:	2d00      	cmp	r5, #0
 800ccfc:	f040 808e 	bne.w	800ce1c <_printf_i+0x210>
 800cd00:	4665      	mov	r5, ip
 800cd02:	2a08      	cmp	r2, #8
 800cd04:	d10b      	bne.n	800cd1e <_printf_i+0x112>
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	07db      	lsls	r3, r3, #31
 800cd0a:	d508      	bpl.n	800cd1e <_printf_i+0x112>
 800cd0c:	6923      	ldr	r3, [r4, #16]
 800cd0e:	6862      	ldr	r2, [r4, #4]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	bfde      	ittt	le
 800cd14:	2330      	movle	r3, #48	; 0x30
 800cd16:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd1a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cd1e:	ebac 0305 	sub.w	r3, ip, r5
 800cd22:	6123      	str	r3, [r4, #16]
 800cd24:	f8cd 8000 	str.w	r8, [sp]
 800cd28:	463b      	mov	r3, r7
 800cd2a:	aa03      	add	r2, sp, #12
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f7ff fef6 	bl	800cb20 <_printf_common>
 800cd34:	3001      	adds	r0, #1
 800cd36:	d14d      	bne.n	800cdd4 <_printf_i+0x1c8>
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd3c:	b005      	add	sp, #20
 800cd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd42:	4839      	ldr	r0, [pc, #228]	; (800ce28 <_printf_i+0x21c>)
 800cd44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd48:	6813      	ldr	r3, [r2, #0]
 800cd4a:	6821      	ldr	r1, [r4, #0]
 800cd4c:	1d1d      	adds	r5, r3, #4
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6015      	str	r5, [r2, #0]
 800cd52:	060a      	lsls	r2, r1, #24
 800cd54:	d50b      	bpl.n	800cd6e <_printf_i+0x162>
 800cd56:	07ca      	lsls	r2, r1, #31
 800cd58:	bf44      	itt	mi
 800cd5a:	f041 0120 	orrmi.w	r1, r1, #32
 800cd5e:	6021      	strmi	r1, [r4, #0]
 800cd60:	b91b      	cbnz	r3, 800cd6a <_printf_i+0x15e>
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	f022 0220 	bic.w	r2, r2, #32
 800cd68:	6022      	str	r2, [r4, #0]
 800cd6a:	2210      	movs	r2, #16
 800cd6c:	e7b7      	b.n	800ccde <_printf_i+0xd2>
 800cd6e:	064d      	lsls	r5, r1, #25
 800cd70:	bf48      	it	mi
 800cd72:	b29b      	uxthmi	r3, r3
 800cd74:	e7ef      	b.n	800cd56 <_printf_i+0x14a>
 800cd76:	4665      	mov	r5, ip
 800cd78:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd7c:	fb02 3311 	mls	r3, r2, r1, r3
 800cd80:	5cc3      	ldrb	r3, [r0, r3]
 800cd82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cd86:	460b      	mov	r3, r1
 800cd88:	2900      	cmp	r1, #0
 800cd8a:	d1f5      	bne.n	800cd78 <_printf_i+0x16c>
 800cd8c:	e7b9      	b.n	800cd02 <_printf_i+0xf6>
 800cd8e:	6813      	ldr	r3, [r2, #0]
 800cd90:	6825      	ldr	r5, [r4, #0]
 800cd92:	6961      	ldr	r1, [r4, #20]
 800cd94:	1d18      	adds	r0, r3, #4
 800cd96:	6010      	str	r0, [r2, #0]
 800cd98:	0628      	lsls	r0, r5, #24
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	d501      	bpl.n	800cda2 <_printf_i+0x196>
 800cd9e:	6019      	str	r1, [r3, #0]
 800cda0:	e002      	b.n	800cda8 <_printf_i+0x19c>
 800cda2:	066a      	lsls	r2, r5, #25
 800cda4:	d5fb      	bpl.n	800cd9e <_printf_i+0x192>
 800cda6:	8019      	strh	r1, [r3, #0]
 800cda8:	2300      	movs	r3, #0
 800cdaa:	6123      	str	r3, [r4, #16]
 800cdac:	4665      	mov	r5, ip
 800cdae:	e7b9      	b.n	800cd24 <_printf_i+0x118>
 800cdb0:	6813      	ldr	r3, [r2, #0]
 800cdb2:	1d19      	adds	r1, r3, #4
 800cdb4:	6011      	str	r1, [r2, #0]
 800cdb6:	681d      	ldr	r5, [r3, #0]
 800cdb8:	6862      	ldr	r2, [r4, #4]
 800cdba:	2100      	movs	r1, #0
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f7f3 fa07 	bl	80001d0 <memchr>
 800cdc2:	b108      	cbz	r0, 800cdc8 <_printf_i+0x1bc>
 800cdc4:	1b40      	subs	r0, r0, r5
 800cdc6:	6060      	str	r0, [r4, #4]
 800cdc8:	6863      	ldr	r3, [r4, #4]
 800cdca:	6123      	str	r3, [r4, #16]
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdd2:	e7a7      	b.n	800cd24 <_printf_i+0x118>
 800cdd4:	6923      	ldr	r3, [r4, #16]
 800cdd6:	462a      	mov	r2, r5
 800cdd8:	4639      	mov	r1, r7
 800cdda:	4630      	mov	r0, r6
 800cddc:	47c0      	blx	r8
 800cdde:	3001      	adds	r0, #1
 800cde0:	d0aa      	beq.n	800cd38 <_printf_i+0x12c>
 800cde2:	6823      	ldr	r3, [r4, #0]
 800cde4:	079b      	lsls	r3, r3, #30
 800cde6:	d413      	bmi.n	800ce10 <_printf_i+0x204>
 800cde8:	68e0      	ldr	r0, [r4, #12]
 800cdea:	9b03      	ldr	r3, [sp, #12]
 800cdec:	4298      	cmp	r0, r3
 800cdee:	bfb8      	it	lt
 800cdf0:	4618      	movlt	r0, r3
 800cdf2:	e7a3      	b.n	800cd3c <_printf_i+0x130>
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	464a      	mov	r2, r9
 800cdf8:	4639      	mov	r1, r7
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	47c0      	blx	r8
 800cdfe:	3001      	adds	r0, #1
 800ce00:	d09a      	beq.n	800cd38 <_printf_i+0x12c>
 800ce02:	3501      	adds	r5, #1
 800ce04:	68e3      	ldr	r3, [r4, #12]
 800ce06:	9a03      	ldr	r2, [sp, #12]
 800ce08:	1a9b      	subs	r3, r3, r2
 800ce0a:	42ab      	cmp	r3, r5
 800ce0c:	dcf2      	bgt.n	800cdf4 <_printf_i+0x1e8>
 800ce0e:	e7eb      	b.n	800cde8 <_printf_i+0x1dc>
 800ce10:	2500      	movs	r5, #0
 800ce12:	f104 0919 	add.w	r9, r4, #25
 800ce16:	e7f5      	b.n	800ce04 <_printf_i+0x1f8>
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1ac      	bne.n	800cd76 <_printf_i+0x16a>
 800ce1c:	7803      	ldrb	r3, [r0, #0]
 800ce1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce26:	e76c      	b.n	800cd02 <_printf_i+0xf6>
 800ce28:	0800feb5 	.word	0x0800feb5
 800ce2c:	0800fec6 	.word	0x0800fec6

0800ce30 <_sbrk_r>:
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	4c06      	ldr	r4, [pc, #24]	; (800ce4c <_sbrk_r+0x1c>)
 800ce34:	2300      	movs	r3, #0
 800ce36:	4605      	mov	r5, r0
 800ce38:	4608      	mov	r0, r1
 800ce3a:	6023      	str	r3, [r4, #0]
 800ce3c:	f7f3 fd3a 	bl	80008b4 <_sbrk>
 800ce40:	1c43      	adds	r3, r0, #1
 800ce42:	d102      	bne.n	800ce4a <_sbrk_r+0x1a>
 800ce44:	6823      	ldr	r3, [r4, #0]
 800ce46:	b103      	cbz	r3, 800ce4a <_sbrk_r+0x1a>
 800ce48:	602b      	str	r3, [r5, #0]
 800ce4a:	bd38      	pop	{r3, r4, r5, pc}
 800ce4c:	200068a4 	.word	0x200068a4

0800ce50 <__sread>:
 800ce50:	b510      	push	{r4, lr}
 800ce52:	460c      	mov	r4, r1
 800ce54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce58:	f000 fa48 	bl	800d2ec <_read_r>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	bfab      	itete	ge
 800ce60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce62:	89a3      	ldrhlt	r3, [r4, #12]
 800ce64:	181b      	addge	r3, r3, r0
 800ce66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce6a:	bfac      	ite	ge
 800ce6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce6e:	81a3      	strhlt	r3, [r4, #12]
 800ce70:	bd10      	pop	{r4, pc}

0800ce72 <__swrite>:
 800ce72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce76:	461f      	mov	r7, r3
 800ce78:	898b      	ldrh	r3, [r1, #12]
 800ce7a:	05db      	lsls	r3, r3, #23
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	460c      	mov	r4, r1
 800ce80:	4616      	mov	r6, r2
 800ce82:	d505      	bpl.n	800ce90 <__swrite+0x1e>
 800ce84:	2302      	movs	r3, #2
 800ce86:	2200      	movs	r2, #0
 800ce88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce8c:	f000 f9b6 	bl	800d1fc <_lseek_r>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce9a:	81a3      	strh	r3, [r4, #12]
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	463b      	mov	r3, r7
 800cea0:	4628      	mov	r0, r5
 800cea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cea6:	f000 b869 	b.w	800cf7c <_write_r>

0800ceaa <__sseek>:
 800ceaa:	b510      	push	{r4, lr}
 800ceac:	460c      	mov	r4, r1
 800ceae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb2:	f000 f9a3 	bl	800d1fc <_lseek_r>
 800ceb6:	1c43      	adds	r3, r0, #1
 800ceb8:	89a3      	ldrh	r3, [r4, #12]
 800ceba:	bf15      	itete	ne
 800cebc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cec6:	81a3      	strheq	r3, [r4, #12]
 800cec8:	bf18      	it	ne
 800ceca:	81a3      	strhne	r3, [r4, #12]
 800cecc:	bd10      	pop	{r4, pc}

0800cece <__sclose>:
 800cece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced2:	f000 b8d3 	b.w	800d07c <_close_r>
	...

0800ced8 <__swbuf_r>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	460e      	mov	r6, r1
 800cedc:	4614      	mov	r4, r2
 800cede:	4605      	mov	r5, r0
 800cee0:	b118      	cbz	r0, 800ceea <__swbuf_r+0x12>
 800cee2:	6983      	ldr	r3, [r0, #24]
 800cee4:	b90b      	cbnz	r3, 800ceea <__swbuf_r+0x12>
 800cee6:	f7ff fba1 	bl	800c62c <__sinit>
 800ceea:	4b21      	ldr	r3, [pc, #132]	; (800cf70 <__swbuf_r+0x98>)
 800ceec:	429c      	cmp	r4, r3
 800ceee:	d12a      	bne.n	800cf46 <__swbuf_r+0x6e>
 800cef0:	686c      	ldr	r4, [r5, #4]
 800cef2:	69a3      	ldr	r3, [r4, #24]
 800cef4:	60a3      	str	r3, [r4, #8]
 800cef6:	89a3      	ldrh	r3, [r4, #12]
 800cef8:	071a      	lsls	r2, r3, #28
 800cefa:	d52e      	bpl.n	800cf5a <__swbuf_r+0x82>
 800cefc:	6923      	ldr	r3, [r4, #16]
 800cefe:	b363      	cbz	r3, 800cf5a <__swbuf_r+0x82>
 800cf00:	6923      	ldr	r3, [r4, #16]
 800cf02:	6820      	ldr	r0, [r4, #0]
 800cf04:	1ac0      	subs	r0, r0, r3
 800cf06:	6963      	ldr	r3, [r4, #20]
 800cf08:	b2f6      	uxtb	r6, r6
 800cf0a:	4283      	cmp	r3, r0
 800cf0c:	4637      	mov	r7, r6
 800cf0e:	dc04      	bgt.n	800cf1a <__swbuf_r+0x42>
 800cf10:	4621      	mov	r1, r4
 800cf12:	4628      	mov	r0, r5
 800cf14:	f000 f948 	bl	800d1a8 <_fflush_r>
 800cf18:	bb28      	cbnz	r0, 800cf66 <__swbuf_r+0x8e>
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	60a3      	str	r3, [r4, #8]
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	1c5a      	adds	r2, r3, #1
 800cf24:	6022      	str	r2, [r4, #0]
 800cf26:	701e      	strb	r6, [r3, #0]
 800cf28:	6963      	ldr	r3, [r4, #20]
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	4283      	cmp	r3, r0
 800cf2e:	d004      	beq.n	800cf3a <__swbuf_r+0x62>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	07db      	lsls	r3, r3, #31
 800cf34:	d519      	bpl.n	800cf6a <__swbuf_r+0x92>
 800cf36:	2e0a      	cmp	r6, #10
 800cf38:	d117      	bne.n	800cf6a <__swbuf_r+0x92>
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f000 f933 	bl	800d1a8 <_fflush_r>
 800cf42:	b190      	cbz	r0, 800cf6a <__swbuf_r+0x92>
 800cf44:	e00f      	b.n	800cf66 <__swbuf_r+0x8e>
 800cf46:	4b0b      	ldr	r3, [pc, #44]	; (800cf74 <__swbuf_r+0x9c>)
 800cf48:	429c      	cmp	r4, r3
 800cf4a:	d101      	bne.n	800cf50 <__swbuf_r+0x78>
 800cf4c:	68ac      	ldr	r4, [r5, #8]
 800cf4e:	e7d0      	b.n	800cef2 <__swbuf_r+0x1a>
 800cf50:	4b09      	ldr	r3, [pc, #36]	; (800cf78 <__swbuf_r+0xa0>)
 800cf52:	429c      	cmp	r4, r3
 800cf54:	bf08      	it	eq
 800cf56:	68ec      	ldreq	r4, [r5, #12]
 800cf58:	e7cb      	b.n	800cef2 <__swbuf_r+0x1a>
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	f000 f81f 	bl	800cfa0 <__swsetup_r>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d0cc      	beq.n	800cf00 <__swbuf_r+0x28>
 800cf66:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cf6a:	4638      	mov	r0, r7
 800cf6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	0800fe64 	.word	0x0800fe64
 800cf74:	0800fe84 	.word	0x0800fe84
 800cf78:	0800fe44 	.word	0x0800fe44

0800cf7c <_write_r>:
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	4c07      	ldr	r4, [pc, #28]	; (800cf9c <_write_r+0x20>)
 800cf80:	4605      	mov	r5, r0
 800cf82:	4608      	mov	r0, r1
 800cf84:	4611      	mov	r1, r2
 800cf86:	2200      	movs	r2, #0
 800cf88:	6022      	str	r2, [r4, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	f7f3 fc41 	bl	8000812 <_write>
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	d102      	bne.n	800cf9a <_write_r+0x1e>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	b103      	cbz	r3, 800cf9a <_write_r+0x1e>
 800cf98:	602b      	str	r3, [r5, #0]
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
 800cf9c:	200068a4 	.word	0x200068a4

0800cfa0 <__swsetup_r>:
 800cfa0:	4b32      	ldr	r3, [pc, #200]	; (800d06c <__swsetup_r+0xcc>)
 800cfa2:	b570      	push	{r4, r5, r6, lr}
 800cfa4:	681d      	ldr	r5, [r3, #0]
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	460c      	mov	r4, r1
 800cfaa:	b125      	cbz	r5, 800cfb6 <__swsetup_r+0x16>
 800cfac:	69ab      	ldr	r3, [r5, #24]
 800cfae:	b913      	cbnz	r3, 800cfb6 <__swsetup_r+0x16>
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f7ff fb3b 	bl	800c62c <__sinit>
 800cfb6:	4b2e      	ldr	r3, [pc, #184]	; (800d070 <__swsetup_r+0xd0>)
 800cfb8:	429c      	cmp	r4, r3
 800cfba:	d10f      	bne.n	800cfdc <__swsetup_r+0x3c>
 800cfbc:	686c      	ldr	r4, [r5, #4]
 800cfbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	0715      	lsls	r5, r2, #28
 800cfc6:	d42c      	bmi.n	800d022 <__swsetup_r+0x82>
 800cfc8:	06d0      	lsls	r0, r2, #27
 800cfca:	d411      	bmi.n	800cff0 <__swsetup_r+0x50>
 800cfcc:	2209      	movs	r2, #9
 800cfce:	6032      	str	r2, [r6, #0]
 800cfd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfd4:	81a3      	strh	r3, [r4, #12]
 800cfd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfda:	e03e      	b.n	800d05a <__swsetup_r+0xba>
 800cfdc:	4b25      	ldr	r3, [pc, #148]	; (800d074 <__swsetup_r+0xd4>)
 800cfde:	429c      	cmp	r4, r3
 800cfe0:	d101      	bne.n	800cfe6 <__swsetup_r+0x46>
 800cfe2:	68ac      	ldr	r4, [r5, #8]
 800cfe4:	e7eb      	b.n	800cfbe <__swsetup_r+0x1e>
 800cfe6:	4b24      	ldr	r3, [pc, #144]	; (800d078 <__swsetup_r+0xd8>)
 800cfe8:	429c      	cmp	r4, r3
 800cfea:	bf08      	it	eq
 800cfec:	68ec      	ldreq	r4, [r5, #12]
 800cfee:	e7e6      	b.n	800cfbe <__swsetup_r+0x1e>
 800cff0:	0751      	lsls	r1, r2, #29
 800cff2:	d512      	bpl.n	800d01a <__swsetup_r+0x7a>
 800cff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cff6:	b141      	cbz	r1, 800d00a <__swsetup_r+0x6a>
 800cff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cffc:	4299      	cmp	r1, r3
 800cffe:	d002      	beq.n	800d006 <__swsetup_r+0x66>
 800d000:	4630      	mov	r0, r6
 800d002:	f7ff fba5 	bl	800c750 <_free_r>
 800d006:	2300      	movs	r3, #0
 800d008:	6363      	str	r3, [r4, #52]	; 0x34
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d010:	81a3      	strh	r3, [r4, #12]
 800d012:	2300      	movs	r3, #0
 800d014:	6063      	str	r3, [r4, #4]
 800d016:	6923      	ldr	r3, [r4, #16]
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	f043 0308 	orr.w	r3, r3, #8
 800d020:	81a3      	strh	r3, [r4, #12]
 800d022:	6923      	ldr	r3, [r4, #16]
 800d024:	b94b      	cbnz	r3, 800d03a <__swsetup_r+0x9a>
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d030:	d003      	beq.n	800d03a <__swsetup_r+0x9a>
 800d032:	4621      	mov	r1, r4
 800d034:	4630      	mov	r0, r6
 800d036:	f000 f917 	bl	800d268 <__smakebuf_r>
 800d03a:	89a2      	ldrh	r2, [r4, #12]
 800d03c:	f012 0301 	ands.w	r3, r2, #1
 800d040:	d00c      	beq.n	800d05c <__swsetup_r+0xbc>
 800d042:	2300      	movs	r3, #0
 800d044:	60a3      	str	r3, [r4, #8]
 800d046:	6963      	ldr	r3, [r4, #20]
 800d048:	425b      	negs	r3, r3
 800d04a:	61a3      	str	r3, [r4, #24]
 800d04c:	6923      	ldr	r3, [r4, #16]
 800d04e:	b953      	cbnz	r3, 800d066 <__swsetup_r+0xc6>
 800d050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d054:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d058:	d1ba      	bne.n	800cfd0 <__swsetup_r+0x30>
 800d05a:	bd70      	pop	{r4, r5, r6, pc}
 800d05c:	0792      	lsls	r2, r2, #30
 800d05e:	bf58      	it	pl
 800d060:	6963      	ldrpl	r3, [r4, #20]
 800d062:	60a3      	str	r3, [r4, #8]
 800d064:	e7f2      	b.n	800d04c <__swsetup_r+0xac>
 800d066:	2000      	movs	r0, #0
 800d068:	e7f7      	b.n	800d05a <__swsetup_r+0xba>
 800d06a:	bf00      	nop
 800d06c:	20000014 	.word	0x20000014
 800d070:	0800fe64 	.word	0x0800fe64
 800d074:	0800fe84 	.word	0x0800fe84
 800d078:	0800fe44 	.word	0x0800fe44

0800d07c <_close_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4c06      	ldr	r4, [pc, #24]	; (800d098 <_close_r+0x1c>)
 800d080:	2300      	movs	r3, #0
 800d082:	4605      	mov	r5, r0
 800d084:	4608      	mov	r0, r1
 800d086:	6023      	str	r3, [r4, #0]
 800d088:	f7f3 fbdf 	bl	800084a <_close>
 800d08c:	1c43      	adds	r3, r0, #1
 800d08e:	d102      	bne.n	800d096 <_close_r+0x1a>
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	b103      	cbz	r3, 800d096 <_close_r+0x1a>
 800d094:	602b      	str	r3, [r5, #0]
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	200068a4 	.word	0x200068a4

0800d09c <__sflush_r>:
 800d09c:	898a      	ldrh	r2, [r1, #12]
 800d09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a2:	4605      	mov	r5, r0
 800d0a4:	0710      	lsls	r0, r2, #28
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	d458      	bmi.n	800d15c <__sflush_r+0xc0>
 800d0aa:	684b      	ldr	r3, [r1, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	dc05      	bgt.n	800d0bc <__sflush_r+0x20>
 800d0b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	dc02      	bgt.n	800d0bc <__sflush_r+0x20>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0be:	2e00      	cmp	r6, #0
 800d0c0:	d0f9      	beq.n	800d0b6 <__sflush_r+0x1a>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0c8:	682f      	ldr	r7, [r5, #0]
 800d0ca:	6a21      	ldr	r1, [r4, #32]
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	d032      	beq.n	800d136 <__sflush_r+0x9a>
 800d0d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0d2:	89a3      	ldrh	r3, [r4, #12]
 800d0d4:	075a      	lsls	r2, r3, #29
 800d0d6:	d505      	bpl.n	800d0e4 <__sflush_r+0x48>
 800d0d8:	6863      	ldr	r3, [r4, #4]
 800d0da:	1ac0      	subs	r0, r0, r3
 800d0dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0de:	b10b      	cbz	r3, 800d0e4 <__sflush_r+0x48>
 800d0e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0e2:	1ac0      	subs	r0, r0, r3
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0ea:	6a21      	ldr	r1, [r4, #32]
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	47b0      	blx	r6
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	d106      	bne.n	800d104 <__sflush_r+0x68>
 800d0f6:	6829      	ldr	r1, [r5, #0]
 800d0f8:	291d      	cmp	r1, #29
 800d0fa:	d848      	bhi.n	800d18e <__sflush_r+0xf2>
 800d0fc:	4a29      	ldr	r2, [pc, #164]	; (800d1a4 <__sflush_r+0x108>)
 800d0fe:	40ca      	lsrs	r2, r1
 800d100:	07d6      	lsls	r6, r2, #31
 800d102:	d544      	bpl.n	800d18e <__sflush_r+0xf2>
 800d104:	2200      	movs	r2, #0
 800d106:	6062      	str	r2, [r4, #4]
 800d108:	04d9      	lsls	r1, r3, #19
 800d10a:	6922      	ldr	r2, [r4, #16]
 800d10c:	6022      	str	r2, [r4, #0]
 800d10e:	d504      	bpl.n	800d11a <__sflush_r+0x7e>
 800d110:	1c42      	adds	r2, r0, #1
 800d112:	d101      	bne.n	800d118 <__sflush_r+0x7c>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	b903      	cbnz	r3, 800d11a <__sflush_r+0x7e>
 800d118:	6560      	str	r0, [r4, #84]	; 0x54
 800d11a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d11c:	602f      	str	r7, [r5, #0]
 800d11e:	2900      	cmp	r1, #0
 800d120:	d0c9      	beq.n	800d0b6 <__sflush_r+0x1a>
 800d122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d126:	4299      	cmp	r1, r3
 800d128:	d002      	beq.n	800d130 <__sflush_r+0x94>
 800d12a:	4628      	mov	r0, r5
 800d12c:	f7ff fb10 	bl	800c750 <_free_r>
 800d130:	2000      	movs	r0, #0
 800d132:	6360      	str	r0, [r4, #52]	; 0x34
 800d134:	e7c0      	b.n	800d0b8 <__sflush_r+0x1c>
 800d136:	2301      	movs	r3, #1
 800d138:	4628      	mov	r0, r5
 800d13a:	47b0      	blx	r6
 800d13c:	1c41      	adds	r1, r0, #1
 800d13e:	d1c8      	bne.n	800d0d2 <__sflush_r+0x36>
 800d140:	682b      	ldr	r3, [r5, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d0c5      	beq.n	800d0d2 <__sflush_r+0x36>
 800d146:	2b1d      	cmp	r3, #29
 800d148:	d001      	beq.n	800d14e <__sflush_r+0xb2>
 800d14a:	2b16      	cmp	r3, #22
 800d14c:	d101      	bne.n	800d152 <__sflush_r+0xb6>
 800d14e:	602f      	str	r7, [r5, #0]
 800d150:	e7b1      	b.n	800d0b6 <__sflush_r+0x1a>
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	e7ad      	b.n	800d0b8 <__sflush_r+0x1c>
 800d15c:	690f      	ldr	r7, [r1, #16]
 800d15e:	2f00      	cmp	r7, #0
 800d160:	d0a9      	beq.n	800d0b6 <__sflush_r+0x1a>
 800d162:	0793      	lsls	r3, r2, #30
 800d164:	680e      	ldr	r6, [r1, #0]
 800d166:	bf08      	it	eq
 800d168:	694b      	ldreq	r3, [r1, #20]
 800d16a:	600f      	str	r7, [r1, #0]
 800d16c:	bf18      	it	ne
 800d16e:	2300      	movne	r3, #0
 800d170:	eba6 0807 	sub.w	r8, r6, r7
 800d174:	608b      	str	r3, [r1, #8]
 800d176:	f1b8 0f00 	cmp.w	r8, #0
 800d17a:	dd9c      	ble.n	800d0b6 <__sflush_r+0x1a>
 800d17c:	4643      	mov	r3, r8
 800d17e:	463a      	mov	r2, r7
 800d180:	6a21      	ldr	r1, [r4, #32]
 800d182:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d184:	4628      	mov	r0, r5
 800d186:	47b0      	blx	r6
 800d188:	2800      	cmp	r0, #0
 800d18a:	dc06      	bgt.n	800d19a <__sflush_r+0xfe>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d198:	e78e      	b.n	800d0b8 <__sflush_r+0x1c>
 800d19a:	4407      	add	r7, r0
 800d19c:	eba8 0800 	sub.w	r8, r8, r0
 800d1a0:	e7e9      	b.n	800d176 <__sflush_r+0xda>
 800d1a2:	bf00      	nop
 800d1a4:	20400001 	.word	0x20400001

0800d1a8 <_fflush_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	690b      	ldr	r3, [r1, #16]
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	b1db      	cbz	r3, 800d1ea <_fflush_r+0x42>
 800d1b2:	b118      	cbz	r0, 800d1bc <_fflush_r+0x14>
 800d1b4:	6983      	ldr	r3, [r0, #24]
 800d1b6:	b90b      	cbnz	r3, 800d1bc <_fflush_r+0x14>
 800d1b8:	f7ff fa38 	bl	800c62c <__sinit>
 800d1bc:	4b0c      	ldr	r3, [pc, #48]	; (800d1f0 <_fflush_r+0x48>)
 800d1be:	429c      	cmp	r4, r3
 800d1c0:	d109      	bne.n	800d1d6 <_fflush_r+0x2e>
 800d1c2:	686c      	ldr	r4, [r5, #4]
 800d1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c8:	b17b      	cbz	r3, 800d1ea <_fflush_r+0x42>
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1d2:	f7ff bf63 	b.w	800d09c <__sflush_r>
 800d1d6:	4b07      	ldr	r3, [pc, #28]	; (800d1f4 <_fflush_r+0x4c>)
 800d1d8:	429c      	cmp	r4, r3
 800d1da:	d101      	bne.n	800d1e0 <_fflush_r+0x38>
 800d1dc:	68ac      	ldr	r4, [r5, #8]
 800d1de:	e7f1      	b.n	800d1c4 <_fflush_r+0x1c>
 800d1e0:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <_fflush_r+0x50>)
 800d1e2:	429c      	cmp	r4, r3
 800d1e4:	bf08      	it	eq
 800d1e6:	68ec      	ldreq	r4, [r5, #12]
 800d1e8:	e7ec      	b.n	800d1c4 <_fflush_r+0x1c>
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	bd38      	pop	{r3, r4, r5, pc}
 800d1ee:	bf00      	nop
 800d1f0:	0800fe64 	.word	0x0800fe64
 800d1f4:	0800fe84 	.word	0x0800fe84
 800d1f8:	0800fe44 	.word	0x0800fe44

0800d1fc <_lseek_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4c07      	ldr	r4, [pc, #28]	; (800d21c <_lseek_r+0x20>)
 800d200:	4605      	mov	r5, r0
 800d202:	4608      	mov	r0, r1
 800d204:	4611      	mov	r1, r2
 800d206:	2200      	movs	r2, #0
 800d208:	6022      	str	r2, [r4, #0]
 800d20a:	461a      	mov	r2, r3
 800d20c:	f7f3 fb44 	bl	8000898 <_lseek>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d102      	bne.n	800d21a <_lseek_r+0x1e>
 800d214:	6823      	ldr	r3, [r4, #0]
 800d216:	b103      	cbz	r3, 800d21a <_lseek_r+0x1e>
 800d218:	602b      	str	r3, [r5, #0]
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	200068a4 	.word	0x200068a4

0800d220 <__swhatbuf_r>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	460e      	mov	r6, r1
 800d224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d228:	2900      	cmp	r1, #0
 800d22a:	b096      	sub	sp, #88	; 0x58
 800d22c:	4614      	mov	r4, r2
 800d22e:	461d      	mov	r5, r3
 800d230:	da07      	bge.n	800d242 <__swhatbuf_r+0x22>
 800d232:	2300      	movs	r3, #0
 800d234:	602b      	str	r3, [r5, #0]
 800d236:	89b3      	ldrh	r3, [r6, #12]
 800d238:	061a      	lsls	r2, r3, #24
 800d23a:	d410      	bmi.n	800d25e <__swhatbuf_r+0x3e>
 800d23c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d240:	e00e      	b.n	800d260 <__swhatbuf_r+0x40>
 800d242:	466a      	mov	r2, sp
 800d244:	f000 f864 	bl	800d310 <_fstat_r>
 800d248:	2800      	cmp	r0, #0
 800d24a:	dbf2      	blt.n	800d232 <__swhatbuf_r+0x12>
 800d24c:	9a01      	ldr	r2, [sp, #4]
 800d24e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d256:	425a      	negs	r2, r3
 800d258:	415a      	adcs	r2, r3
 800d25a:	602a      	str	r2, [r5, #0]
 800d25c:	e7ee      	b.n	800d23c <__swhatbuf_r+0x1c>
 800d25e:	2340      	movs	r3, #64	; 0x40
 800d260:	2000      	movs	r0, #0
 800d262:	6023      	str	r3, [r4, #0]
 800d264:	b016      	add	sp, #88	; 0x58
 800d266:	bd70      	pop	{r4, r5, r6, pc}

0800d268 <__smakebuf_r>:
 800d268:	898b      	ldrh	r3, [r1, #12]
 800d26a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d26c:	079d      	lsls	r5, r3, #30
 800d26e:	4606      	mov	r6, r0
 800d270:	460c      	mov	r4, r1
 800d272:	d507      	bpl.n	800d284 <__smakebuf_r+0x1c>
 800d274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	6123      	str	r3, [r4, #16]
 800d27c:	2301      	movs	r3, #1
 800d27e:	6163      	str	r3, [r4, #20]
 800d280:	b002      	add	sp, #8
 800d282:	bd70      	pop	{r4, r5, r6, pc}
 800d284:	ab01      	add	r3, sp, #4
 800d286:	466a      	mov	r2, sp
 800d288:	f7ff ffca 	bl	800d220 <__swhatbuf_r>
 800d28c:	9900      	ldr	r1, [sp, #0]
 800d28e:	4605      	mov	r5, r0
 800d290:	4630      	mov	r0, r6
 800d292:	f7ff faab 	bl	800c7ec <_malloc_r>
 800d296:	b948      	cbnz	r0, 800d2ac <__smakebuf_r+0x44>
 800d298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d29c:	059a      	lsls	r2, r3, #22
 800d29e:	d4ef      	bmi.n	800d280 <__smakebuf_r+0x18>
 800d2a0:	f023 0303 	bic.w	r3, r3, #3
 800d2a4:	f043 0302 	orr.w	r3, r3, #2
 800d2a8:	81a3      	strh	r3, [r4, #12]
 800d2aa:	e7e3      	b.n	800d274 <__smakebuf_r+0xc>
 800d2ac:	4b0d      	ldr	r3, [pc, #52]	; (800d2e4 <__smakebuf_r+0x7c>)
 800d2ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2b0:	89a3      	ldrh	r3, [r4, #12]
 800d2b2:	6020      	str	r0, [r4, #0]
 800d2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2b8:	81a3      	strh	r3, [r4, #12]
 800d2ba:	9b00      	ldr	r3, [sp, #0]
 800d2bc:	6163      	str	r3, [r4, #20]
 800d2be:	9b01      	ldr	r3, [sp, #4]
 800d2c0:	6120      	str	r0, [r4, #16]
 800d2c2:	b15b      	cbz	r3, 800d2dc <__smakebuf_r+0x74>
 800d2c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	f000 f833 	bl	800d334 <_isatty_r>
 800d2ce:	b128      	cbz	r0, 800d2dc <__smakebuf_r+0x74>
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	f023 0303 	bic.w	r3, r3, #3
 800d2d6:	f043 0301 	orr.w	r3, r3, #1
 800d2da:	81a3      	strh	r3, [r4, #12]
 800d2dc:	89a3      	ldrh	r3, [r4, #12]
 800d2de:	431d      	orrs	r5, r3
 800d2e0:	81a5      	strh	r5, [r4, #12]
 800d2e2:	e7cd      	b.n	800d280 <__smakebuf_r+0x18>
 800d2e4:	0800c5f5 	.word	0x0800c5f5

0800d2e8 <__malloc_lock>:
 800d2e8:	4770      	bx	lr

0800d2ea <__malloc_unlock>:
 800d2ea:	4770      	bx	lr

0800d2ec <_read_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4c07      	ldr	r4, [pc, #28]	; (800d30c <_read_r+0x20>)
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	4608      	mov	r0, r1
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	6022      	str	r2, [r4, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f7f3 fa6c 	bl	80007d8 <_read>
 800d300:	1c43      	adds	r3, r0, #1
 800d302:	d102      	bne.n	800d30a <_read_r+0x1e>
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	b103      	cbz	r3, 800d30a <_read_r+0x1e>
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
 800d30c:	200068a4 	.word	0x200068a4

0800d310 <_fstat_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4c07      	ldr	r4, [pc, #28]	; (800d330 <_fstat_r+0x20>)
 800d314:	2300      	movs	r3, #0
 800d316:	4605      	mov	r5, r0
 800d318:	4608      	mov	r0, r1
 800d31a:	4611      	mov	r1, r2
 800d31c:	6023      	str	r3, [r4, #0]
 800d31e:	f7f3 faa0 	bl	8000862 <_fstat>
 800d322:	1c43      	adds	r3, r0, #1
 800d324:	d102      	bne.n	800d32c <_fstat_r+0x1c>
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	b103      	cbz	r3, 800d32c <_fstat_r+0x1c>
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	bd38      	pop	{r3, r4, r5, pc}
 800d32e:	bf00      	nop
 800d330:	200068a4 	.word	0x200068a4

0800d334 <_isatty_r>:
 800d334:	b538      	push	{r3, r4, r5, lr}
 800d336:	4c06      	ldr	r4, [pc, #24]	; (800d350 <_isatty_r+0x1c>)
 800d338:	2300      	movs	r3, #0
 800d33a:	4605      	mov	r5, r0
 800d33c:	4608      	mov	r0, r1
 800d33e:	6023      	str	r3, [r4, #0]
 800d340:	f7f3 fa9f 	bl	8000882 <_isatty>
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	d102      	bne.n	800d34e <_isatty_r+0x1a>
 800d348:	6823      	ldr	r3, [r4, #0]
 800d34a:	b103      	cbz	r3, 800d34e <_isatty_r+0x1a>
 800d34c:	602b      	str	r3, [r5, #0]
 800d34e:	bd38      	pop	{r3, r4, r5, pc}
 800d350:	200068a4 	.word	0x200068a4

0800d354 <_init>:
 800d354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d356:	bf00      	nop
 800d358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d35a:	bc08      	pop	{r3}
 800d35c:	469e      	mov	lr, r3
 800d35e:	4770      	bx	lr

0800d360 <_fini>:
 800d360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d362:	bf00      	nop
 800d364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d366:	bc08      	pop	{r3}
 800d368:	469e      	mov	lr, r3
 800d36a:	4770      	bx	lr
